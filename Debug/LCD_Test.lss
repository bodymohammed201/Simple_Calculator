
LCD_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004580  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00800060  00004580  000045f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003ad4  00000000  00000000  00004680  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000121a  00000000  00000000  00008154  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  0000936e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  000094ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  0000965d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000b6a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000c7a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000d728  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000d8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000db6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000e3f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3e       	cpi	r26, 0xEC	; 236
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 76 16 	call	0x2cec	; 0x2cec <main>
      7a:	0c 94 be 22 	jmp	0x457c	; 0x457c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 87 22 	jmp	0x450e	; 0x450e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab ec       	ldi	r26, 0xCB	; 203
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 a3 22 	jmp	0x4546	; 0x4546 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 93 22 	jmp	0x4526	; 0x4526 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 af 22 	jmp	0x455e	; 0x455e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 93 22 	jmp	0x4526	; 0x4526 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 af 22 	jmp	0x455e	; 0x455e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 87 22 	jmp	0x450e	; 0x450e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b ec       	ldi	r24, 0xCB	; 203
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 a3 22 	jmp	0x4546	; 0x4546 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 8f 22 	jmp	0x451e	; 0x451e <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6b ec       	ldi	r22, 0xCB	; 203
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 ab 22 	jmp	0x4556	; 0x4556 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 93 22 	jmp	0x4526	; 0x4526 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 af 22 	jmp	0x455e	; 0x455e <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 93 22 	jmp	0x4526	; 0x4526 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 af 22 	jmp	0x455e	; 0x455e <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 93 22 	jmp	0x4526	; 0x4526 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 af 22 	jmp	0x455e	; 0x455e <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 97 22 	jmp	0x452e	; 0x452e <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 b3 22 	jmp	0x4566	; 0x4566 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_u8SetPinDirection>:
#include "DIO_Config.h"
#include "../../LIB/BIT_MATH.h"
#include "../../LIB/STD_TYPES.h"

/*PIN CONFG*/ 
u8 DIO_u8SetPinDirection(u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8PinDirection){
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <DIO_u8SetPinDirection+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <DIO_u8SetPinDirection+0x8>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <DIO_u8SetPinDirection+0xa>
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	8a 83       	std	Y+2, r24	; 0x02
     c9e:	6b 83       	std	Y+3, r22	; 0x03
     ca0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = R_OK;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId > DIO_MAX_PORT_SIZE ||Copy_u8PinId > DIO_MAX_PIN_SIZE){
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	84 30       	cpi	r24, 0x04	; 4
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <DIO_u8SetPinDirection+0x24>
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	88 30       	cpi	r24, 0x08	; 8
     cb0:	10 f0       	brcs	.+4      	; 0xcb6 <DIO_u8SetPinDirection+0x28>
		Local_u8ErrorState = R_NOT_OK;
     cb2:	19 82       	std	Y+1, r1	; 0x01
     cb4:	e4 c0       	rjmp	.+456    	; 0xe7e <DIO_u8SetPinDirection+0x1f0>
	}
	else{
		switch (Copy_u8PortId){
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	3e 83       	std	Y+6, r19	; 0x06
     cbe:	2d 83       	std	Y+5, r18	; 0x05
     cc0:	8d 81       	ldd	r24, Y+5	; 0x05
     cc2:	9e 81       	ldd	r25, Y+6	; 0x06
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	91 05       	cpc	r25, r1
     cc8:	09 f4       	brne	.+2      	; 0xccc <DIO_u8SetPinDirection+0x3e>
     cca:	47 c0       	rjmp	.+142    	; 0xd5a <DIO_u8SetPinDirection+0xcc>
     ccc:	2d 81       	ldd	r18, Y+5	; 0x05
     cce:	3e 81       	ldd	r19, Y+6	; 0x06
     cd0:	22 30       	cpi	r18, 0x02	; 2
     cd2:	31 05       	cpc	r19, r1
     cd4:	2c f4       	brge	.+10     	; 0xce0 <DIO_u8SetPinDirection+0x52>
     cd6:	8d 81       	ldd	r24, Y+5	; 0x05
     cd8:	9e 81       	ldd	r25, Y+6	; 0x06
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	71 f0       	breq	.+28     	; 0xcfa <DIO_u8SetPinDirection+0x6c>
     cde:	cc c0       	rjmp	.+408    	; 0xe78 <DIO_u8SetPinDirection+0x1ea>
     ce0:	2d 81       	ldd	r18, Y+5	; 0x05
     ce2:	3e 81       	ldd	r19, Y+6	; 0x06
     ce4:	22 30       	cpi	r18, 0x02	; 2
     ce6:	31 05       	cpc	r19, r1
     ce8:	09 f4       	brne	.+2      	; 0xcec <DIO_u8SetPinDirection+0x5e>
     cea:	67 c0       	rjmp	.+206    	; 0xdba <DIO_u8SetPinDirection+0x12c>
     cec:	8d 81       	ldd	r24, Y+5	; 0x05
     cee:	9e 81       	ldd	r25, Y+6	; 0x06
     cf0:	83 30       	cpi	r24, 0x03	; 3
     cf2:	91 05       	cpc	r25, r1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <DIO_u8SetPinDirection+0x6a>
     cf6:	91 c0       	rjmp	.+290    	; 0xe1a <DIO_u8SetPinDirection+0x18c>
     cf8:	bf c0       	rjmp	.+382    	; 0xe78 <DIO_u8SetPinDirection+0x1ea>
			case DIO_PORTA_ID :   
			if(Copy_u8PinDirection==DIO_PIN_OUTPUT){ 
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	a1 f4       	brne	.+40     	; 0xd28 <DIO_u8SetPinDirection+0x9a>
				SET_BIT(DIO_DDRA,Copy_u8PinId);
     d00:	aa e3       	ldi	r26, 0x3A	; 58
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	ea e3       	ldi	r30, 0x3A	; 58
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	48 2f       	mov	r20, r24
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 2e       	mov	r0, r18
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <DIO_u8SetPinDirection+0x90>
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <DIO_u8SetPinDirection+0x8c>
     d22:	84 2b       	or	r24, r20
     d24:	8c 93       	st	X, r24
     d26:	a9 c0       	rjmp	.+338    	; 0xe7a <DIO_u8SetPinDirection+0x1ec>
				
			}
			else if(Copy_u8PinDirection==DIO_PIN_INPUT){
     d28:	8c 81       	ldd	r24, Y+4	; 0x04
     d2a:	88 23       	and	r24, r24
     d2c:	09 f0       	breq	.+2      	; 0xd30 <DIO_u8SetPinDirection+0xa2>
     d2e:	a5 c0       	rjmp	.+330    	; 0xe7a <DIO_u8SetPinDirection+0x1ec>
				CLR_BIT(DIO_DDRA,Copy_u8PinId);
     d30:	aa e3       	ldi	r26, 0x3A	; 58
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	ea e3       	ldi	r30, 0x3A	; 58
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	48 2f       	mov	r20, r24
     d3c:	8b 81       	ldd	r24, Y+3	; 0x03
     d3e:	28 2f       	mov	r18, r24
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	02 2e       	mov	r0, r18
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <DIO_u8SetPinDirection+0xc0>
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	0a 94       	dec	r0
     d50:	e2 f7       	brpl	.-8      	; 0xd4a <DIO_u8SetPinDirection+0xbc>
     d52:	80 95       	com	r24
     d54:	84 23       	and	r24, r20
     d56:	8c 93       	st	X, r24
     d58:	90 c0       	rjmp	.+288    	; 0xe7a <DIO_u8SetPinDirection+0x1ec>
			}
			break;
			
			case DIO_PORTB_ID :
			if(Copy_u8PinDirection==DIO_PIN_OUTPUT){ 
     d5a:	8c 81       	ldd	r24, Y+4	; 0x04
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	a1 f4       	brne	.+40     	; 0xd88 <DIO_u8SetPinDirection+0xfa>
				SET_BIT(DIO_DDRA,Copy_u8PinId);
     d60:	aa e3       	ldi	r26, 0x3A	; 58
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	ea e3       	ldi	r30, 0x3A	; 58
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	48 2f       	mov	r20, r24
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	02 2e       	mov	r0, r18
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <DIO_u8SetPinDirection+0xf0>
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	0a 94       	dec	r0
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <DIO_u8SetPinDirection+0xec>
     d82:	84 2b       	or	r24, r20
     d84:	8c 93       	st	X, r24
     d86:	79 c0       	rjmp	.+242    	; 0xe7a <DIO_u8SetPinDirection+0x1ec>
				
			}
			else if(Copy_u8PinDirection==DIO_PIN_INPUT){
     d88:	8c 81       	ldd	r24, Y+4	; 0x04
     d8a:	88 23       	and	r24, r24
     d8c:	09 f0       	breq	.+2      	; 0xd90 <DIO_u8SetPinDirection+0x102>
     d8e:	75 c0       	rjmp	.+234    	; 0xe7a <DIO_u8SetPinDirection+0x1ec>
				CLR_BIT(DIO_DDRA,Copy_u8PinId);
     d90:	aa e3       	ldi	r26, 0x3A	; 58
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	ea e3       	ldi	r30, 0x3A	; 58
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	48 2f       	mov	r20, r24
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	02 2e       	mov	r0, r18
     da8:	02 c0       	rjmp	.+4      	; 0xdae <DIO_u8SetPinDirection+0x120>
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	0a 94       	dec	r0
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <DIO_u8SetPinDirection+0x11c>
     db2:	80 95       	com	r24
     db4:	84 23       	and	r24, r20
     db6:	8c 93       	st	X, r24
     db8:	60 c0       	rjmp	.+192    	; 0xe7a <DIO_u8SetPinDirection+0x1ec>
			}
			break;
			case DIO_PORTC_ID :
				if(Copy_u8PinDirection==DIO_PIN_OUTPUT){ 
     dba:	8c 81       	ldd	r24, Y+4	; 0x04
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	a1 f4       	brne	.+40     	; 0xde8 <DIO_u8SetPinDirection+0x15a>
								SET_BIT(DIO_DDRA,Copy_u8PinId);
     dc0:	aa e3       	ldi	r26, 0x3A	; 58
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	ea e3       	ldi	r30, 0x3A	; 58
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	48 2f       	mov	r20, r24
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	02 2e       	mov	r0, r18
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <DIO_u8SetPinDirection+0x150>
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	0a 94       	dec	r0
     de0:	e2 f7       	brpl	.-8      	; 0xdda <DIO_u8SetPinDirection+0x14c>
     de2:	84 2b       	or	r24, r20
     de4:	8c 93       	st	X, r24
     de6:	49 c0       	rjmp	.+146    	; 0xe7a <DIO_u8SetPinDirection+0x1ec>
								
							}
							else if(Copy_u8PinDirection==DIO_PIN_INPUT){
     de8:	8c 81       	ldd	r24, Y+4	; 0x04
     dea:	88 23       	and	r24, r24
     dec:	09 f0       	breq	.+2      	; 0xdf0 <DIO_u8SetPinDirection+0x162>
     dee:	45 c0       	rjmp	.+138    	; 0xe7a <DIO_u8SetPinDirection+0x1ec>
								CLR_BIT(DIO_DDRA,Copy_u8PinId);
     df0:	aa e3       	ldi	r26, 0x3A	; 58
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	ea e3       	ldi	r30, 0x3A	; 58
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 2e       	mov	r0, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <DIO_u8SetPinDirection+0x180>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <DIO_u8SetPinDirection+0x17c>
     e12:	80 95       	com	r24
     e14:	84 23       	and	r24, r20
     e16:	8c 93       	st	X, r24
     e18:	30 c0       	rjmp	.+96     	; 0xe7a <DIO_u8SetPinDirection+0x1ec>
							}
			break;
			case DIO_PORTD_ID :
				if(Copy_u8PinDirection==DIO_PIN_OUTPUT){ 
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	81 30       	cpi	r24, 0x01	; 1
     e1e:	a1 f4       	brne	.+40     	; 0xe48 <DIO_u8SetPinDirection+0x1ba>
								SET_BIT(DIO_DDRA,Copy_u8PinId);
     e20:	aa e3       	ldi	r26, 0x3A	; 58
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	ea e3       	ldi	r30, 0x3A	; 58
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_u8SetPinDirection+0x1b0>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_u8SetPinDirection+0x1ac>
     e42:	84 2b       	or	r24, r20
     e44:	8c 93       	st	X, r24
     e46:	19 c0       	rjmp	.+50     	; 0xe7a <DIO_u8SetPinDirection+0x1ec>
								
							}
							else if(Copy_u8PinDirection==DIO_PIN_INPUT){
     e48:	8c 81       	ldd	r24, Y+4	; 0x04
     e4a:	88 23       	and	r24, r24
     e4c:	b1 f4       	brne	.+44     	; 0xe7a <DIO_u8SetPinDirection+0x1ec>
								CLR_BIT(DIO_DDRA,Copy_u8PinId);
     e4e:	aa e3       	ldi	r26, 0x3A	; 58
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	ea e3       	ldi	r30, 0x3A	; 58
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 2e       	mov	r0, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_u8SetPinDirection+0x1de>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	0a 94       	dec	r0
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_u8SetPinDirection+0x1da>
     e70:	80 95       	com	r24
     e72:	84 23       	and	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	01 c0       	rjmp	.+2      	; 0xe7a <DIO_u8SetPinDirection+0x1ec>
							}
			break;
			default : Local_u8ErrorState = R_NOT_OK;
     e78:	19 82       	std	Y+1, r1	; 0x01

		}
			Local_u8ErrorState = R_OK;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	89 83       	std	Y+1, r24	; 0x01
	}
return 	Local_u8ErrorState;
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e80:	26 96       	adiw	r28, 0x06	; 6
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	08 95       	ret

00000e92 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue    (u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8PinValue){
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	00 d0       	rcall	.+0      	; 0xe98 <DIO_u8SetPinValue+0x6>
     e98:	00 d0       	rcall	.+0      	; 0xe9a <DIO_u8SetPinValue+0x8>
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <DIO_u8SetPinValue+0xa>
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	8a 83       	std	Y+2, r24	; 0x02
     ea2:	6b 83       	std	Y+3, r22	; 0x03
     ea4:	4c 83       	std	Y+4, r20	; 0x04
		u8 Local_u8ErrorState = R_OK;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId > DIO_MAX_PORT_SIZE ||Copy_u8PinId > DIO_MAX_PIN_SIZE){
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	84 30       	cpi	r24, 0x04	; 4
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <DIO_u8SetPinValue+0x24>
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	88 30       	cpi	r24, 0x08	; 8
     eb4:	10 f0       	brcs	.+4      	; 0xeba <DIO_u8SetPinValue+0x28>
		Local_u8ErrorState = R_NOT_OK;
     eb6:	19 82       	std	Y+1, r1	; 0x01
     eb8:	e4 c0       	rjmp	.+456    	; 0x1082 <DIO_u8SetPinValue+0x1f0>
	}
	else{
		switch (Copy_u8PortId){
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	3e 83       	std	Y+6, r19	; 0x06
     ec2:	2d 83       	std	Y+5, r18	; 0x05
     ec4:	8d 81       	ldd	r24, Y+5	; 0x05
     ec6:	9e 81       	ldd	r25, Y+6	; 0x06
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	91 05       	cpc	r25, r1
     ecc:	09 f4       	brne	.+2      	; 0xed0 <DIO_u8SetPinValue+0x3e>
     ece:	47 c0       	rjmp	.+142    	; 0xf5e <DIO_u8SetPinValue+0xcc>
     ed0:	2d 81       	ldd	r18, Y+5	; 0x05
     ed2:	3e 81       	ldd	r19, Y+6	; 0x06
     ed4:	22 30       	cpi	r18, 0x02	; 2
     ed6:	31 05       	cpc	r19, r1
     ed8:	2c f4       	brge	.+10     	; 0xee4 <DIO_u8SetPinValue+0x52>
     eda:	8d 81       	ldd	r24, Y+5	; 0x05
     edc:	9e 81       	ldd	r25, Y+6	; 0x06
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	71 f0       	breq	.+28     	; 0xefe <DIO_u8SetPinValue+0x6c>
     ee2:	cc c0       	rjmp	.+408    	; 0x107c <DIO_u8SetPinValue+0x1ea>
     ee4:	2d 81       	ldd	r18, Y+5	; 0x05
     ee6:	3e 81       	ldd	r19, Y+6	; 0x06
     ee8:	22 30       	cpi	r18, 0x02	; 2
     eea:	31 05       	cpc	r19, r1
     eec:	09 f4       	brne	.+2      	; 0xef0 <DIO_u8SetPinValue+0x5e>
     eee:	67 c0       	rjmp	.+206    	; 0xfbe <DIO_u8SetPinValue+0x12c>
     ef0:	8d 81       	ldd	r24, Y+5	; 0x05
     ef2:	9e 81       	ldd	r25, Y+6	; 0x06
     ef4:	83 30       	cpi	r24, 0x03	; 3
     ef6:	91 05       	cpc	r25, r1
     ef8:	09 f4       	brne	.+2      	; 0xefc <DIO_u8SetPinValue+0x6a>
     efa:	91 c0       	rjmp	.+290    	; 0x101e <DIO_u8SetPinValue+0x18c>
     efc:	bf c0       	rjmp	.+382    	; 0x107c <DIO_u8SetPinValue+0x1ea>
			case DIO_PORTA_ID : 
			if(Copy_u8PinValue==DIO_PIN_LOW){
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	88 23       	and	r24, r24
     f02:	a9 f4       	brne	.+42     	; 0xf2e <DIO_u8SetPinValue+0x9c>
				CLR_BIT(DIO_PORTA,Copy_u8PinId);
     f04:	ab e3       	ldi	r26, 0x3B	; 59
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	eb e3       	ldi	r30, 0x3B	; 59
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_u8SetPinValue+0x90>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_u8SetPinValue+0x8c>
     f26:	80 95       	com	r24
     f28:	84 23       	and	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	a8 c0       	rjmp	.+336    	; 0x107e <DIO_u8SetPinValue+0x1ec>
			}
			else if(Copy_u8PinValue==DIO_PIN_HIGH){
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	09 f0       	breq	.+2      	; 0xf36 <DIO_u8SetPinValue+0xa4>
     f34:	a4 c0       	rjmp	.+328    	; 0x107e <DIO_u8SetPinValue+0x1ec>
				SET_BIT(DIO_PORTA,Copy_u8PinId);
     f36:	ab e3       	ldi	r26, 0x3B	; 59
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	eb e3       	ldi	r30, 0x3B	; 59
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_u8SetPinValue+0xc2>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_u8SetPinValue+0xbe>
     f58:	84 2b       	or	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	90 c0       	rjmp	.+288    	; 0x107e <DIO_u8SetPinValue+0x1ec>
			}
			break;
			
			case DIO_PORTB_ID :
			if(Copy_u8PinValue==DIO_PIN_LOW){
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	88 23       	and	r24, r24
     f62:	a9 f4       	brne	.+42     	; 0xf8e <DIO_u8SetPinValue+0xfc>
				CLR_BIT(DIO_PORTB,Copy_u8PinId);
     f64:	a8 e3       	ldi	r26, 0x38	; 56
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e8 e3       	ldi	r30, 0x38	; 56
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <DIO_u8SetPinValue+0xf0>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <DIO_u8SetPinValue+0xec>
     f86:	80 95       	com	r24
     f88:	84 23       	and	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	78 c0       	rjmp	.+240    	; 0x107e <DIO_u8SetPinValue+0x1ec>
			}
			else if(Copy_u8PinValue==DIO_PIN_HIGH){
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	09 f0       	breq	.+2      	; 0xf96 <DIO_u8SetPinValue+0x104>
     f94:	74 c0       	rjmp	.+232    	; 0x107e <DIO_u8SetPinValue+0x1ec>
				SET_BIT(DIO_PORTB,Copy_u8PinId);
     f96:	a8 e3       	ldi	r26, 0x38	; 56
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e8 e3       	ldi	r30, 0x38	; 56
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <DIO_u8SetPinValue+0x122>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <DIO_u8SetPinValue+0x11e>
     fb8:	84 2b       	or	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	60 c0       	rjmp	.+192    	; 0x107e <DIO_u8SetPinValue+0x1ec>
			}
			break;
			case DIO_PORTC_ID :
			if(Copy_u8PinValue==DIO_PIN_LOW){
     fbe:	8c 81       	ldd	r24, Y+4	; 0x04
     fc0:	88 23       	and	r24, r24
     fc2:	a9 f4       	brne	.+42     	; 0xfee <DIO_u8SetPinValue+0x15c>
				CLR_BIT(DIO_PORTC,Copy_u8PinId);
     fc4:	a5 e3       	ldi	r26, 0x35	; 53
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e5 e3       	ldi	r30, 0x35	; 53
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_u8SetPinValue+0x150>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_u8SetPinValue+0x14c>
     fe6:	80 95       	com	r24
     fe8:	84 23       	and	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	48 c0       	rjmp	.+144    	; 0x107e <DIO_u8SetPinValue+0x1ec>
			}
			else if(Copy_u8PinValue==DIO_PIN_HIGH){
     fee:	8c 81       	ldd	r24, Y+4	; 0x04
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	09 f0       	breq	.+2      	; 0xff6 <DIO_u8SetPinValue+0x164>
     ff4:	44 c0       	rjmp	.+136    	; 0x107e <DIO_u8SetPinValue+0x1ec>
				SET_BIT(DIO_PORTC,Copy_u8PinId);
     ff6:	a5 e3       	ldi	r26, 0x35	; 53
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e5 e3       	ldi	r30, 0x35	; 53
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_u8SetPinValue+0x182>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_u8SetPinValue+0x17e>
    1018:	84 2b       	or	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	30 c0       	rjmp	.+96     	; 0x107e <DIO_u8SetPinValue+0x1ec>
			}
			break;
			case DIO_PORTD_ID :
			if(Copy_u8PinValue==DIO_PIN_LOW){
    101e:	8c 81       	ldd	r24, Y+4	; 0x04
    1020:	88 23       	and	r24, r24
    1022:	a9 f4       	brne	.+42     	; 0x104e <DIO_u8SetPinValue+0x1bc>
				CLR_BIT(DIO_PORTD,Copy_u8PinId);
    1024:	a2 e3       	ldi	r26, 0x32	; 50
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e2 e3       	ldi	r30, 0x32	; 50
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <DIO_u8SetPinValue+0x1b0>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <DIO_u8SetPinValue+0x1ac>
    1046:	80 95       	com	r24
    1048:	84 23       	and	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	18 c0       	rjmp	.+48     	; 0x107e <DIO_u8SetPinValue+0x1ec>
			}
			else if(Copy_u8PinValue==DIO_PIN_HIGH){
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	a9 f4       	brne	.+42     	; 0x107e <DIO_u8SetPinValue+0x1ec>
				SET_BIT(DIO_PORTD,Copy_u8PinId);
    1054:	a2 e3       	ldi	r26, 0x32	; 50
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e2 e3       	ldi	r30, 0x32	; 50
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	48 2f       	mov	r20, r24
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 2e       	mov	r0, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <DIO_u8SetPinValue+0x1e0>
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	0a 94       	dec	r0
    1074:	e2 f7       	brpl	.-8      	; 0x106e <DIO_u8SetPinValue+0x1dc>
    1076:	84 2b       	or	r24, r20
    1078:	8c 93       	st	X, r24
    107a:	01 c0       	rjmp	.+2      	; 0x107e <DIO_u8SetPinValue+0x1ec>
			}
			break;
			default : Local_u8ErrorState = R_NOT_OK;
    107c:	19 82       	std	Y+1, r1	; 0x01

		}
			Local_u8ErrorState = R_OK;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	89 83       	std	Y+1, r24	; 0x01
	}
return 	Local_u8ErrorState;
    1082:	89 81       	ldd	r24, Y+1	; 0x01
}
    1084:	26 96       	adiw	r28, 0x06	; 6
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue    (u8 Copy_u8PortId,u8 Copy_u8PinId,u8 *Copy_Pu8ReturnedPinValue){
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	28 97       	sbiw	r28, 0x08	; 8
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	8b 83       	std	Y+3, r24	; 0x03
    10ac:	6c 83       	std	Y+4, r22	; 0x04
    10ae:	5e 83       	std	Y+6, r21	; 0x06
    10b0:	4d 83       	std	Y+5, r20	; 0x05
		u8 Local_u8ErrorState = R_OK;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	8a 83       	std	Y+2, r24	; 0x02
		u8 Local_u8PinValue;
	if(Copy_u8PortId > DIO_MAX_PORT_SIZE ||Copy_u8PinId > DIO_MAX_PIN_SIZE || Copy_Pu8ReturnedPinValue ==NULL ){
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	84 30       	cpi	r24, 0x04	; 4
    10ba:	38 f4       	brcc	.+14     	; 0x10ca <DIO_u8GetPinValue+0x34>
    10bc:	8c 81       	ldd	r24, Y+4	; 0x04
    10be:	88 30       	cpi	r24, 0x08	; 8
    10c0:	20 f4       	brcc	.+8      	; 0x10ca <DIO_u8GetPinValue+0x34>
    10c2:	8d 81       	ldd	r24, Y+5	; 0x05
    10c4:	9e 81       	ldd	r25, Y+6	; 0x06
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	11 f4       	brne	.+4      	; 0x10ce <DIO_u8GetPinValue+0x38>
		Local_u8ErrorState = R_NOT_OK;
    10ca:	1a 82       	std	Y+2, r1	; 0x02
    10cc:	99 c0       	rjmp	.+306    	; 0x1200 <DIO_u8GetPinValue+0x16a>

	}
	else{
		switch (Copy_u8PortId){
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	38 87       	std	Y+8, r19	; 0x08
    10d6:	2f 83       	std	Y+7, r18	; 0x07
    10d8:	4f 81       	ldd	r20, Y+7	; 0x07
    10da:	58 85       	ldd	r21, Y+8	; 0x08
    10dc:	41 30       	cpi	r20, 0x01	; 1
    10de:	51 05       	cpc	r21, r1
    10e0:	a9 f1       	breq	.+106    	; 0x114c <DIO_u8GetPinValue+0xb6>
    10e2:	8f 81       	ldd	r24, Y+7	; 0x07
    10e4:	98 85       	ldd	r25, Y+8	; 0x08
    10e6:	82 30       	cpi	r24, 0x02	; 2
    10e8:	91 05       	cpc	r25, r1
    10ea:	34 f4       	brge	.+12     	; 0x10f8 <DIO_u8GetPinValue+0x62>
    10ec:	2f 81       	ldd	r18, Y+7	; 0x07
    10ee:	38 85       	ldd	r19, Y+8	; 0x08
    10f0:	21 15       	cp	r18, r1
    10f2:	31 05       	cpc	r19, r1
    10f4:	71 f0       	breq	.+28     	; 0x1112 <DIO_u8GetPinValue+0x7c>
    10f6:	81 c0       	rjmp	.+258    	; 0x11fa <DIO_u8GetPinValue+0x164>
    10f8:	4f 81       	ldd	r20, Y+7	; 0x07
    10fa:	58 85       	ldd	r21, Y+8	; 0x08
    10fc:	42 30       	cpi	r20, 0x02	; 2
    10fe:	51 05       	cpc	r21, r1
    1100:	09 f4       	brne	.+2      	; 0x1104 <DIO_u8GetPinValue+0x6e>
    1102:	41 c0       	rjmp	.+130    	; 0x1186 <DIO_u8GetPinValue+0xf0>
    1104:	8f 81       	ldd	r24, Y+7	; 0x07
    1106:	98 85       	ldd	r25, Y+8	; 0x08
    1108:	83 30       	cpi	r24, 0x03	; 3
    110a:	91 05       	cpc	r25, r1
    110c:	09 f4       	brne	.+2      	; 0x1110 <DIO_u8GetPinValue+0x7a>
    110e:	58 c0       	rjmp	.+176    	; 0x11c0 <DIO_u8GetPinValue+0x12a>
    1110:	74 c0       	rjmp	.+232    	; 0x11fa <DIO_u8GetPinValue+0x164>
			case DIO_PORTA_ID : 
			Local_u8PinValue=GET_BIT(DIO_PINA,Copy_u8PinId);
    1112:	e9 e3       	ldi	r30, 0x39	; 57
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	a9 01       	movw	r20, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_u8GetPinValue+0x94>
    1126:	55 95       	asr	r21
    1128:	47 95       	ror	r20
    112a:	8a 95       	dec	r24
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_u8GetPinValue+0x90>
    112e:	ca 01       	movw	r24, r20
    1130:	81 70       	andi	r24, 0x01	; 1
    1132:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue==0){
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	88 23       	and	r24, r24
    1138:	21 f4       	brne	.+8      	; 0x1142 <DIO_u8GetPinValue+0xac>
			*Copy_Pu8ReturnedPinValue = DIO_PIN_LOW;
    113a:	ed 81       	ldd	r30, Y+5	; 0x05
    113c:	fe 81       	ldd	r31, Y+6	; 0x06
    113e:	10 82       	st	Z, r1
    1140:	5d c0       	rjmp	.+186    	; 0x11fc <DIO_u8GetPinValue+0x166>
			}
			else{
			*Copy_Pu8ReturnedPinValue = DIO_PIN_HIGH;
    1142:	ed 81       	ldd	r30, Y+5	; 0x05
    1144:	fe 81       	ldd	r31, Y+6	; 0x06
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	80 83       	st	Z, r24
    114a:	58 c0       	rjmp	.+176    	; 0x11fc <DIO_u8GetPinValue+0x166>
			}
			break;
			
			case DIO_PORTB_ID :
			Local_u8PinValue=GET_BIT(DIO_PINB,Copy_u8PinId);
    114c:	e6 e3       	ldi	r30, 0x36	; 54
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	8c 81       	ldd	r24, Y+4	; 0x04
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	a9 01       	movw	r20, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <DIO_u8GetPinValue+0xce>
    1160:	55 95       	asr	r21
    1162:	47 95       	ror	r20
    1164:	8a 95       	dec	r24
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <DIO_u8GetPinValue+0xca>
    1168:	ca 01       	movw	r24, r20
    116a:	81 70       	andi	r24, 0x01	; 1
    116c:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue==0){
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	88 23       	and	r24, r24
    1172:	21 f4       	brne	.+8      	; 0x117c <DIO_u8GetPinValue+0xe6>
			*Copy_Pu8ReturnedPinValue = DIO_PIN_LOW;
    1174:	ed 81       	ldd	r30, Y+5	; 0x05
    1176:	fe 81       	ldd	r31, Y+6	; 0x06
    1178:	10 82       	st	Z, r1
    117a:	40 c0       	rjmp	.+128    	; 0x11fc <DIO_u8GetPinValue+0x166>
			}
			else{
			*Copy_Pu8ReturnedPinValue = DIO_PIN_HIGH;
    117c:	ed 81       	ldd	r30, Y+5	; 0x05
    117e:	fe 81       	ldd	r31, Y+6	; 0x06
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	80 83       	st	Z, r24
    1184:	3b c0       	rjmp	.+118    	; 0x11fc <DIO_u8GetPinValue+0x166>
			}
			break;
			case DIO_PORTC_ID :
			Local_u8PinValue=GET_BIT(DIO_PINC,Copy_u8PinId);
    1186:	e3 e3       	ldi	r30, 0x33	; 51
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	8c 81       	ldd	r24, Y+4	; 0x04
    1192:	88 2f       	mov	r24, r24
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	a9 01       	movw	r20, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_u8GetPinValue+0x108>
    119a:	55 95       	asr	r21
    119c:	47 95       	ror	r20
    119e:	8a 95       	dec	r24
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_u8GetPinValue+0x104>
    11a2:	ca 01       	movw	r24, r20
    11a4:	81 70       	andi	r24, 0x01	; 1
    11a6:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue==0){
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	88 23       	and	r24, r24
    11ac:	21 f4       	brne	.+8      	; 0x11b6 <DIO_u8GetPinValue+0x120>
			*Copy_Pu8ReturnedPinValue = DIO_PIN_LOW;
    11ae:	ed 81       	ldd	r30, Y+5	; 0x05
    11b0:	fe 81       	ldd	r31, Y+6	; 0x06
    11b2:	10 82       	st	Z, r1
    11b4:	23 c0       	rjmp	.+70     	; 0x11fc <DIO_u8GetPinValue+0x166>
			}
			else{
			*Copy_Pu8ReturnedPinValue = DIO_PIN_HIGH;
    11b6:	ed 81       	ldd	r30, Y+5	; 0x05
    11b8:	fe 81       	ldd	r31, Y+6	; 0x06
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 83       	st	Z, r24
    11be:	1e c0       	rjmp	.+60     	; 0x11fc <DIO_u8GetPinValue+0x166>
			}
			break;
			case DIO_PORTD_ID :
			Local_u8PinValue=GET_BIT(DIO_PIND,Copy_u8PinId);
    11c0:	e0 e3       	ldi	r30, 0x30	; 48
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	8c 81       	ldd	r24, Y+4	; 0x04
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	a9 01       	movw	r20, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <DIO_u8GetPinValue+0x142>
    11d4:	55 95       	asr	r21
    11d6:	47 95       	ror	r20
    11d8:	8a 95       	dec	r24
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <DIO_u8GetPinValue+0x13e>
    11dc:	ca 01       	movw	r24, r20
    11de:	81 70       	andi	r24, 0x01	; 1
    11e0:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue==0){
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	88 23       	and	r24, r24
    11e6:	21 f4       	brne	.+8      	; 0x11f0 <DIO_u8GetPinValue+0x15a>
			*Copy_Pu8ReturnedPinValue = DIO_PIN_LOW;
    11e8:	ed 81       	ldd	r30, Y+5	; 0x05
    11ea:	fe 81       	ldd	r31, Y+6	; 0x06
    11ec:	10 82       	st	Z, r1
    11ee:	06 c0       	rjmp	.+12     	; 0x11fc <DIO_u8GetPinValue+0x166>
			}
			else{
			*Copy_Pu8ReturnedPinValue = DIO_PIN_HIGH;
    11f0:	ed 81       	ldd	r30, Y+5	; 0x05
    11f2:	fe 81       	ldd	r31, Y+6	; 0x06
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	80 83       	st	Z, r24
    11f8:	01 c0       	rjmp	.+2      	; 0x11fc <DIO_u8GetPinValue+0x166>
			}
			break;
			default : Local_u8ErrorState = R_NOT_OK;
    11fa:	1a 82       	std	Y+2, r1	; 0x02

		}
			Local_u8ErrorState = R_OK;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	8a 83       	std	Y+2, r24	; 0x02
	}
return 	Local_u8ErrorState;
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1202:	28 96       	adiw	r28, 0x08	; 8
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <DIO_u8SetPortDirection>:

                       /*PORT CONGG*/
u8 DIO_u8SetPortDirection(u8 Copy_u8PortId,u8 Copy_u8PortDirection){
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <DIO_u8SetPortDirection+0x6>
    121a:	00 d0       	rcall	.+0      	; 0x121c <DIO_u8SetPortDirection+0x8>
    121c:	0f 92       	push	r0
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	8a 83       	std	Y+2, r24	; 0x02
    1224:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ErrorState = R_OK;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId > DIO_MAX_PORT_SIZE ){
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	84 30       	cpi	r24, 0x04	; 4
    122e:	10 f0       	brcs	.+4      	; 0x1234 <DIO_u8SetPortDirection+0x20>
		Local_u8ErrorState = R_NOT_OK;
    1230:	19 82       	std	Y+1, r1	; 0x01
    1232:	5e c0       	rjmp	.+188    	; 0x12f0 <DIO_u8SetPortDirection+0xdc>
	}
	else{
		switch (Copy_u8PortId){
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	3d 83       	std	Y+5, r19	; 0x05
    123c:	2c 83       	std	Y+4, r18	; 0x04
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	9d 81       	ldd	r25, Y+5	; 0x05
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	91 05       	cpc	r25, r1
    1246:	21 f1       	breq	.+72     	; 0x1290 <DIO_u8SetPortDirection+0x7c>
    1248:	2c 81       	ldd	r18, Y+4	; 0x04
    124a:	3d 81       	ldd	r19, Y+5	; 0x05
    124c:	22 30       	cpi	r18, 0x02	; 2
    124e:	31 05       	cpc	r19, r1
    1250:	2c f4       	brge	.+10     	; 0x125c <DIO_u8SetPortDirection+0x48>
    1252:	8c 81       	ldd	r24, Y+4	; 0x04
    1254:	9d 81       	ldd	r25, Y+5	; 0x05
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	61 f0       	breq	.+24     	; 0x1272 <DIO_u8SetPortDirection+0x5e>
    125a:	47 c0       	rjmp	.+142    	; 0x12ea <DIO_u8SetPortDirection+0xd6>
    125c:	2c 81       	ldd	r18, Y+4	; 0x04
    125e:	3d 81       	ldd	r19, Y+5	; 0x05
    1260:	22 30       	cpi	r18, 0x02	; 2
    1262:	31 05       	cpc	r19, r1
    1264:	21 f1       	breq	.+72     	; 0x12ae <DIO_u8SetPortDirection+0x9a>
    1266:	8c 81       	ldd	r24, Y+4	; 0x04
    1268:	9d 81       	ldd	r25, Y+5	; 0x05
    126a:	83 30       	cpi	r24, 0x03	; 3
    126c:	91 05       	cpc	r25, r1
    126e:	71 f1       	breq	.+92     	; 0x12cc <DIO_u8SetPortDirection+0xb8>
    1270:	3c c0       	rjmp	.+120    	; 0x12ea <DIO_u8SetPortDirection+0xd6>
			case DIO_PORTA_ID :   
			if(Copy_u8PortDirection==DIO_PORT_OUTPUT){ 
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	29 f4       	brne	.+10     	; 0x1282 <DIO_u8SetPortDirection+0x6e>
			   DIO_DDRA = DIO_PORT_HIGH ;
    1278:	ea e3       	ldi	r30, 0x3A	; 58
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	8f ef       	ldi	r24, 0xFF	; 255
    127e:	80 83       	st	Z, r24
    1280:	35 c0       	rjmp	.+106    	; 0x12ec <DIO_u8SetPortDirection+0xd8>
			}
			else if(Copy_u8PortDirection==DIO_PORT_INPUT){
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	88 23       	and	r24, r24
    1286:	91 f5       	brne	.+100    	; 0x12ec <DIO_u8SetPortDirection+0xd8>
			   DIO_DDRA = DIO_PORT_LOW ;
    1288:	ea e3       	ldi	r30, 0x3A	; 58
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	10 82       	st	Z, r1
    128e:	2e c0       	rjmp	.+92     	; 0x12ec <DIO_u8SetPortDirection+0xd8>
			}
			break;
			
			case DIO_PORTB_ID :
				if(Copy_u8PortDirection==DIO_PORT_OUTPUT){ 
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	29 f4       	brne	.+10     	; 0x12a0 <DIO_u8SetPortDirection+0x8c>
							   DIO_DDRA = DIO_PORT_HIGH ;
    1296:	ea e3       	ldi	r30, 0x3A	; 58
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	8f ef       	ldi	r24, 0xFF	; 255
    129c:	80 83       	st	Z, r24
    129e:	26 c0       	rjmp	.+76     	; 0x12ec <DIO_u8SetPortDirection+0xd8>
							}
							else if(Copy_u8PortDirection==DIO_PORT_INPUT){
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	88 23       	and	r24, r24
    12a4:	19 f5       	brne	.+70     	; 0x12ec <DIO_u8SetPortDirection+0xd8>
							   DIO_DDRA = DIO_PORT_LOW ;
    12a6:	ea e3       	ldi	r30, 0x3A	; 58
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	10 82       	st	Z, r1
    12ac:	1f c0       	rjmp	.+62     	; 0x12ec <DIO_u8SetPortDirection+0xd8>
							}
			break;
			
			case DIO_PORTC_ID :
				if(Copy_u8PortDirection==DIO_PORT_OUTPUT){ 
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	29 f4       	brne	.+10     	; 0x12be <DIO_u8SetPortDirection+0xaa>
							   DIO_DDRA = DIO_PORT_HIGH ;
    12b4:	ea e3       	ldi	r30, 0x3A	; 58
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	8f ef       	ldi	r24, 0xFF	; 255
    12ba:	80 83       	st	Z, r24
    12bc:	17 c0       	rjmp	.+46     	; 0x12ec <DIO_u8SetPortDirection+0xd8>
							}
							else if(Copy_u8PortDirection==DIO_PORT_INPUT){
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	88 23       	and	r24, r24
    12c2:	a1 f4       	brne	.+40     	; 0x12ec <DIO_u8SetPortDirection+0xd8>
							   DIO_DDRA = DIO_PORT_LOW ;
    12c4:	ea e3       	ldi	r30, 0x3A	; 58
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	10 82       	st	Z, r1
    12ca:	10 c0       	rjmp	.+32     	; 0x12ec <DIO_u8SetPortDirection+0xd8>
							}
			break;
			
			case DIO_PORTD_ID :
				if(Copy_u8PortDirection==DIO_PORT_OUTPUT){ 
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	29 f4       	brne	.+10     	; 0x12dc <DIO_u8SetPortDirection+0xc8>
							   DIO_DDRA = DIO_PORT_HIGH ;
    12d2:	ea e3       	ldi	r30, 0x3A	; 58
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	8f ef       	ldi	r24, 0xFF	; 255
    12d8:	80 83       	st	Z, r24
    12da:	08 c0       	rjmp	.+16     	; 0x12ec <DIO_u8SetPortDirection+0xd8>
							}
							else if(Copy_u8PortDirection==DIO_PORT_INPUT){
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	88 23       	and	r24, r24
    12e0:	29 f4       	brne	.+10     	; 0x12ec <DIO_u8SetPortDirection+0xd8>
							   DIO_DDRA = DIO_PORT_LOW ;
    12e2:	ea e3       	ldi	r30, 0x3A	; 58
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	10 82       	st	Z, r1
    12e8:	01 c0       	rjmp	.+2      	; 0x12ec <DIO_u8SetPortDirection+0xd8>
							}
			break;
			
			default : Local_u8ErrorState = R_NOT_OK;
    12ea:	19 82       	std	Y+1, r1	; 0x01

		}
			Local_u8ErrorState = R_OK;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	89 83       	std	Y+1, r24	; 0x01
	}
return 	Local_u8ErrorState;
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue    (u8 Copy_u8PortId,u8 Copy_u8PortValue){
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	00 d0       	rcall	.+0      	; 0x1308 <DIO_u8SetPortValue+0x6>
    1308:	00 d0       	rcall	.+0      	; 0x130a <DIO_u8SetPortValue+0x8>
    130a:	0f 92       	push	r0
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	8a 83       	std	Y+2, r24	; 0x02
    1312:	6b 83       	std	Y+3, r22	; 0x03
			u8 Local_u8ErrorState = R_OK;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId > DIO_MAX_PORT_SIZE ){
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	84 30       	cpi	r24, 0x04	; 4
    131c:	10 f0       	brcs	.+4      	; 0x1322 <DIO_u8SetPortValue+0x20>
		Local_u8ErrorState = R_NOT_OK;
    131e:	19 82       	std	Y+1, r1	; 0x01
    1320:	36 c0       	rjmp	.+108    	; 0x138e <DIO_u8SetPortValue+0x8c>
	}
	else{
		switch (Copy_u8PortId){
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	3d 83       	std	Y+5, r19	; 0x05
    132a:	2c 83       	std	Y+4, r18	; 0x04
    132c:	8c 81       	ldd	r24, Y+4	; 0x04
    132e:	9d 81       	ldd	r25, Y+5	; 0x05
    1330:	81 30       	cpi	r24, 0x01	; 1
    1332:	91 05       	cpc	r25, r1
    1334:	d1 f0       	breq	.+52     	; 0x136a <DIO_u8SetPortValue+0x68>
    1336:	2c 81       	ldd	r18, Y+4	; 0x04
    1338:	3d 81       	ldd	r19, Y+5	; 0x05
    133a:	22 30       	cpi	r18, 0x02	; 2
    133c:	31 05       	cpc	r19, r1
    133e:	2c f4       	brge	.+10     	; 0x134a <DIO_u8SetPortValue+0x48>
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
    1342:	9d 81       	ldd	r25, Y+5	; 0x05
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	61 f0       	breq	.+24     	; 0x1360 <DIO_u8SetPortValue+0x5e>
    1348:	1f c0       	rjmp	.+62     	; 0x1388 <DIO_u8SetPortValue+0x86>
    134a:	2c 81       	ldd	r18, Y+4	; 0x04
    134c:	3d 81       	ldd	r19, Y+5	; 0x05
    134e:	22 30       	cpi	r18, 0x02	; 2
    1350:	31 05       	cpc	r19, r1
    1352:	81 f0       	breq	.+32     	; 0x1374 <DIO_u8SetPortValue+0x72>
    1354:	8c 81       	ldd	r24, Y+4	; 0x04
    1356:	9d 81       	ldd	r25, Y+5	; 0x05
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	81 f0       	breq	.+32     	; 0x137e <DIO_u8SetPortValue+0x7c>
    135e:	14 c0       	rjmp	.+40     	; 0x1388 <DIO_u8SetPortValue+0x86>
			case DIO_PORTA_ID :   
			DIO_PORTA = Copy_u8PortValue ;
    1360:	eb e3       	ldi	r30, 0x3B	; 59
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	80 83       	st	Z, r24
    1368:	10 c0       	rjmp	.+32     	; 0x138a <DIO_u8SetPortValue+0x88>
			break;
			
			case DIO_PORTB_ID :
			DIO_PORTB = Copy_u8PortValue ;
    136a:	e8 e3       	ldi	r30, 0x38	; 56
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	80 83       	st	Z, r24
    1372:	0b c0       	rjmp	.+22     	; 0x138a <DIO_u8SetPortValue+0x88>
			break;
			
			case DIO_PORTC_ID :
			DIO_PORTC = Copy_u8PortValue ;
    1374:	e5 e3       	ldi	r30, 0x35	; 53
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	80 83       	st	Z, r24
    137c:	06 c0       	rjmp	.+12     	; 0x138a <DIO_u8SetPortValue+0x88>
			break;
			
			case DIO_PORTD_ID :
			DIO_PORTD = Copy_u8PortValue ;
    137e:	e2 e3       	ldi	r30, 0x32	; 50
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	80 83       	st	Z, r24
    1386:	01 c0       	rjmp	.+2      	; 0x138a <DIO_u8SetPortValue+0x88>
			break;
			
			default : Local_u8ErrorState = R_NOT_OK;
    1388:	19 82       	std	Y+1, r1	; 0x01

		}
			Local_u8ErrorState = R_OK;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	89 83       	std	Y+1, r24	; 0x01
	}
return 	Local_u8ErrorState;
    138e:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue    (u8 Copy_u8PortId,u8 *Copy_Pu8ReturnedPortValue){
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <DIO_u8GetPortValue+0x6>
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <DIO_u8GetPortValue+0x8>
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <DIO_u8GetPortValue+0xa>
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	8a 83       	std	Y+2, r24	; 0x02
    13b0:	7c 83       	std	Y+4, r23	; 0x04
    13b2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = R_OK;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId > DIO_MAX_PORT_SIZE || Copy_Pu8ReturnedPortValue == NULL ){
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	84 30       	cpi	r24, 0x04	; 4
    13bc:	20 f4       	brcc	.+8      	; 0x13c6 <DIO_u8GetPortValue+0x26>
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	11 f4       	brne	.+4      	; 0x13ca <DIO_u8GetPortValue+0x2a>
		Local_u8ErrorState = R_NOT_OK;
    13c6:	19 82       	std	Y+1, r1	; 0x01
    13c8:	3e c0       	rjmp	.+124    	; 0x1446 <DIO_u8GetPortValue+0xa6>
	}
	else{
		switch (Copy_u8PortId){
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	3e 83       	std	Y+6, r19	; 0x06
    13d2:	2d 83       	std	Y+5, r18	; 0x05
    13d4:	8d 81       	ldd	r24, Y+5	; 0x05
    13d6:	9e 81       	ldd	r25, Y+6	; 0x06
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	91 05       	cpc	r25, r1
    13dc:	e1 f0       	breq	.+56     	; 0x1416 <DIO_u8GetPortValue+0x76>
    13de:	2d 81       	ldd	r18, Y+5	; 0x05
    13e0:	3e 81       	ldd	r19, Y+6	; 0x06
    13e2:	22 30       	cpi	r18, 0x02	; 2
    13e4:	31 05       	cpc	r19, r1
    13e6:	2c f4       	brge	.+10     	; 0x13f2 <DIO_u8GetPortValue+0x52>
    13e8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ea:	9e 81       	ldd	r25, Y+6	; 0x06
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	61 f0       	breq	.+24     	; 0x1408 <DIO_u8GetPortValue+0x68>
    13f0:	27 c0       	rjmp	.+78     	; 0x1440 <DIO_u8GetPortValue+0xa0>
    13f2:	2d 81       	ldd	r18, Y+5	; 0x05
    13f4:	3e 81       	ldd	r19, Y+6	; 0x06
    13f6:	22 30       	cpi	r18, 0x02	; 2
    13f8:	31 05       	cpc	r19, r1
    13fa:	a1 f0       	breq	.+40     	; 0x1424 <DIO_u8GetPortValue+0x84>
    13fc:	8d 81       	ldd	r24, Y+5	; 0x05
    13fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1400:	83 30       	cpi	r24, 0x03	; 3
    1402:	91 05       	cpc	r25, r1
    1404:	b1 f0       	breq	.+44     	; 0x1432 <DIO_u8GetPortValue+0x92>
    1406:	1c c0       	rjmp	.+56     	; 0x1440 <DIO_u8GetPortValue+0xa0>
			case DIO_PORTA_ID :   
			*Copy_Pu8ReturnedPortValue= DIO_PINA ;
    1408:	e9 e3       	ldi	r30, 0x39	; 57
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	eb 81       	ldd	r30, Y+3	; 0x03
    1410:	fc 81       	ldd	r31, Y+4	; 0x04
    1412:	80 83       	st	Z, r24
    1414:	16 c0       	rjmp	.+44     	; 0x1442 <DIO_u8GetPortValue+0xa2>
			break;
			
			case DIO_PORTB_ID :
			*Copy_Pu8ReturnedPortValue= DIO_PINB ;
    1416:	e6 e3       	ldi	r30, 0x36	; 54
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	eb 81       	ldd	r30, Y+3	; 0x03
    141e:	fc 81       	ldd	r31, Y+4	; 0x04
    1420:	80 83       	st	Z, r24
    1422:	0f c0       	rjmp	.+30     	; 0x1442 <DIO_u8GetPortValue+0xa2>
			break;
			
			case DIO_PORTC_ID :
		*Copy_Pu8ReturnedPortValue= DIO_PINC ;
    1424:	e3 e3       	ldi	r30, 0x33	; 51
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	eb 81       	ldd	r30, Y+3	; 0x03
    142c:	fc 81       	ldd	r31, Y+4	; 0x04
    142e:	80 83       	st	Z, r24
    1430:	08 c0       	rjmp	.+16     	; 0x1442 <DIO_u8GetPortValue+0xa2>
			break;
			
			case DIO_PORTD_ID :
			*Copy_Pu8ReturnedPortValue= DIO_PIND ;
    1432:	e0 e3       	ldi	r30, 0x30	; 48
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	eb 81       	ldd	r30, Y+3	; 0x03
    143a:	fc 81       	ldd	r31, Y+4	; 0x04
    143c:	80 83       	st	Z, r24
    143e:	01 c0       	rjmp	.+2      	; 0x1442 <DIO_u8GetPortValue+0xa2>
			break;
			
			default : Local_u8ErrorState = R_NOT_OK;
    1440:	19 82       	std	Y+1, r1	; 0x01

		}
			Local_u8ErrorState = R_OK;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	89 83       	std	Y+1, r24	; 0x01
	}
return 	Local_u8ErrorState;
    1446:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1448:	26 96       	adiw	r28, 0x06	; 6
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <DIO_VoidInit>:
void DIO_VoidInit(void){
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
	DIO_DDRA = Conc(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION
    1462:	ea e3       	ldi	r30, 0x3A	; 58
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	8f ef       	ldi	r24, 0xFF	; 255
    1468:	80 83       	st	Z, r24
	                ,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION
					,DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION
					,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION);
					
	DIO_DDRB = Conc(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION
    146a:	e7 e3       	ldi	r30, 0x37	; 55
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	10 82       	st	Z, r1
	                ,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION
					,DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION
					,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION);
					
    DIO_DDRC = Conc(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION
    1470:	e4 e3       	ldi	r30, 0x34	; 52
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	8f ef       	ldi	r24, 0xFF	; 255
    1476:	80 83       	st	Z, r24
	                ,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION
					,DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION
					,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION);
					
	DIO_DDRD = Conc(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION
    1478:	e1 e3       	ldi	r30, 0x31	; 49
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	8f e0       	ldi	r24, 0x0F	; 15
    147e:	80 83       	st	Z, r24
	                ,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION
					,DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION
					,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION);
					

	DIO_PORTA = Conc(DIO_u8_PA7_INITIAL_VALUES,DIO_u8_PA6_INITIAL_VALUES
    1480:	eb e3       	ldi	r30, 0x3B	; 59
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	87 e0       	ldi	r24, 0x07	; 7
    1486:	80 83       	st	Z, r24
	                ,DIO_u8_PA5_INITIAL_VALUES,DIO_u8_PA4_INITIAL_VALUES
					,DIO_u8_PA3_INITIAL_VALUES,DIO_u8_PA2_INITIAL_VALUES
					,DIO_u8_PA1_INITIAL_VALUES,DIO_u8_PA0_INITIAL_VALUES);
					
	DIO_PORTB = Conc(DIO_u8_PB7_INITIAL_VALUES,DIO_u8_PB6_INITIAL_VALUES
    1488:	e8 e3       	ldi	r30, 0x38	; 56
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	10 82       	st	Z, r1
	                ,DIO_u8_PB5_INITIAL_VALUES,DIO_u8_PB4_INITIAL_VALUES
					,DIO_u8_PB3_INITIAL_VALUES,DIO_u8_PB2_INITIAL_VALUES
					,DIO_u8_PB1_INITIAL_VALUES,DIO_u8_PB0_INITIAL_VALUES);
					
	DIO_PORTC = Conc(DIO_u8_PC7_INITIAL_VALUES,DIO_u8_PC6_INITIAL_VALUES
    148e:	e5 e3       	ldi	r30, 0x35	; 53
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	10 82       	st	Z, r1
	                ,DIO_u8_PC5_INITIAL_VALUES,DIO_u8_PC4_INITIAL_VALUES
					,DIO_u8_PC3_INITIAL_VALUES,DIO_u8_PC2_INITIAL_VALUES
					,DIO_u8_PC1_INITIAL_VALUES,DIO_u8_PC0_INITIAL_VALUES);
					
	DIO_PORTD = Conc(DIO_u8_PD7_INITIAL_VALUES,DIO_u8_PD6_INITIAL_VALUES
    1494:	e2 e3       	ldi	r30, 0x32	; 50
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	8f ef       	ldi	r24, 0xFF	; 255
    149a:	80 83       	st	Z, r24
	                ,DIO_u8_PD5_INITIAL_VALUES,DIO_u8_PD4_INITIAL_VALUES
					,DIO_u8_PD3_INITIAL_VALUES,DIO_u8_PD2_INITIAL_VALUES
					,DIO_u8_PD1_INITIAL_VALUES,DIO_u8_PD0_INITIAL_VALUES);				
}
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <SevenSeg_u8SendNumber>:
#include "../../MCAL/DIO/DIO_Interface.h"

#include "SevenSeg_Interface.h"
#include "SevenSeg_Private.h"
#include "SevenSeg_Config.h"
u8 SevenSeg_u8SendNumber(u8  Copy_Pu8Number){
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <SevenSeg_u8SendNumber+0x6>
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <SevenSeg_u8SendNumber+0x8>
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	8a 83       	std	Y+2, r24	; 0x02
	u8 ret = R_OK;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	89 83       	std	Y+1, r24	; 0x01
#if SevenSeg_MODE == SevenSeg_8BIT_WITHOUT_DECODER
  switch(Copy_Pu8Number){
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	3c 83       	std	Y+4, r19	; 0x04
    14bc:	2b 83       	std	Y+3, r18	; 0x03
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	84 30       	cpi	r24, 0x04	; 4
    14c4:	91 05       	cpc	r25, r1
    14c6:	09 f4       	brne	.+2      	; 0x14ca <SevenSeg_u8SendNumber+0x28>
    14c8:	55 c0       	rjmp	.+170    	; 0x1574 <SevenSeg_u8SendNumber+0xd2>
    14ca:	2b 81       	ldd	r18, Y+3	; 0x03
    14cc:	3c 81       	ldd	r19, Y+4	; 0x04
    14ce:	25 30       	cpi	r18, 0x05	; 5
    14d0:	31 05       	cpc	r19, r1
    14d2:	dc f4       	brge	.+54     	; 0x150a <SevenSeg_u8SendNumber+0x68>
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	91 05       	cpc	r25, r1
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <SevenSeg_u8SendNumber+0x3e>
    14de:	3b c0       	rjmp	.+118    	; 0x1556 <SevenSeg_u8SendNumber+0xb4>
    14e0:	2b 81       	ldd	r18, Y+3	; 0x03
    14e2:	3c 81       	ldd	r19, Y+4	; 0x04
    14e4:	22 30       	cpi	r18, 0x02	; 2
    14e6:	31 05       	cpc	r19, r1
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <SevenSeg_u8SendNumber+0x52>
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	69 f1       	breq	.+90     	; 0x154c <SevenSeg_u8SendNumber+0xaa>
    14f2:	5e c0       	rjmp	.+188    	; 0x15b0 <SevenSeg_u8SendNumber+0x10e>
    14f4:	2b 81       	ldd	r18, Y+3	; 0x03
    14f6:	3c 81       	ldd	r19, Y+4	; 0x04
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	89 f1       	breq	.+98     	; 0x1560 <SevenSeg_u8SendNumber+0xbe>
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	83 30       	cpi	r24, 0x03	; 3
    1504:	91 05       	cpc	r25, r1
    1506:	89 f1       	breq	.+98     	; 0x156a <SevenSeg_u8SendNumber+0xc8>
    1508:	53 c0       	rjmp	.+166    	; 0x15b0 <SevenSeg_u8SendNumber+0x10e>
    150a:	2b 81       	ldd	r18, Y+3	; 0x03
    150c:	3c 81       	ldd	r19, Y+4	; 0x04
    150e:	27 30       	cpi	r18, 0x07	; 7
    1510:	31 05       	cpc	r19, r1
    1512:	09 f4       	brne	.+2      	; 0x1516 <SevenSeg_u8SendNumber+0x74>
    1514:	3e c0       	rjmp	.+124    	; 0x1592 <SevenSeg_u8SendNumber+0xf0>
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	9c 81       	ldd	r25, Y+4	; 0x04
    151a:	88 30       	cpi	r24, 0x08	; 8
    151c:	91 05       	cpc	r25, r1
    151e:	5c f4       	brge	.+22     	; 0x1536 <SevenSeg_u8SendNumber+0x94>
    1520:	2b 81       	ldd	r18, Y+3	; 0x03
    1522:	3c 81       	ldd	r19, Y+4	; 0x04
    1524:	25 30       	cpi	r18, 0x05	; 5
    1526:	31 05       	cpc	r19, r1
    1528:	51 f1       	breq	.+84     	; 0x157e <SevenSeg_u8SendNumber+0xdc>
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	86 30       	cpi	r24, 0x06	; 6
    1530:	91 05       	cpc	r25, r1
    1532:	51 f1       	breq	.+84     	; 0x1588 <SevenSeg_u8SendNumber+0xe6>
    1534:	3d c0       	rjmp	.+122    	; 0x15b0 <SevenSeg_u8SendNumber+0x10e>
    1536:	2b 81       	ldd	r18, Y+3	; 0x03
    1538:	3c 81       	ldd	r19, Y+4	; 0x04
    153a:	28 30       	cpi	r18, 0x08	; 8
    153c:	31 05       	cpc	r19, r1
    153e:	71 f1       	breq	.+92     	; 0x159c <SevenSeg_u8SendNumber+0xfa>
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	89 30       	cpi	r24, 0x09	; 9
    1546:	91 05       	cpc	r25, r1
    1548:	71 f1       	breq	.+92     	; 0x15a6 <SevenSeg_u8SendNumber+0x104>
    154a:	32 c0       	rjmp	.+100    	; 0x15b0 <SevenSeg_u8SendNumber+0x10e>
  case 0 : DIO_u8SetPortValue(SevenSeg_u8_PORT_8_BIT,SEVENSEG_NUM_ZERO);
    154c:	82 e0       	ldi	r24, 0x02	; 2
    154e:	6f e3       	ldi	r22, 0x3F	; 63
    1550:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_u8SetPortValue>
    1554:	2e c0       	rjmp	.+92     	; 0x15b2 <SevenSeg_u8SendNumber+0x110>
	  break;
  case 1 : DIO_u8SetPortValue(SevenSeg_u8_PORT_8_BIT,SEVENSEG_NUM_ONE);
    1556:	82 e0       	ldi	r24, 0x02	; 2
    1558:	66 e0       	ldi	r22, 0x06	; 6
    155a:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_u8SetPortValue>
    155e:	29 c0       	rjmp	.+82     	; 0x15b2 <SevenSeg_u8SendNumber+0x110>
 	  break;

  case 2 : DIO_u8SetPortValue(SevenSeg_u8_PORT_8_BIT,SEVENSEG_NUM_TWO);
    1560:	82 e0       	ldi	r24, 0x02	; 2
    1562:	6b e5       	ldi	r22, 0x5B	; 91
    1564:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_u8SetPortValue>
    1568:	24 c0       	rjmp	.+72     	; 0x15b2 <SevenSeg_u8SendNumber+0x110>
 	  break;
  case 3:  DIO_u8SetPortValue(SevenSeg_u8_PORT_8_BIT,SEVENSEG_NUM_THREE);
    156a:	82 e0       	ldi	r24, 0x02	; 2
    156c:	6f e4       	ldi	r22, 0x4F	; 79
    156e:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_u8SetPortValue>
    1572:	1f c0       	rjmp	.+62     	; 0x15b2 <SevenSeg_u8SendNumber+0x110>
 	  break;
  case 4 : DIO_u8SetPortValue(SevenSeg_u8_PORT_8_BIT,SEVENSEG_NUM_FOUR);
    1574:	82 e0       	ldi	r24, 0x02	; 2
    1576:	66 e6       	ldi	r22, 0x66	; 102
    1578:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_u8SetPortValue>
    157c:	1a c0       	rjmp	.+52     	; 0x15b2 <SevenSeg_u8SendNumber+0x110>
 	  break;
  case 5 : DIO_u8SetPortValue(SevenSeg_u8_PORT_8_BIT,SEVENSEG_NUM_FIVE);
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	6d e6       	ldi	r22, 0x6D	; 109
    1582:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_u8SetPortValue>
    1586:	15 c0       	rjmp	.+42     	; 0x15b2 <SevenSeg_u8SendNumber+0x110>
 	  break;
  case 6 : DIO_u8SetPortValue(SevenSeg_u8_PORT_8_BIT,SEVENSEG_NUM_SIX);
    1588:	82 e0       	ldi	r24, 0x02	; 2
    158a:	6d e7       	ldi	r22, 0x7D	; 125
    158c:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_u8SetPortValue>
    1590:	10 c0       	rjmp	.+32     	; 0x15b2 <SevenSeg_u8SendNumber+0x110>
 	  break;
  case 7 : DIO_u8SetPortValue(SevenSeg_u8_PORT_8_BIT,SEVENSEG_NUM_SEVEN);
    1592:	82 e0       	ldi	r24, 0x02	; 2
    1594:	67 e0       	ldi	r22, 0x07	; 7
    1596:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_u8SetPortValue>
    159a:	0b c0       	rjmp	.+22     	; 0x15b2 <SevenSeg_u8SendNumber+0x110>
 	  break;
  case 8 : DIO_u8SetPortValue(SevenSeg_u8_PORT_8_BIT,SEVENSEG_NUM_EIGHT);
    159c:	82 e0       	ldi	r24, 0x02	; 2
    159e:	6f e7       	ldi	r22, 0x7F	; 127
    15a0:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_u8SetPortValue>
    15a4:	06 c0       	rjmp	.+12     	; 0x15b2 <SevenSeg_u8SendNumber+0x110>
 	  break;
  case 9 : DIO_u8SetPortValue(SevenSeg_u8_PORT_8_BIT,SEVENSEG_NUM_NINE);
    15a6:	82 e0       	ldi	r24, 0x02	; 2
    15a8:	6f e6       	ldi	r22, 0x6F	; 111
    15aa:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_u8SetPortValue>
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <SevenSeg_u8SendNumber+0x110>
 	  break;
  default : ret = R_NOT_OK;
    15b0:	19 82       	std	Y+1, r1	; 0x01
  	  DIO_u8SetPinValue(SevenSeg_u8_PORT_4_BIT,SevenSeg_u8_Pin1,GET_BIT(Copy_Pu8Number,1));
  	  DIO_u8SetPinValue(SevenSeg_u8_PORT_4_BIT,SevenSeg_u8_Pin2,GET_BIT(Copy_Pu8Number,2));
  	  DIO_u8SetPinValue(SevenSeg_u8_PORT_4_BIT,SevenSeg_u8_Pin3,GET_BIT(Copy_Pu8Number,3));

#endif
	return ret ;
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	08 95       	ret

000015c2 <helper_4_Bit>:
  void helper_4_Bit(u8  Copy_Pu8Number){
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	0f 92       	push	r0
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	89 83       	std	Y+1, r24	; 0x01

  }
    15ce:	0f 90       	pop	r0
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <Led_voidTurnOn>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include "Led_Interface.h"
#include "Led_Private.h"
#include "Led_Config.h"

void Led_voidTurnOn(u8 Copy_u8PortID,u8 Copy_u8PINID){
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	00 d0       	rcall	.+0      	; 0x15dc <Led_voidTurnOn+0x6>
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPinValue(Copy_u8PortID,Copy_u8PINID,DIO_PIN_HIGH);
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	6a 81       	ldd	r22, Y+2	; 0x02
    15e8:	41 e0       	ldi	r20, 0x01	; 1
    15ea:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	
}
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	08 95       	ret

000015f8 <Led_voidTurnOff>:
void Led_voidTurnOff(u8 Copy_u8PortID,u8 Copy_u8PINID){
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <Led_voidTurnOff+0x6>
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPinValue(Copy_u8PortID,Copy_u8PINID,DIO_PIN_LOW);
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	6a 81       	ldd	r22, Y+2	; 0x02
    160a:	40 e0       	ldi	r20, 0x00	; 0
    160c:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	
}
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <LCD_voidInit>:
/*HAL*/
#include "LCD_Interface.h"
#include "LCD_Private.h"
#include "LCD_Config.h"

void LCD_voidInit(void){
    161a:	0f 93       	push	r16
    161c:	1f 93       	push	r17
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    1626:	c4 56       	subi	r28, 0x64	; 100
    1628:	d0 40       	sbci	r29, 0x00	; 0
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	fe 01       	movw	r30, r28
    1636:	ef 59       	subi	r30, 0x9F	; 159
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	ac e0       	ldi	r26, 0x0C	; 12
    1640:	b2 e4       	ldi	r27, 0x42	; 66
    1642:	80 83       	st	Z, r24
    1644:	91 83       	std	Z+1, r25	; 0x01
    1646:	a2 83       	std	Z+2, r26	; 0x02
    1648:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164a:	8e 01       	movw	r16, r28
    164c:	03 5a       	subi	r16, 0xA3	; 163
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
    1650:	fe 01       	movw	r30, r28
    1652:	ef 59       	subi	r30, 0x9F	; 159
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	60 81       	ld	r22, Z
    1658:	71 81       	ldd	r23, Z+1	; 0x01
    165a:	82 81       	ldd	r24, Z+2	; 0x02
    165c:	93 81       	ldd	r25, Z+3	; 0x03
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	4a ef       	ldi	r20, 0xFA	; 250
    1664:	54 e4       	ldi	r21, 0x44	; 68
    1666:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	f8 01       	movw	r30, r16
    1670:	80 83       	st	Z, r24
    1672:	91 83       	std	Z+1, r25	; 0x01
    1674:	a2 83       	std	Z+2, r26	; 0x02
    1676:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1678:	fe 01       	movw	r30, r28
    167a:	e3 5a       	subi	r30, 0xA3	; 163
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	60 81       	ld	r22, Z
    1680:	71 81       	ldd	r23, Z+1	; 0x01
    1682:	82 81       	ldd	r24, Z+2	; 0x02
    1684:	93 81       	ldd	r25, Z+3	; 0x03
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e8       	ldi	r20, 0x80	; 128
    168c:	5f e3       	ldi	r21, 0x3F	; 63
    168e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1692:	88 23       	and	r24, r24
    1694:	44 f4       	brge	.+16     	; 0x16a6 <LCD_voidInit+0x8c>
		__ticks = 1;
    1696:	fe 01       	movw	r30, r28
    1698:	e5 5a       	subi	r30, 0xA5	; 165
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	91 83       	std	Z+1, r25	; 0x01
    16a2:	80 83       	st	Z, r24
    16a4:	64 c0       	rjmp	.+200    	; 0x176e <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    16a6:	fe 01       	movw	r30, r28
    16a8:	e3 5a       	subi	r30, 0xA3	; 163
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	3f ef       	ldi	r19, 0xFF	; 255
    16b8:	4f e7       	ldi	r20, 0x7F	; 127
    16ba:	57 e4       	ldi	r21, 0x47	; 71
    16bc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16c0:	18 16       	cp	r1, r24
    16c2:	0c f0       	brlt	.+2      	; 0x16c6 <LCD_voidInit+0xac>
    16c4:	43 c0       	rjmp	.+134    	; 0x174c <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c6:	fe 01       	movw	r30, r28
    16c8:	ef 59       	subi	r30, 0x9F	; 159
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	60 81       	ld	r22, Z
    16ce:	71 81       	ldd	r23, Z+1	; 0x01
    16d0:	82 81       	ldd	r24, Z+2	; 0x02
    16d2:	93 81       	ldd	r25, Z+3	; 0x03
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	40 e2       	ldi	r20, 0x20	; 32
    16da:	51 e4       	ldi	r21, 0x41	; 65
    16dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	8e 01       	movw	r16, r28
    16e6:	05 5a       	subi	r16, 0xA5	; 165
    16e8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ea:	bc 01       	movw	r22, r24
    16ec:	cd 01       	movw	r24, r26
    16ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	f8 01       	movw	r30, r16
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	80 83       	st	Z, r24
    16fc:	1f c0       	rjmp	.+62     	; 0x173c <LCD_voidInit+0x122>
    16fe:	fe 01       	movw	r30, r28
    1700:	e7 5a       	subi	r30, 0xA7	; 167
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	88 ec       	ldi	r24, 0xC8	; 200
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	91 83       	std	Z+1, r25	; 0x01
    170a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    170c:	fe 01       	movw	r30, r28
    170e:	e7 5a       	subi	r30, 0xA7	; 167
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	80 81       	ld	r24, Z
    1714:	91 81       	ldd	r25, Z+1	; 0x01
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <LCD_voidInit+0xfc>
    171a:	fe 01       	movw	r30, r28
    171c:	e7 5a       	subi	r30, 0xA7	; 167
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	91 83       	std	Z+1, r25	; 0x01
    1722:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1724:	de 01       	movw	r26, r28
    1726:	a5 5a       	subi	r26, 0xA5	; 165
    1728:	bf 4f       	sbci	r27, 0xFF	; 255
    172a:	fe 01       	movw	r30, r28
    172c:	e5 5a       	subi	r30, 0xA5	; 165
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	80 81       	ld	r24, Z
    1732:	91 81       	ldd	r25, Z+1	; 0x01
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	11 96       	adiw	r26, 0x01	; 1
    1738:	9c 93       	st	X, r25
    173a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173c:	fe 01       	movw	r30, r28
    173e:	e5 5a       	subi	r30, 0xA5	; 165
    1740:	ff 4f       	sbci	r31, 0xFF	; 255
    1742:	80 81       	ld	r24, Z
    1744:	91 81       	ldd	r25, Z+1	; 0x01
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	d1 f6       	brne	.-76     	; 0x16fe <LCD_voidInit+0xe4>
    174a:	27 c0       	rjmp	.+78     	; 0x179a <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174c:	8e 01       	movw	r16, r28
    174e:	05 5a       	subi	r16, 0xA5	; 165
    1750:	1f 4f       	sbci	r17, 0xFF	; 255
    1752:	fe 01       	movw	r30, r28
    1754:	e3 5a       	subi	r30, 0xA3	; 163
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	60 81       	ld	r22, Z
    175a:	71 81       	ldd	r23, Z+1	; 0x01
    175c:	82 81       	ldd	r24, Z+2	; 0x02
    175e:	93 81       	ldd	r25, Z+3	; 0x03
    1760:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	f8 01       	movw	r30, r16
    176a:	91 83       	std	Z+1, r25	; 0x01
    176c:	80 83       	st	Z, r24
    176e:	de 01       	movw	r26, r28
    1770:	a9 5a       	subi	r26, 0xA9	; 169
    1772:	bf 4f       	sbci	r27, 0xFF	; 255
    1774:	fe 01       	movw	r30, r28
    1776:	e5 5a       	subi	r30, 0xA5	; 165
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	80 81       	ld	r24, Z
    177c:	91 81       	ldd	r25, Z+1	; 0x01
    177e:	8d 93       	st	X+, r24
    1780:	9c 93       	st	X, r25
    1782:	fe 01       	movw	r30, r28
    1784:	e9 5a       	subi	r30, 0xA9	; 169
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	80 81       	ld	r24, Z
    178a:	91 81       	ldd	r25, Z+1	; 0x01
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	f1 f7       	brne	.-4      	; 0x178c <LCD_voidInit+0x172>
    1790:	fe 01       	movw	r30, r28
    1792:	e9 5a       	subi	r30, 0xA9	; 169
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	91 83       	std	Z+1, r25	; 0x01
    1798:	80 83       	st	Z, r24
	LCD_voidSendCmnd(0b00000110);
#elif LCD_MODE == LCD_4BIT
	  _delay_ms(35);
	/*function set cmnd */
	  /*  step1 Rs = 0 */
	  	DIO_u8SetPinValue(LCD_u8_PORTRs,LCD_u8_PinRs,DIO_PIN_LOW);
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	40 e0       	ldi	r20, 0x00	; 0
    17a0:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	  	/*        RW = 0 */
	  	DIO_u8SetPinValue(LCD_u8_PORTRW,LCD_u8_PinRW,DIO_PIN_LOW);
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	61 e0       	ldi	r22, 0x01	; 1
    17a8:	40 e0       	ldi	r20, 0x00	; 0
    17aa:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	  	DIO_u8SetPinValue(LCD_u8_PORTD4,LCD_u8_PIND4,0);
    17ae:	82 e0       	ldi	r24, 0x02	; 2
    17b0:	64 e0       	ldi	r22, 0x04	; 4
    17b2:	40 e0       	ldi	r20, 0x00	; 0
    17b4:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	  	DIO_u8SetPinValue(LCD_u8_PORTD5,LCD_u8_PIND5,1);
    17b8:	82 e0       	ldi	r24, 0x02	; 2
    17ba:	65 e0       	ldi	r22, 0x05	; 5
    17bc:	41 e0       	ldi	r20, 0x01	; 1
    17be:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	  	DIO_u8SetPinValue(LCD_u8_PORTD6,LCD_u8_PIND6,0);
    17c2:	82 e0       	ldi	r24, 0x02	; 2
    17c4:	66 e0       	ldi	r22, 0x06	; 6
    17c6:	40 e0       	ldi	r20, 0x00	; 0
    17c8:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	  	DIO_u8SetPinValue(LCD_u8_PORTD7,LCD_u8_PIND7,0);
    17cc:	82 e0       	ldi	r24, 0x02	; 2
    17ce:	67 e0       	ldi	r22, 0x07	; 7
    17d0:	40 e0       	ldi	r20, 0x00	; 0
    17d2:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(LCD_u8_PORTEnable,LCD_u8_PinEnable,DIO_PIN_HIGH);
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	62 e0       	ldi	r22, 0x02	; 2
    17da:	41 e0       	ldi	r20, 0x01	; 1
    17dc:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
    17e0:	fe 01       	movw	r30, r28
    17e2:	ed 5a       	subi	r30, 0xAD	; 173
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	a0 e8       	ldi	r26, 0x80	; 128
    17ec:	bf e3       	ldi	r27, 0x3F	; 63
    17ee:	80 83       	st	Z, r24
    17f0:	91 83       	std	Z+1, r25	; 0x01
    17f2:	a2 83       	std	Z+2, r26	; 0x02
    17f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17f6:	8e 01       	movw	r16, r28
    17f8:	01 5b       	subi	r16, 0xB1	; 177
    17fa:	1f 4f       	sbci	r17, 0xFF	; 255
    17fc:	fe 01       	movw	r30, r28
    17fe:	ed 5a       	subi	r30, 0xAD	; 173
    1800:	ff 4f       	sbci	r31, 0xFF	; 255
    1802:	60 81       	ld	r22, Z
    1804:	71 81       	ldd	r23, Z+1	; 0x01
    1806:	82 81       	ldd	r24, Z+2	; 0x02
    1808:	93 81       	ldd	r25, Z+3	; 0x03
    180a:	2b ea       	ldi	r18, 0xAB	; 171
    180c:	3a ea       	ldi	r19, 0xAA	; 170
    180e:	4a e2       	ldi	r20, 0x2A	; 42
    1810:	50 e4       	ldi	r21, 0x40	; 64
    1812:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	f8 01       	movw	r30, r16
    181c:	80 83       	st	Z, r24
    181e:	91 83       	std	Z+1, r25	; 0x01
    1820:	a2 83       	std	Z+2, r26	; 0x02
    1822:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1824:	fe 01       	movw	r30, r28
    1826:	e1 5b       	subi	r30, 0xB1	; 177
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	60 81       	ld	r22, Z
    182c:	71 81       	ldd	r23, Z+1	; 0x01
    182e:	82 81       	ldd	r24, Z+2	; 0x02
    1830:	93 81       	ldd	r25, Z+3	; 0x03
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e8       	ldi	r20, 0x80	; 128
    1838:	5f e3       	ldi	r21, 0x3F	; 63
    183a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    183e:	88 23       	and	r24, r24
    1840:	34 f4       	brge	.+12     	; 0x184e <LCD_voidInit+0x234>
		__ticks = 1;
    1842:	fe 01       	movw	r30, r28
    1844:	e2 5b       	subi	r30, 0xB2	; 178
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	80 83       	st	Z, r24
    184c:	e0 c0       	rjmp	.+448    	; 0x1a0e <LCD_voidInit+0x3f4>
	else if (__tmp > 255)
    184e:	fe 01       	movw	r30, r28
    1850:	e1 5b       	subi	r30, 0xB1	; 177
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	60 81       	ld	r22, Z
    1856:	71 81       	ldd	r23, Z+1	; 0x01
    1858:	82 81       	ldd	r24, Z+2	; 0x02
    185a:	93 81       	ldd	r25, Z+3	; 0x03
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	4f e7       	ldi	r20, 0x7F	; 127
    1862:	53 e4       	ldi	r21, 0x43	; 67
    1864:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1868:	18 16       	cp	r1, r24
    186a:	0c f0       	brlt	.+2      	; 0x186e <LCD_voidInit+0x254>
    186c:	c0 c0       	rjmp	.+384    	; 0x19ee <LCD_voidInit+0x3d4>
	{
		_delay_ms(__us / 1000.0);
    186e:	fe 01       	movw	r30, r28
    1870:	ed 5a       	subi	r30, 0xAD	; 173
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	60 81       	ld	r22, Z
    1876:	71 81       	ldd	r23, Z+1	; 0x01
    1878:	82 81       	ldd	r24, Z+2	; 0x02
    187a:	93 81       	ldd	r25, Z+3	; 0x03
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	4a e7       	ldi	r20, 0x7A	; 122
    1882:	54 e4       	ldi	r21, 0x44	; 68
    1884:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	fe 01       	movw	r30, r28
    188e:	e6 5b       	subi	r30, 0xB6	; 182
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	80 83       	st	Z, r24
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	a2 83       	std	Z+2, r26	; 0x02
    1898:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189a:	8e 01       	movw	r16, r28
    189c:	0a 5b       	subi	r16, 0xBA	; 186
    189e:	1f 4f       	sbci	r17, 0xFF	; 255
    18a0:	fe 01       	movw	r30, r28
    18a2:	e6 5b       	subi	r30, 0xB6	; 182
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	60 81       	ld	r22, Z
    18a8:	71 81       	ldd	r23, Z+1	; 0x01
    18aa:	82 81       	ldd	r24, Z+2	; 0x02
    18ac:	93 81       	ldd	r25, Z+3	; 0x03
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	4a ef       	ldi	r20, 0xFA	; 250
    18b4:	54 e4       	ldi	r21, 0x44	; 68
    18b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	f8 01       	movw	r30, r16
    18c0:	80 83       	st	Z, r24
    18c2:	91 83       	std	Z+1, r25	; 0x01
    18c4:	a2 83       	std	Z+2, r26	; 0x02
    18c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18c8:	fe 01       	movw	r30, r28
    18ca:	ea 5b       	subi	r30, 0xBA	; 186
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	60 81       	ld	r22, Z
    18d0:	71 81       	ldd	r23, Z+1	; 0x01
    18d2:	82 81       	ldd	r24, Z+2	; 0x02
    18d4:	93 81       	ldd	r25, Z+3	; 0x03
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e8       	ldi	r20, 0x80	; 128
    18dc:	5f e3       	ldi	r21, 0x3F	; 63
    18de:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18e2:	88 23       	and	r24, r24
    18e4:	44 f4       	brge	.+16     	; 0x18f6 <LCD_voidInit+0x2dc>
		__ticks = 1;
    18e6:	fe 01       	movw	r30, r28
    18e8:	ec 5b       	subi	r30, 0xBC	; 188
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
    18f4:	64 c0       	rjmp	.+200    	; 0x19be <LCD_voidInit+0x3a4>
	else if (__tmp > 65535)
    18f6:	fe 01       	movw	r30, r28
    18f8:	ea 5b       	subi	r30, 0xBA	; 186
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	60 81       	ld	r22, Z
    18fe:	71 81       	ldd	r23, Z+1	; 0x01
    1900:	82 81       	ldd	r24, Z+2	; 0x02
    1902:	93 81       	ldd	r25, Z+3	; 0x03
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	3f ef       	ldi	r19, 0xFF	; 255
    1908:	4f e7       	ldi	r20, 0x7F	; 127
    190a:	57 e4       	ldi	r21, 0x47	; 71
    190c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1910:	18 16       	cp	r1, r24
    1912:	0c f0       	brlt	.+2      	; 0x1916 <LCD_voidInit+0x2fc>
    1914:	43 c0       	rjmp	.+134    	; 0x199c <LCD_voidInit+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1916:	fe 01       	movw	r30, r28
    1918:	e6 5b       	subi	r30, 0xB6	; 182
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	60 81       	ld	r22, Z
    191e:	71 81       	ldd	r23, Z+1	; 0x01
    1920:	82 81       	ldd	r24, Z+2	; 0x02
    1922:	93 81       	ldd	r25, Z+3	; 0x03
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e2       	ldi	r20, 0x20	; 32
    192a:	51 e4       	ldi	r21, 0x41	; 65
    192c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	8e 01       	movw	r16, r28
    1936:	0c 5b       	subi	r16, 0xBC	; 188
    1938:	1f 4f       	sbci	r17, 0xFF	; 255
    193a:	bc 01       	movw	r22, r24
    193c:	cd 01       	movw	r24, r26
    193e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	f8 01       	movw	r30, r16
    1948:	91 83       	std	Z+1, r25	; 0x01
    194a:	80 83       	st	Z, r24
    194c:	1f c0       	rjmp	.+62     	; 0x198c <LCD_voidInit+0x372>
    194e:	fe 01       	movw	r30, r28
    1950:	ee 5b       	subi	r30, 0xBE	; 190
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	88 ec       	ldi	r24, 0xC8	; 200
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	91 83       	std	Z+1, r25	; 0x01
    195a:	80 83       	st	Z, r24
    195c:	fe 01       	movw	r30, r28
    195e:	ee 5b       	subi	r30, 0xBE	; 190
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	80 81       	ld	r24, Z
    1964:	91 81       	ldd	r25, Z+1	; 0x01
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <LCD_voidInit+0x34c>
    196a:	fe 01       	movw	r30, r28
    196c:	ee 5b       	subi	r30, 0xBE	; 190
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	91 83       	std	Z+1, r25	; 0x01
    1972:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1974:	de 01       	movw	r26, r28
    1976:	ac 5b       	subi	r26, 0xBC	; 188
    1978:	bf 4f       	sbci	r27, 0xFF	; 255
    197a:	fe 01       	movw	r30, r28
    197c:	ec 5b       	subi	r30, 0xBC	; 188
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	80 81       	ld	r24, Z
    1982:	91 81       	ldd	r25, Z+1	; 0x01
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	11 96       	adiw	r26, 0x01	; 1
    1988:	9c 93       	st	X, r25
    198a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198c:	fe 01       	movw	r30, r28
    198e:	ec 5b       	subi	r30, 0xBC	; 188
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	80 81       	ld	r24, Z
    1994:	91 81       	ldd	r25, Z+1	; 0x01
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	d1 f6       	brne	.-76     	; 0x194e <LCD_voidInit+0x334>
    199a:	42 c0       	rjmp	.+132    	; 0x1a20 <LCD_voidInit+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199c:	8e 01       	movw	r16, r28
    199e:	0c 5b       	subi	r16, 0xBC	; 188
    19a0:	1f 4f       	sbci	r17, 0xFF	; 255
    19a2:	fe 01       	movw	r30, r28
    19a4:	ea 5b       	subi	r30, 0xBA	; 186
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	60 81       	ld	r22, Z
    19aa:	71 81       	ldd	r23, Z+1	; 0x01
    19ac:	82 81       	ldd	r24, Z+2	; 0x02
    19ae:	93 81       	ldd	r25, Z+3	; 0x03
    19b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	f8 01       	movw	r30, r16
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	80 83       	st	Z, r24
    19be:	de 01       	movw	r26, r28
    19c0:	a0 5c       	subi	r26, 0xC0	; 192
    19c2:	bf 4f       	sbci	r27, 0xFF	; 255
    19c4:	fe 01       	movw	r30, r28
    19c6:	ec 5b       	subi	r30, 0xBC	; 188
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	80 81       	ld	r24, Z
    19cc:	91 81       	ldd	r25, Z+1	; 0x01
    19ce:	11 96       	adiw	r26, 0x01	; 1
    19d0:	9c 93       	st	X, r25
    19d2:	8e 93       	st	-X, r24
    19d4:	fe 01       	movw	r30, r28
    19d6:	e0 5c       	subi	r30, 0xC0	; 192
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	80 81       	ld	r24, Z
    19dc:	91 81       	ldd	r25, Z+1	; 0x01
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	f1 f7       	brne	.-4      	; 0x19de <LCD_voidInit+0x3c4>
    19e2:	fe 01       	movw	r30, r28
    19e4:	e0 5c       	subi	r30, 0xC0	; 192
    19e6:	ff 4f       	sbci	r31, 0xFF	; 255
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	80 83       	st	Z, r24
    19ec:	19 c0       	rjmp	.+50     	; 0x1a20 <LCD_voidInit+0x406>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19ee:	8e 01       	movw	r16, r28
    19f0:	02 5b       	subi	r16, 0xB2	; 178
    19f2:	1f 4f       	sbci	r17, 0xFF	; 255
    19f4:	fe 01       	movw	r30, r28
    19f6:	e1 5b       	subi	r30, 0xB1	; 177
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	60 81       	ld	r22, Z
    19fc:	71 81       	ldd	r23, Z+1	; 0x01
    19fe:	82 81       	ldd	r24, Z+2	; 0x02
    1a00:	93 81       	ldd	r25, Z+3	; 0x03
    1a02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	80 83       	st	Z, r24
    1a0e:	fe 01       	movw	r30, r28
    1a10:	e2 5b       	subi	r30, 0xB2	; 178
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	80 81       	ld	r24, Z
    1a16:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a18:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a1a:	8a 95       	dec	r24
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <LCD_voidInit+0x400>
    1a1e:	8f af       	std	Y+63, r24	; 0x3f
						/*  E= 0         */
	     	_delay_us(1);
		DIO_u8SetPinValue(LCD_u8_PORTEnable,LCD_u8_PinEnable,DIO_PIN_LOW);
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	62 e0       	ldi	r22, 0x02	; 2
    1a24:	40 e0       	ldi	r20, 0x00	; 0
    1a26:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>

	   LCD_voidSendCmnd(0b00101000);
    1a2a:	88 e2       	ldi	r24, 0x28	; 40
    1a2c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidSendCmnd>
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	a8 e4       	ldi	r26, 0x48	; 72
    1a36:	b2 e4       	ldi	r27, 0x42	; 66
    1a38:	8b af       	std	Y+59, r24	; 0x3b
    1a3a:	9c af       	std	Y+60, r25	; 0x3c
    1a3c:	ad af       	std	Y+61, r26	; 0x3d
    1a3e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a40:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a42:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a44:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a46:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a48:	2b ea       	ldi	r18, 0xAB	; 171
    1a4a:	3a ea       	ldi	r19, 0xAA	; 170
    1a4c:	4a e2       	ldi	r20, 0x2A	; 42
    1a4e:	50 e4       	ldi	r21, 0x40	; 64
    1a50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	8f ab       	std	Y+55, r24	; 0x37
    1a5a:	98 af       	std	Y+56, r25	; 0x38
    1a5c:	a9 af       	std	Y+57, r26	; 0x39
    1a5e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a60:	6f a9       	ldd	r22, Y+55	; 0x37
    1a62:	78 ad       	ldd	r23, Y+56	; 0x38
    1a64:	89 ad       	ldd	r24, Y+57	; 0x39
    1a66:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e8       	ldi	r20, 0x80	; 128
    1a6e:	5f e3       	ldi	r21, 0x3F	; 63
    1a70:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a74:	88 23       	and	r24, r24
    1a76:	1c f4       	brge	.+6      	; 0x1a7e <LCD_voidInit+0x464>
		__ticks = 1;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	8e ab       	std	Y+54, r24	; 0x36
    1a7c:	91 c0       	rjmp	.+290    	; 0x1ba0 <LCD_voidInit+0x586>
	else if (__tmp > 255)
    1a7e:	6f a9       	ldd	r22, Y+55	; 0x37
    1a80:	78 ad       	ldd	r23, Y+56	; 0x38
    1a82:	89 ad       	ldd	r24, Y+57	; 0x39
    1a84:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	4f e7       	ldi	r20, 0x7F	; 127
    1a8c:	53 e4       	ldi	r21, 0x43	; 67
    1a8e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a92:	18 16       	cp	r1, r24
    1a94:	0c f0       	brlt	.+2      	; 0x1a98 <LCD_voidInit+0x47e>
    1a96:	7b c0       	rjmp	.+246    	; 0x1b8e <LCD_voidInit+0x574>
	{
		_delay_ms(__us / 1000.0);
    1a98:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a9a:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	4a e7       	ldi	r20, 0x7A	; 122
    1aa6:	54 e4       	ldi	r21, 0x44	; 68
    1aa8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	8a ab       	std	Y+50, r24	; 0x32
    1ab2:	9b ab       	std	Y+51, r25	; 0x33
    1ab4:	ac ab       	std	Y+52, r26	; 0x34
    1ab6:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab8:	6a a9       	ldd	r22, Y+50	; 0x32
    1aba:	7b a9       	ldd	r23, Y+51	; 0x33
    1abc:	8c a9       	ldd	r24, Y+52	; 0x34
    1abe:	9d a9       	ldd	r25, Y+53	; 0x35
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	4a ef       	ldi	r20, 0xFA	; 250
    1ac6:	54 e4       	ldi	r21, 0x44	; 68
    1ac8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	8e a7       	std	Y+46, r24	; 0x2e
    1ad2:	9f a7       	std	Y+47, r25	; 0x2f
    1ad4:	a8 ab       	std	Y+48, r26	; 0x30
    1ad6:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1ad8:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ada:	7f a5       	ldd	r23, Y+47	; 0x2f
    1adc:	88 a9       	ldd	r24, Y+48	; 0x30
    1ade:	99 a9       	ldd	r25, Y+49	; 0x31
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e8       	ldi	r20, 0x80	; 128
    1ae6:	5f e3       	ldi	r21, 0x3F	; 63
    1ae8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1aec:	88 23       	and	r24, r24
    1aee:	2c f4       	brge	.+10     	; 0x1afa <LCD_voidInit+0x4e0>
		__ticks = 1;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	9d a7       	std	Y+45, r25	; 0x2d
    1af6:	8c a7       	std	Y+44, r24	; 0x2c
    1af8:	3f c0       	rjmp	.+126    	; 0x1b78 <LCD_voidInit+0x55e>
	else if (__tmp > 65535)
    1afa:	6e a5       	ldd	r22, Y+46	; 0x2e
    1afc:	7f a5       	ldd	r23, Y+47	; 0x2f
    1afe:	88 a9       	ldd	r24, Y+48	; 0x30
    1b00:	99 a9       	ldd	r25, Y+49	; 0x31
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	3f ef       	ldi	r19, 0xFF	; 255
    1b06:	4f e7       	ldi	r20, 0x7F	; 127
    1b08:	57 e4       	ldi	r21, 0x47	; 71
    1b0a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b0e:	18 16       	cp	r1, r24
    1b10:	4c f5       	brge	.+82     	; 0x1b64 <LCD_voidInit+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b12:	6a a9       	ldd	r22, Y+50	; 0x32
    1b14:	7b a9       	ldd	r23, Y+51	; 0x33
    1b16:	8c a9       	ldd	r24, Y+52	; 0x34
    1b18:	9d a9       	ldd	r25, Y+53	; 0x35
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e2       	ldi	r20, 0x20	; 32
    1b20:	51 e4       	ldi	r21, 0x41	; 65
    1b22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	bc 01       	movw	r22, r24
    1b2c:	cd 01       	movw	r24, r26
    1b2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	9d a7       	std	Y+45, r25	; 0x2d
    1b38:	8c a7       	std	Y+44, r24	; 0x2c
    1b3a:	0f c0       	rjmp	.+30     	; 0x1b5a <LCD_voidInit+0x540>
    1b3c:	88 ec       	ldi	r24, 0xC8	; 200
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	9b a7       	std	Y+43, r25	; 0x2b
    1b42:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b44:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b46:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <LCD_voidInit+0x52e>
    1b4c:	9b a7       	std	Y+43, r25	; 0x2b
    1b4e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b50:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b52:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	9d a7       	std	Y+45, r25	; 0x2d
    1b58:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b5c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	69 f7       	brne	.-38     	; 0x1b3c <LCD_voidInit+0x522>
    1b62:	24 c0       	rjmp	.+72     	; 0x1bac <LCD_voidInit+0x592>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b64:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b66:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b68:	88 a9       	ldd	r24, Y+48	; 0x30
    1b6a:	99 a9       	ldd	r25, Y+49	; 0x31
    1b6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	9d a7       	std	Y+45, r25	; 0x2d
    1b76:	8c a7       	std	Y+44, r24	; 0x2c
    1b78:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b7a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b7c:	99 a7       	std	Y+41, r25	; 0x29
    1b7e:	88 a7       	std	Y+40, r24	; 0x28
    1b80:	88 a5       	ldd	r24, Y+40	; 0x28
    1b82:	99 a5       	ldd	r25, Y+41	; 0x29
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <LCD_voidInit+0x56a>
    1b88:	99 a7       	std	Y+41, r25	; 0x29
    1b8a:	88 a7       	std	Y+40, r24	; 0x28
    1b8c:	0f c0       	rjmp	.+30     	; 0x1bac <LCD_voidInit+0x592>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b8e:	6f a9       	ldd	r22, Y+55	; 0x37
    1b90:	78 ad       	ldd	r23, Y+56	; 0x38
    1b92:	89 ad       	ldd	r24, Y+57	; 0x39
    1b94:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	8e ab       	std	Y+54, r24	; 0x36
    1ba0:	8e a9       	ldd	r24, Y+54	; 0x36
    1ba2:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ba4:	8f a1       	ldd	r24, Y+39	; 0x27
    1ba6:	8a 95       	dec	r24
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <LCD_voidInit+0x58c>
    1baa:	8f a3       	std	Y+39, r24	; 0x27
		_delay_us(50);
		/*display on / off control*/
		LCD_voidSendCmnd(0b00001111);
    1bac:	8f e0       	ldi	r24, 0x0F	; 15
    1bae:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidSendCmnd>
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	a8 e4       	ldi	r26, 0x48	; 72
    1bb8:	b2 e4       	ldi	r27, 0x42	; 66
    1bba:	8b a3       	std	Y+35, r24	; 0x23
    1bbc:	9c a3       	std	Y+36, r25	; 0x24
    1bbe:	ad a3       	std	Y+37, r26	; 0x25
    1bc0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bc2:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc4:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc6:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc8:	9e a1       	ldd	r25, Y+38	; 0x26
    1bca:	2b ea       	ldi	r18, 0xAB	; 171
    1bcc:	3a ea       	ldi	r19, 0xAA	; 170
    1bce:	4a e2       	ldi	r20, 0x2A	; 42
    1bd0:	50 e4       	ldi	r21, 0x40	; 64
    1bd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	8f 8f       	std	Y+31, r24	; 0x1f
    1bdc:	98 a3       	std	Y+32, r25	; 0x20
    1bde:	a9 a3       	std	Y+33, r26	; 0x21
    1be0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1be2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1be4:	78 a1       	ldd	r23, Y+32	; 0x20
    1be6:	89 a1       	ldd	r24, Y+33	; 0x21
    1be8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e8       	ldi	r20, 0x80	; 128
    1bf0:	5f e3       	ldi	r21, 0x3F	; 63
    1bf2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bf6:	88 23       	and	r24, r24
    1bf8:	1c f4       	brge	.+6      	; 0x1c00 <LCD_voidInit+0x5e6>
		__ticks = 1;
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	8e 8f       	std	Y+30, r24	; 0x1e
    1bfe:	91 c0       	rjmp	.+290    	; 0x1d22 <LCD_voidInit+0x708>
	else if (__tmp > 255)
    1c00:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c02:	78 a1       	ldd	r23, Y+32	; 0x20
    1c04:	89 a1       	ldd	r24, Y+33	; 0x21
    1c06:	9a a1       	ldd	r25, Y+34	; 0x22
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	4f e7       	ldi	r20, 0x7F	; 127
    1c0e:	53 e4       	ldi	r21, 0x43	; 67
    1c10:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c14:	18 16       	cp	r1, r24
    1c16:	0c f0       	brlt	.+2      	; 0x1c1a <LCD_voidInit+0x600>
    1c18:	7b c0       	rjmp	.+246    	; 0x1d10 <LCD_voidInit+0x6f6>
	{
		_delay_ms(__us / 1000.0);
    1c1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c20:	9e a1       	ldd	r25, Y+38	; 0x26
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	4a e7       	ldi	r20, 0x7A	; 122
    1c28:	54 e4       	ldi	r21, 0x44	; 68
    1c2a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	8a 8f       	std	Y+26, r24	; 0x1a
    1c34:	9b 8f       	std	Y+27, r25	; 0x1b
    1c36:	ac 8f       	std	Y+28, r26	; 0x1c
    1c38:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c3c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c3e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c40:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	4a ef       	ldi	r20, 0xFA	; 250
    1c48:	54 e4       	ldi	r21, 0x44	; 68
    1c4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	8e 8b       	std	Y+22, r24	; 0x16
    1c54:	9f 8b       	std	Y+23, r25	; 0x17
    1c56:	a8 8f       	std	Y+24, r26	; 0x18
    1c58:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c5a:	6e 89       	ldd	r22, Y+22	; 0x16
    1c5c:	7f 89       	ldd	r23, Y+23	; 0x17
    1c5e:	88 8d       	ldd	r24, Y+24	; 0x18
    1c60:	99 8d       	ldd	r25, Y+25	; 0x19
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e8       	ldi	r20, 0x80	; 128
    1c68:	5f e3       	ldi	r21, 0x3F	; 63
    1c6a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c6e:	88 23       	and	r24, r24
    1c70:	2c f4       	brge	.+10     	; 0x1c7c <LCD_voidInit+0x662>
		__ticks = 1;
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	9d 8b       	std	Y+21, r25	; 0x15
    1c78:	8c 8b       	std	Y+20, r24	; 0x14
    1c7a:	3f c0       	rjmp	.+126    	; 0x1cfa <LCD_voidInit+0x6e0>
	else if (__tmp > 65535)
    1c7c:	6e 89       	ldd	r22, Y+22	; 0x16
    1c7e:	7f 89       	ldd	r23, Y+23	; 0x17
    1c80:	88 8d       	ldd	r24, Y+24	; 0x18
    1c82:	99 8d       	ldd	r25, Y+25	; 0x19
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	3f ef       	ldi	r19, 0xFF	; 255
    1c88:	4f e7       	ldi	r20, 0x7F	; 127
    1c8a:	57 e4       	ldi	r21, 0x47	; 71
    1c8c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c90:	18 16       	cp	r1, r24
    1c92:	4c f5       	brge	.+82     	; 0x1ce6 <LCD_voidInit+0x6cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c94:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c96:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c98:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c9a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e2       	ldi	r20, 0x20	; 32
    1ca2:	51 e4       	ldi	r21, 0x41	; 65
    1ca4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	bc 01       	movw	r22, r24
    1cae:	cd 01       	movw	r24, r26
    1cb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	9d 8b       	std	Y+21, r25	; 0x15
    1cba:	8c 8b       	std	Y+20, r24	; 0x14
    1cbc:	0f c0       	rjmp	.+30     	; 0x1cdc <LCD_voidInit+0x6c2>
    1cbe:	88 ec       	ldi	r24, 0xC8	; 200
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	9b 8b       	std	Y+19, r25	; 0x13
    1cc4:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cc6:	8a 89       	ldd	r24, Y+18	; 0x12
    1cc8:	9b 89       	ldd	r25, Y+19	; 0x13
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <LCD_voidInit+0x6b0>
    1cce:	9b 8b       	std	Y+19, r25	; 0x13
    1cd0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd2:	8c 89       	ldd	r24, Y+20	; 0x14
    1cd4:	9d 89       	ldd	r25, Y+21	; 0x15
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	9d 8b       	std	Y+21, r25	; 0x15
    1cda:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cdc:	8c 89       	ldd	r24, Y+20	; 0x14
    1cde:	9d 89       	ldd	r25, Y+21	; 0x15
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	69 f7       	brne	.-38     	; 0x1cbe <LCD_voidInit+0x6a4>
    1ce4:	24 c0       	rjmp	.+72     	; 0x1d2e <LCD_voidInit+0x714>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce6:	6e 89       	ldd	r22, Y+22	; 0x16
    1ce8:	7f 89       	ldd	r23, Y+23	; 0x17
    1cea:	88 8d       	ldd	r24, Y+24	; 0x18
    1cec:	99 8d       	ldd	r25, Y+25	; 0x19
    1cee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	9d 8b       	std	Y+21, r25	; 0x15
    1cf8:	8c 8b       	std	Y+20, r24	; 0x14
    1cfa:	8c 89       	ldd	r24, Y+20	; 0x14
    1cfc:	9d 89       	ldd	r25, Y+21	; 0x15
    1cfe:	99 8b       	std	Y+17, r25	; 0x11
    1d00:	88 8b       	std	Y+16, r24	; 0x10
    1d02:	88 89       	ldd	r24, Y+16	; 0x10
    1d04:	99 89       	ldd	r25, Y+17	; 0x11
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <LCD_voidInit+0x6ec>
    1d0a:	99 8b       	std	Y+17, r25	; 0x11
    1d0c:	88 8b       	std	Y+16, r24	; 0x10
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <LCD_voidInit+0x714>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d10:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d12:	78 a1       	ldd	r23, Y+32	; 0x20
    1d14:	89 a1       	ldd	r24, Y+33	; 0x21
    1d16:	9a a1       	ldd	r25, Y+34	; 0x22
    1d18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	8e 8f       	std	Y+30, r24	; 0x1e
    1d22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d24:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d28:	8a 95       	dec	r24
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <LCD_voidInit+0x70e>
    1d2c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(50);
		/*display clear*/
		LCD_voidSendCmnd(0b00000001);
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidSendCmnd>
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	a0 e0       	ldi	r26, 0x00	; 0
    1d3a:	b0 e4       	ldi	r27, 0x40	; 64
    1d3c:	8b 87       	std	Y+11, r24	; 0x0b
    1d3e:	9c 87       	std	Y+12, r25	; 0x0c
    1d40:	ad 87       	std	Y+13, r26	; 0x0d
    1d42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	4a ef       	ldi	r20, 0xFA	; 250
    1d52:	54 e4       	ldi	r21, 0x44	; 68
    1d54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	8f 83       	std	Y+7, r24	; 0x07
    1d5e:	98 87       	std	Y+8, r25	; 0x08
    1d60:	a9 87       	std	Y+9, r26	; 0x09
    1d62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d64:	6f 81       	ldd	r22, Y+7	; 0x07
    1d66:	78 85       	ldd	r23, Y+8	; 0x08
    1d68:	89 85       	ldd	r24, Y+9	; 0x09
    1d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	40 e8       	ldi	r20, 0x80	; 128
    1d72:	5f e3       	ldi	r21, 0x3F	; 63
    1d74:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d78:	88 23       	and	r24, r24
    1d7a:	2c f4       	brge	.+10     	; 0x1d86 <LCD_voidInit+0x76c>
		__ticks = 1;
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	9e 83       	std	Y+6, r25	; 0x06
    1d82:	8d 83       	std	Y+5, r24	; 0x05
    1d84:	3f c0       	rjmp	.+126    	; 0x1e04 <LCD_voidInit+0x7ea>
	else if (__tmp > 65535)
    1d86:	6f 81       	ldd	r22, Y+7	; 0x07
    1d88:	78 85       	ldd	r23, Y+8	; 0x08
    1d8a:	89 85       	ldd	r24, Y+9	; 0x09
    1d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	3f ef       	ldi	r19, 0xFF	; 255
    1d92:	4f e7       	ldi	r20, 0x7F	; 127
    1d94:	57 e4       	ldi	r21, 0x47	; 71
    1d96:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d9a:	18 16       	cp	r1, r24
    1d9c:	4c f5       	brge	.+82     	; 0x1df0 <LCD_voidInit+0x7d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e2       	ldi	r20, 0x20	; 32
    1dac:	51 e4       	ldi	r21, 0x41	; 65
    1dae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	bc 01       	movw	r22, r24
    1db8:	cd 01       	movw	r24, r26
    1dba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	9e 83       	std	Y+6, r25	; 0x06
    1dc4:	8d 83       	std	Y+5, r24	; 0x05
    1dc6:	0f c0       	rjmp	.+30     	; 0x1de6 <LCD_voidInit+0x7cc>
    1dc8:	88 ec       	ldi	r24, 0xC8	; 200
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	9c 83       	std	Y+4, r25	; 0x04
    1dce:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	f1 f7       	brne	.-4      	; 0x1dd4 <LCD_voidInit+0x7ba>
    1dd8:	9c 83       	std	Y+4, r25	; 0x04
    1dda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dde:	9e 81       	ldd	r25, Y+6	; 0x06
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	9e 83       	std	Y+6, r25	; 0x06
    1de4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de6:	8d 81       	ldd	r24, Y+5	; 0x05
    1de8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	69 f7       	brne	.-38     	; 0x1dc8 <LCD_voidInit+0x7ae>
    1dee:	14 c0       	rjmp	.+40     	; 0x1e18 <LCD_voidInit+0x7fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df0:	6f 81       	ldd	r22, Y+7	; 0x07
    1df2:	78 85       	ldd	r23, Y+8	; 0x08
    1df4:	89 85       	ldd	r24, Y+9	; 0x09
    1df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	9e 83       	std	Y+6, r25	; 0x06
    1e02:	8d 83       	std	Y+5, r24	; 0x05
    1e04:	8d 81       	ldd	r24, Y+5	; 0x05
    1e06:	9e 81       	ldd	r25, Y+6	; 0x06
    1e08:	9a 83       	std	Y+2, r25	; 0x02
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <LCD_voidInit+0x7f6>
    1e14:	9a 83       	std	Y+2, r25	; 0x02
    1e16:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	    /*Entry mode set*/
		LCD_voidSendCmnd(0b00000110);
    1e18:	86 e0       	ldi	r24, 0x06	; 6
    1e1a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidSendCmnd>


#endif
}
    1e1e:	cc 59       	subi	r28, 0x9C	; 156
    1e20:	df 4f       	sbci	r29, 0xFF	; 255
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	08 95       	ret

00001e36 <LCD_voidSendCmnd>:
void LCD_voidSendCmnd(u8 Copy_u8Cmnd){
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	e1 97       	sbiw	r28, 0x31	; 49
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61
    1e4a:	89 ab       	std	Y+49, r24	; 0x31
	/*  E= 0         */
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_PORTEnable,LCD_u8_PinEnable,DIO_PIN_LOW);

#elif LCD_MODE == LCD_4BIT
	DIO_u8SetPinValue(LCD_u8_PORTRs,LCD_u8_PinRs,DIO_PIN_LOW);
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	60 e0       	ldi	r22, 0x00	; 0
    1e50:	40 e0       	ldi	r20, 0x00	; 0
    1e52:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_PORTRW,LCD_u8_PinRW,DIO_PIN_LOW);
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	61 e0       	ldi	r22, 0x01	; 1
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_PORTD4,LCD_u8_PIND4,GET_BIT(Copy_u8Cmnd,4));
    1e60:	89 a9       	ldd	r24, Y+49	; 0x31
    1e62:	82 95       	swap	r24
    1e64:	8f 70       	andi	r24, 0x0F	; 15
    1e66:	98 2f       	mov	r25, r24
    1e68:	91 70       	andi	r25, 0x01	; 1
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
    1e6c:	64 e0       	ldi	r22, 0x04	; 4
    1e6e:	49 2f       	mov	r20, r25
    1e70:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_PORTD5,LCD_u8_PIND5,GET_BIT(Copy_u8Cmnd,5));
    1e74:	89 a9       	ldd	r24, Y+49	; 0x31
    1e76:	82 95       	swap	r24
    1e78:	86 95       	lsr	r24
    1e7a:	87 70       	andi	r24, 0x07	; 7
    1e7c:	98 2f       	mov	r25, r24
    1e7e:	91 70       	andi	r25, 0x01	; 1
    1e80:	82 e0       	ldi	r24, 0x02	; 2
    1e82:	65 e0       	ldi	r22, 0x05	; 5
    1e84:	49 2f       	mov	r20, r25
    1e86:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_PORTD6,LCD_u8_PIND6,GET_BIT(Copy_u8Cmnd,6));
    1e8a:	89 a9       	ldd	r24, Y+49	; 0x31
    1e8c:	82 95       	swap	r24
    1e8e:	86 95       	lsr	r24
    1e90:	86 95       	lsr	r24
    1e92:	83 70       	andi	r24, 0x03	; 3
    1e94:	98 2f       	mov	r25, r24
    1e96:	91 70       	andi	r25, 0x01	; 1
    1e98:	82 e0       	ldi	r24, 0x02	; 2
    1e9a:	66 e0       	ldi	r22, 0x06	; 6
    1e9c:	49 2f       	mov	r20, r25
    1e9e:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_PORTD7,LCD_u8_PIND7,GET_BIT(Copy_u8Cmnd,7));
    1ea2:	89 a9       	ldd	r24, Y+49	; 0x31
    1ea4:	98 2f       	mov	r25, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	99 27       	eor	r25, r25
    1eaa:	99 1f       	adc	r25, r25
    1eac:	82 e0       	ldi	r24, 0x02	; 2
    1eae:	67 e0       	ldi	r22, 0x07	; 7
    1eb0:	49 2f       	mov	r20, r25
    1eb2:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_u8_PORTEnable,LCD_u8_PinEnable,DIO_PIN_HIGH);
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	62 e0       	ldi	r22, 0x02	; 2
    1eba:	41 e0       	ldi	r20, 0x01	; 1
    1ebc:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	a0 e8       	ldi	r26, 0x80	; 128
    1ec6:	bf e3       	ldi	r27, 0x3F	; 63
    1ec8:	8d a7       	std	Y+45, r24	; 0x2d
    1eca:	9e a7       	std	Y+46, r25	; 0x2e
    1ecc:	af a7       	std	Y+47, r26	; 0x2f
    1ece:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ed0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ed2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ed4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ed6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ed8:	2b ea       	ldi	r18, 0xAB	; 171
    1eda:	3a ea       	ldi	r19, 0xAA	; 170
    1edc:	4a e2       	ldi	r20, 0x2A	; 42
    1ede:	50 e4       	ldi	r21, 0x40	; 64
    1ee0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	89 a7       	std	Y+41, r24	; 0x29
    1eea:	9a a7       	std	Y+42, r25	; 0x2a
    1eec:	ab a7       	std	Y+43, r26	; 0x2b
    1eee:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ef0:	69 a5       	ldd	r22, Y+41	; 0x29
    1ef2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ef4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ef6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e8       	ldi	r20, 0x80	; 128
    1efe:	5f e3       	ldi	r21, 0x3F	; 63
    1f00:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f04:	88 23       	and	r24, r24
    1f06:	1c f4       	brge	.+6      	; 0x1f0e <LCD_voidSendCmnd+0xd8>
		__ticks = 1;
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	88 a7       	std	Y+40, r24	; 0x28
    1f0c:	91 c0       	rjmp	.+290    	; 0x2030 <LCD_voidSendCmnd+0x1fa>
	else if (__tmp > 255)
    1f0e:	69 a5       	ldd	r22, Y+41	; 0x29
    1f10:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f12:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f14:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	4f e7       	ldi	r20, 0x7F	; 127
    1f1c:	53 e4       	ldi	r21, 0x43	; 67
    1f1e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f22:	18 16       	cp	r1, r24
    1f24:	0c f0       	brlt	.+2      	; 0x1f28 <LCD_voidSendCmnd+0xf2>
    1f26:	7b c0       	rjmp	.+246    	; 0x201e <LCD_voidSendCmnd+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    1f28:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f2a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f2e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	4a e7       	ldi	r20, 0x7A	; 122
    1f36:	54 e4       	ldi	r21, 0x44	; 68
    1f38:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	8c a3       	std	Y+36, r24	; 0x24
    1f42:	9d a3       	std	Y+37, r25	; 0x25
    1f44:	ae a3       	std	Y+38, r26	; 0x26
    1f46:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f48:	6c a1       	ldd	r22, Y+36	; 0x24
    1f4a:	7d a1       	ldd	r23, Y+37	; 0x25
    1f4c:	8e a1       	ldd	r24, Y+38	; 0x26
    1f4e:	9f a1       	ldd	r25, Y+39	; 0x27
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	4a ef       	ldi	r20, 0xFA	; 250
    1f56:	54 e4       	ldi	r21, 0x44	; 68
    1f58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	88 a3       	std	Y+32, r24	; 0x20
    1f62:	99 a3       	std	Y+33, r25	; 0x21
    1f64:	aa a3       	std	Y+34, r26	; 0x22
    1f66:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f68:	68 a1       	ldd	r22, Y+32	; 0x20
    1f6a:	79 a1       	ldd	r23, Y+33	; 0x21
    1f6c:	8a a1       	ldd	r24, Y+34	; 0x22
    1f6e:	9b a1       	ldd	r25, Y+35	; 0x23
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e8       	ldi	r20, 0x80	; 128
    1f76:	5f e3       	ldi	r21, 0x3F	; 63
    1f78:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f7c:	88 23       	and	r24, r24
    1f7e:	2c f4       	brge	.+10     	; 0x1f8a <LCD_voidSendCmnd+0x154>
		__ticks = 1;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9f 8f       	std	Y+31, r25	; 0x1f
    1f86:	8e 8f       	std	Y+30, r24	; 0x1e
    1f88:	3f c0       	rjmp	.+126    	; 0x2008 <LCD_voidSendCmnd+0x1d2>
	else if (__tmp > 65535)
    1f8a:	68 a1       	ldd	r22, Y+32	; 0x20
    1f8c:	79 a1       	ldd	r23, Y+33	; 0x21
    1f8e:	8a a1       	ldd	r24, Y+34	; 0x22
    1f90:	9b a1       	ldd	r25, Y+35	; 0x23
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	3f ef       	ldi	r19, 0xFF	; 255
    1f96:	4f e7       	ldi	r20, 0x7F	; 127
    1f98:	57 e4       	ldi	r21, 0x47	; 71
    1f9a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f9e:	18 16       	cp	r1, r24
    1fa0:	4c f5       	brge	.+82     	; 0x1ff4 <LCD_voidSendCmnd+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa2:	6c a1       	ldd	r22, Y+36	; 0x24
    1fa4:	7d a1       	ldd	r23, Y+37	; 0x25
    1fa6:	8e a1       	ldd	r24, Y+38	; 0x26
    1fa8:	9f a1       	ldd	r25, Y+39	; 0x27
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e2       	ldi	r20, 0x20	; 32
    1fb0:	51 e4       	ldi	r21, 0x41	; 65
    1fb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	bc 01       	movw	r22, r24
    1fbc:	cd 01       	movw	r24, r26
    1fbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	9f 8f       	std	Y+31, r25	; 0x1f
    1fc8:	8e 8f       	std	Y+30, r24	; 0x1e
    1fca:	0f c0       	rjmp	.+30     	; 0x1fea <LCD_voidSendCmnd+0x1b4>
    1fcc:	88 ec       	ldi	r24, 0xC8	; 200
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	9d 8f       	std	Y+29, r25	; 0x1d
    1fd2:	8c 8f       	std	Y+28, r24	; 0x1c
    1fd4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fd6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <LCD_voidSendCmnd+0x1a2>
    1fdc:	9d 8f       	std	Y+29, r25	; 0x1d
    1fde:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fe2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	9f 8f       	std	Y+31, r25	; 0x1f
    1fe8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	69 f7       	brne	.-38     	; 0x1fcc <LCD_voidSendCmnd+0x196>
    1ff2:	24 c0       	rjmp	.+72     	; 0x203c <LCD_voidSendCmnd+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff4:	68 a1       	ldd	r22, Y+32	; 0x20
    1ff6:	79 a1       	ldd	r23, Y+33	; 0x21
    1ff8:	8a a1       	ldd	r24, Y+34	; 0x22
    1ffa:	9b a1       	ldd	r25, Y+35	; 0x23
    1ffc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	9f 8f       	std	Y+31, r25	; 0x1f
    2006:	8e 8f       	std	Y+30, r24	; 0x1e
    2008:	8e 8d       	ldd	r24, Y+30	; 0x1e
    200a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    200c:	9b 8f       	std	Y+27, r25	; 0x1b
    200e:	8a 8f       	std	Y+26, r24	; 0x1a
    2010:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2012:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	f1 f7       	brne	.-4      	; 0x2014 <LCD_voidSendCmnd+0x1de>
    2018:	9b 8f       	std	Y+27, r25	; 0x1b
    201a:	8a 8f       	std	Y+26, r24	; 0x1a
    201c:	0f c0       	rjmp	.+30     	; 0x203c <LCD_voidSendCmnd+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    201e:	69 a5       	ldd	r22, Y+41	; 0x29
    2020:	7a a5       	ldd	r23, Y+42	; 0x2a
    2022:	8b a5       	ldd	r24, Y+43	; 0x2b
    2024:	9c a5       	ldd	r25, Y+44	; 0x2c
    2026:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	88 a7       	std	Y+40, r24	; 0x28
    2030:	88 a5       	ldd	r24, Y+40	; 0x28
    2032:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2034:	89 8d       	ldd	r24, Y+25	; 0x19
    2036:	8a 95       	dec	r24
    2038:	f1 f7       	brne	.-4      	; 0x2036 <LCD_voidSendCmnd+0x200>
    203a:	89 8f       	std	Y+25, r24	; 0x19
		/*  E= 0         */
		_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_PORTEnable,LCD_u8_PinEnable,DIO_PIN_LOW);
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	62 e0       	ldi	r22, 0x02	; 2
    2040:	40 e0       	ldi	r20, 0x00	; 0
    2042:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	        DIO_u8SetPinValue(LCD_u8_PORTRs,LCD_u8_PinRs,DIO_PIN_LOW);
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	60 e0       	ldi	r22, 0x00	; 0
    204a:	40 e0       	ldi	r20, 0x00	; 0
    204c:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	        DIO_u8SetPinValue(LCD_u8_PORTRW,LCD_u8_PinRW,DIO_PIN_LOW);
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	61 e0       	ldi	r22, 0x01	; 1
    2054:	40 e0       	ldi	r20, 0x00	; 0
    2056:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
		    DIO_u8SetPinValue(LCD_u8_PORTD4,LCD_u8_PIND4,GET_BIT(Copy_u8Cmnd,0));
    205a:	89 a9       	ldd	r24, Y+49	; 0x31
    205c:	98 2f       	mov	r25, r24
    205e:	91 70       	andi	r25, 0x01	; 1
    2060:	82 e0       	ldi	r24, 0x02	; 2
    2062:	64 e0       	ldi	r22, 0x04	; 4
    2064:	49 2f       	mov	r20, r25
    2066:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(LCD_u8_PORTD5,LCD_u8_PIND5,GET_BIT(Copy_u8Cmnd,1));
    206a:	89 a9       	ldd	r24, Y+49	; 0x31
    206c:	86 95       	lsr	r24
    206e:	98 2f       	mov	r25, r24
    2070:	91 70       	andi	r25, 0x01	; 1
    2072:	82 e0       	ldi	r24, 0x02	; 2
    2074:	65 e0       	ldi	r22, 0x05	; 5
    2076:	49 2f       	mov	r20, r25
    2078:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(LCD_u8_PORTD6,LCD_u8_PIND6,GET_BIT(Copy_u8Cmnd,2));
    207c:	89 a9       	ldd	r24, Y+49	; 0x31
    207e:	86 95       	lsr	r24
    2080:	86 95       	lsr	r24
    2082:	98 2f       	mov	r25, r24
    2084:	91 70       	andi	r25, 0x01	; 1
    2086:	82 e0       	ldi	r24, 0x02	; 2
    2088:	66 e0       	ldi	r22, 0x06	; 6
    208a:	49 2f       	mov	r20, r25
    208c:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(LCD_u8_PORTD7,LCD_u8_PIND7,GET_BIT(Copy_u8Cmnd,3));
    2090:	89 a9       	ldd	r24, Y+49	; 0x31
    2092:	86 95       	lsr	r24
    2094:	86 95       	lsr	r24
    2096:	86 95       	lsr	r24
    2098:	98 2f       	mov	r25, r24
    209a:	91 70       	andi	r25, 0x01	; 1
    209c:	82 e0       	ldi	r24, 0x02	; 2
    209e:	67 e0       	ldi	r22, 0x07	; 7
    20a0:	49 2f       	mov	r20, r25
    20a2:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_u8_PORTEnable,LCD_u8_PinEnable,DIO_PIN_HIGH);
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	62 e0       	ldi	r22, 0x02	; 2
    20aa:	41 e0       	ldi	r20, 0x01	; 1
    20ac:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	a0 e8       	ldi	r26, 0x80	; 128
    20b6:	bf e3       	ldi	r27, 0x3F	; 63
    20b8:	8d 8b       	std	Y+21, r24	; 0x15
    20ba:	9e 8b       	std	Y+22, r25	; 0x16
    20bc:	af 8b       	std	Y+23, r26	; 0x17
    20be:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20c0:	6d 89       	ldd	r22, Y+21	; 0x15
    20c2:	7e 89       	ldd	r23, Y+22	; 0x16
    20c4:	8f 89       	ldd	r24, Y+23	; 0x17
    20c6:	98 8d       	ldd	r25, Y+24	; 0x18
    20c8:	2b ea       	ldi	r18, 0xAB	; 171
    20ca:	3a ea       	ldi	r19, 0xAA	; 170
    20cc:	4a e2       	ldi	r20, 0x2A	; 42
    20ce:	50 e4       	ldi	r21, 0x40	; 64
    20d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	89 8b       	std	Y+17, r24	; 0x11
    20da:	9a 8b       	std	Y+18, r25	; 0x12
    20dc:	ab 8b       	std	Y+19, r26	; 0x13
    20de:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    20e0:	69 89       	ldd	r22, Y+17	; 0x11
    20e2:	7a 89       	ldd	r23, Y+18	; 0x12
    20e4:	8b 89       	ldd	r24, Y+19	; 0x13
    20e6:	9c 89       	ldd	r25, Y+20	; 0x14
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e8       	ldi	r20, 0x80	; 128
    20ee:	5f e3       	ldi	r21, 0x3F	; 63
    20f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20f4:	88 23       	and	r24, r24
    20f6:	1c f4       	brge	.+6      	; 0x20fe <LCD_voidSendCmnd+0x2c8>
		__ticks = 1;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	88 8b       	std	Y+16, r24	; 0x10
    20fc:	91 c0       	rjmp	.+290    	; 0x2220 <LCD_voidSendCmnd+0x3ea>
	else if (__tmp > 255)
    20fe:	69 89       	ldd	r22, Y+17	; 0x11
    2100:	7a 89       	ldd	r23, Y+18	; 0x12
    2102:	8b 89       	ldd	r24, Y+19	; 0x13
    2104:	9c 89       	ldd	r25, Y+20	; 0x14
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	4f e7       	ldi	r20, 0x7F	; 127
    210c:	53 e4       	ldi	r21, 0x43	; 67
    210e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2112:	18 16       	cp	r1, r24
    2114:	0c f0       	brlt	.+2      	; 0x2118 <LCD_voidSendCmnd+0x2e2>
    2116:	7b c0       	rjmp	.+246    	; 0x220e <LCD_voidSendCmnd+0x3d8>
	{
		_delay_ms(__us / 1000.0);
    2118:	6d 89       	ldd	r22, Y+21	; 0x15
    211a:	7e 89       	ldd	r23, Y+22	; 0x16
    211c:	8f 89       	ldd	r24, Y+23	; 0x17
    211e:	98 8d       	ldd	r25, Y+24	; 0x18
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	4a e7       	ldi	r20, 0x7A	; 122
    2126:	54 e4       	ldi	r21, 0x44	; 68
    2128:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	8c 87       	std	Y+12, r24	; 0x0c
    2132:	9d 87       	std	Y+13, r25	; 0x0d
    2134:	ae 87       	std	Y+14, r26	; 0x0e
    2136:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2138:	6c 85       	ldd	r22, Y+12	; 0x0c
    213a:	7d 85       	ldd	r23, Y+13	; 0x0d
    213c:	8e 85       	ldd	r24, Y+14	; 0x0e
    213e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	4a ef       	ldi	r20, 0xFA	; 250
    2146:	54 e4       	ldi	r21, 0x44	; 68
    2148:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	88 87       	std	Y+8, r24	; 0x08
    2152:	99 87       	std	Y+9, r25	; 0x09
    2154:	aa 87       	std	Y+10, r26	; 0x0a
    2156:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2158:	68 85       	ldd	r22, Y+8	; 0x08
    215a:	79 85       	ldd	r23, Y+9	; 0x09
    215c:	8a 85       	ldd	r24, Y+10	; 0x0a
    215e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e8       	ldi	r20, 0x80	; 128
    2166:	5f e3       	ldi	r21, 0x3F	; 63
    2168:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    216c:	88 23       	and	r24, r24
    216e:	2c f4       	brge	.+10     	; 0x217a <LCD_voidSendCmnd+0x344>
		__ticks = 1;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9f 83       	std	Y+7, r25	; 0x07
    2176:	8e 83       	std	Y+6, r24	; 0x06
    2178:	3f c0       	rjmp	.+126    	; 0x21f8 <LCD_voidSendCmnd+0x3c2>
	else if (__tmp > 65535)
    217a:	68 85       	ldd	r22, Y+8	; 0x08
    217c:	79 85       	ldd	r23, Y+9	; 0x09
    217e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2180:	9b 85       	ldd	r25, Y+11	; 0x0b
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	3f ef       	ldi	r19, 0xFF	; 255
    2186:	4f e7       	ldi	r20, 0x7F	; 127
    2188:	57 e4       	ldi	r21, 0x47	; 71
    218a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    218e:	18 16       	cp	r1, r24
    2190:	4c f5       	brge	.+82     	; 0x21e4 <LCD_voidSendCmnd+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2192:	6c 85       	ldd	r22, Y+12	; 0x0c
    2194:	7d 85       	ldd	r23, Y+13	; 0x0d
    2196:	8e 85       	ldd	r24, Y+14	; 0x0e
    2198:	9f 85       	ldd	r25, Y+15	; 0x0f
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e2       	ldi	r20, 0x20	; 32
    21a0:	51 e4       	ldi	r21, 0x41	; 65
    21a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9f 83       	std	Y+7, r25	; 0x07
    21b8:	8e 83       	std	Y+6, r24	; 0x06
    21ba:	0f c0       	rjmp	.+30     	; 0x21da <LCD_voidSendCmnd+0x3a4>
    21bc:	88 ec       	ldi	r24, 0xC8	; 200
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9d 83       	std	Y+5, r25	; 0x05
    21c2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21c4:	8c 81       	ldd	r24, Y+4	; 0x04
    21c6:	9d 81       	ldd	r25, Y+5	; 0x05
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <LCD_voidSendCmnd+0x392>
    21cc:	9d 83       	std	Y+5, r25	; 0x05
    21ce:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d0:	8e 81       	ldd	r24, Y+6	; 0x06
    21d2:	9f 81       	ldd	r25, Y+7	; 0x07
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	9f 83       	std	Y+7, r25	; 0x07
    21d8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21da:	8e 81       	ldd	r24, Y+6	; 0x06
    21dc:	9f 81       	ldd	r25, Y+7	; 0x07
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	69 f7       	brne	.-38     	; 0x21bc <LCD_voidSendCmnd+0x386>
    21e2:	24 c0       	rjmp	.+72     	; 0x222c <LCD_voidSendCmnd+0x3f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e4:	68 85       	ldd	r22, Y+8	; 0x08
    21e6:	79 85       	ldd	r23, Y+9	; 0x09
    21e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    21ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    21ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	9f 83       	std	Y+7, r25	; 0x07
    21f6:	8e 83       	std	Y+6, r24	; 0x06
    21f8:	8e 81       	ldd	r24, Y+6	; 0x06
    21fa:	9f 81       	ldd	r25, Y+7	; 0x07
    21fc:	9b 83       	std	Y+3, r25	; 0x03
    21fe:	8a 83       	std	Y+2, r24	; 0x02
    2200:	8a 81       	ldd	r24, Y+2	; 0x02
    2202:	9b 81       	ldd	r25, Y+3	; 0x03
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <LCD_voidSendCmnd+0x3ce>
    2208:	9b 83       	std	Y+3, r25	; 0x03
    220a:	8a 83       	std	Y+2, r24	; 0x02
    220c:	0f c0       	rjmp	.+30     	; 0x222c <LCD_voidSendCmnd+0x3f6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    220e:	69 89       	ldd	r22, Y+17	; 0x11
    2210:	7a 89       	ldd	r23, Y+18	; 0x12
    2212:	8b 89       	ldd	r24, Y+19	; 0x13
    2214:	9c 89       	ldd	r25, Y+20	; 0x14
    2216:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	88 8b       	std	Y+16, r24	; 0x10
    2220:	88 89       	ldd	r24, Y+16	; 0x10
    2222:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	8a 95       	dec	r24
    2228:	f1 f7       	brne	.-4      	; 0x2226 <LCD_voidSendCmnd+0x3f0>
    222a:	89 83       	std	Y+1, r24	; 0x01
					/*  E= 0         */
     	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_PORTEnable,LCD_u8_PinEnable,DIO_PIN_LOW);
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	62 e0       	ldi	r22, 0x02	; 2
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
#endif
}
    2236:	e1 96       	adiw	r28, 0x31	; 49
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <LCD_voidSendChar>:
void LCD_voidSendChar(u8 Copy_u8Char){
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	e1 97       	sbiw	r28, 0x31	; 49
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
    225c:	89 ab       	std	Y+49, r24	; 0x31
	DIO_u8SetPinValue(LCD_u8_PORTEnable,LCD_u8_PinEnable,DIO_PIN_HIGH);
	/*  E= 0         */
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_PORTEnable,LCD_u8_PinEnable,DIO_PIN_LOW);
#elif LCD_MODE == LCD_4BIT
	DIO_u8SetPinValue(LCD_u8_PORTRs,LCD_u8_PinRs,DIO_PIN_HIGH);
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	60 e0       	ldi	r22, 0x00	; 0
    2262:	41 e0       	ldi	r20, 0x01	; 1
    2264:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_PORTRW,LCD_u8_PinRW,DIO_PIN_LOW);
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	61 e0       	ldi	r22, 0x01	; 1
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_PORTD4,LCD_u8_PIND4,GET_BIT(Copy_u8Char,4));
    2272:	89 a9       	ldd	r24, Y+49	; 0x31
    2274:	82 95       	swap	r24
    2276:	8f 70       	andi	r24, 0x0F	; 15
    2278:	98 2f       	mov	r25, r24
    227a:	91 70       	andi	r25, 0x01	; 1
    227c:	82 e0       	ldi	r24, 0x02	; 2
    227e:	64 e0       	ldi	r22, 0x04	; 4
    2280:	49 2f       	mov	r20, r25
    2282:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_PORTD5,LCD_u8_PIND5,GET_BIT(Copy_u8Char,5));
    2286:	89 a9       	ldd	r24, Y+49	; 0x31
    2288:	82 95       	swap	r24
    228a:	86 95       	lsr	r24
    228c:	87 70       	andi	r24, 0x07	; 7
    228e:	98 2f       	mov	r25, r24
    2290:	91 70       	andi	r25, 0x01	; 1
    2292:	82 e0       	ldi	r24, 0x02	; 2
    2294:	65 e0       	ldi	r22, 0x05	; 5
    2296:	49 2f       	mov	r20, r25
    2298:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_PORTD6,LCD_u8_PIND6,GET_BIT(Copy_u8Char,6));
    229c:	89 a9       	ldd	r24, Y+49	; 0x31
    229e:	82 95       	swap	r24
    22a0:	86 95       	lsr	r24
    22a2:	86 95       	lsr	r24
    22a4:	83 70       	andi	r24, 0x03	; 3
    22a6:	98 2f       	mov	r25, r24
    22a8:	91 70       	andi	r25, 0x01	; 1
    22aa:	82 e0       	ldi	r24, 0x02	; 2
    22ac:	66 e0       	ldi	r22, 0x06	; 6
    22ae:	49 2f       	mov	r20, r25
    22b0:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_PORTD7,LCD_u8_PIND7,GET_BIT(Copy_u8Char,7));
    22b4:	89 a9       	ldd	r24, Y+49	; 0x31
    22b6:	98 2f       	mov	r25, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	99 27       	eor	r25, r25
    22bc:	99 1f       	adc	r25, r25
    22be:	82 e0       	ldi	r24, 0x02	; 2
    22c0:	67 e0       	ldi	r22, 0x07	; 7
    22c2:	49 2f       	mov	r20, r25
    22c4:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	
	DIO_u8SetPinValue(LCD_u8_PORTEnable,LCD_u8_PinEnable,DIO_PIN_HIGH);
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	62 e0       	ldi	r22, 0x02	; 2
    22cc:	41 e0       	ldi	r20, 0x01	; 1
    22ce:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	a0 e8       	ldi	r26, 0x80	; 128
    22d8:	bf e3       	ldi	r27, 0x3F	; 63
    22da:	8d a7       	std	Y+45, r24	; 0x2d
    22dc:	9e a7       	std	Y+46, r25	; 0x2e
    22de:	af a7       	std	Y+47, r26	; 0x2f
    22e0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22e2:	6d a5       	ldd	r22, Y+45	; 0x2d
    22e4:	7e a5       	ldd	r23, Y+46	; 0x2e
    22e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e8:	98 a9       	ldd	r25, Y+48	; 0x30
    22ea:	2b ea       	ldi	r18, 0xAB	; 171
    22ec:	3a ea       	ldi	r19, 0xAA	; 170
    22ee:	4a e2       	ldi	r20, 0x2A	; 42
    22f0:	50 e4       	ldi	r21, 0x40	; 64
    22f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	89 a7       	std	Y+41, r24	; 0x29
    22fc:	9a a7       	std	Y+42, r25	; 0x2a
    22fe:	ab a7       	std	Y+43, r26	; 0x2b
    2300:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2302:	69 a5       	ldd	r22, Y+41	; 0x29
    2304:	7a a5       	ldd	r23, Y+42	; 0x2a
    2306:	8b a5       	ldd	r24, Y+43	; 0x2b
    2308:	9c a5       	ldd	r25, Y+44	; 0x2c
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e8       	ldi	r20, 0x80	; 128
    2310:	5f e3       	ldi	r21, 0x3F	; 63
    2312:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2316:	88 23       	and	r24, r24
    2318:	1c f4       	brge	.+6      	; 0x2320 <LCD_voidSendChar+0xd8>
		__ticks = 1;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	88 a7       	std	Y+40, r24	; 0x28
    231e:	91 c0       	rjmp	.+290    	; 0x2442 <LCD_voidSendChar+0x1fa>
	else if (__tmp > 255)
    2320:	69 a5       	ldd	r22, Y+41	; 0x29
    2322:	7a a5       	ldd	r23, Y+42	; 0x2a
    2324:	8b a5       	ldd	r24, Y+43	; 0x2b
    2326:	9c a5       	ldd	r25, Y+44	; 0x2c
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	4f e7       	ldi	r20, 0x7F	; 127
    232e:	53 e4       	ldi	r21, 0x43	; 67
    2330:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2334:	18 16       	cp	r1, r24
    2336:	0c f0       	brlt	.+2      	; 0x233a <LCD_voidSendChar+0xf2>
    2338:	7b c0       	rjmp	.+246    	; 0x2430 <LCD_voidSendChar+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    233a:	6d a5       	ldd	r22, Y+45	; 0x2d
    233c:	7e a5       	ldd	r23, Y+46	; 0x2e
    233e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2340:	98 a9       	ldd	r25, Y+48	; 0x30
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	4a e7       	ldi	r20, 0x7A	; 122
    2348:	54 e4       	ldi	r21, 0x44	; 68
    234a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	8c a3       	std	Y+36, r24	; 0x24
    2354:	9d a3       	std	Y+37, r25	; 0x25
    2356:	ae a3       	std	Y+38, r26	; 0x26
    2358:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235a:	6c a1       	ldd	r22, Y+36	; 0x24
    235c:	7d a1       	ldd	r23, Y+37	; 0x25
    235e:	8e a1       	ldd	r24, Y+38	; 0x26
    2360:	9f a1       	ldd	r25, Y+39	; 0x27
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	4a ef       	ldi	r20, 0xFA	; 250
    2368:	54 e4       	ldi	r21, 0x44	; 68
    236a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	88 a3       	std	Y+32, r24	; 0x20
    2374:	99 a3       	std	Y+33, r25	; 0x21
    2376:	aa a3       	std	Y+34, r26	; 0x22
    2378:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    237a:	68 a1       	ldd	r22, Y+32	; 0x20
    237c:	79 a1       	ldd	r23, Y+33	; 0x21
    237e:	8a a1       	ldd	r24, Y+34	; 0x22
    2380:	9b a1       	ldd	r25, Y+35	; 0x23
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e8       	ldi	r20, 0x80	; 128
    2388:	5f e3       	ldi	r21, 0x3F	; 63
    238a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    238e:	88 23       	and	r24, r24
    2390:	2c f4       	brge	.+10     	; 0x239c <LCD_voidSendChar+0x154>
		__ticks = 1;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	9f 8f       	std	Y+31, r25	; 0x1f
    2398:	8e 8f       	std	Y+30, r24	; 0x1e
    239a:	3f c0       	rjmp	.+126    	; 0x241a <LCD_voidSendChar+0x1d2>
	else if (__tmp > 65535)
    239c:	68 a1       	ldd	r22, Y+32	; 0x20
    239e:	79 a1       	ldd	r23, Y+33	; 0x21
    23a0:	8a a1       	ldd	r24, Y+34	; 0x22
    23a2:	9b a1       	ldd	r25, Y+35	; 0x23
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	3f ef       	ldi	r19, 0xFF	; 255
    23a8:	4f e7       	ldi	r20, 0x7F	; 127
    23aa:	57 e4       	ldi	r21, 0x47	; 71
    23ac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23b0:	18 16       	cp	r1, r24
    23b2:	4c f5       	brge	.+82     	; 0x2406 <LCD_voidSendChar+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b4:	6c a1       	ldd	r22, Y+36	; 0x24
    23b6:	7d a1       	ldd	r23, Y+37	; 0x25
    23b8:	8e a1       	ldd	r24, Y+38	; 0x26
    23ba:	9f a1       	ldd	r25, Y+39	; 0x27
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e2       	ldi	r20, 0x20	; 32
    23c2:	51 e4       	ldi	r21, 0x41	; 65
    23c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	bc 01       	movw	r22, r24
    23ce:	cd 01       	movw	r24, r26
    23d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	9f 8f       	std	Y+31, r25	; 0x1f
    23da:	8e 8f       	std	Y+30, r24	; 0x1e
    23dc:	0f c0       	rjmp	.+30     	; 0x23fc <LCD_voidSendChar+0x1b4>
    23de:	88 ec       	ldi	r24, 0xC8	; 200
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	9d 8f       	std	Y+29, r25	; 0x1d
    23e4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23e8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <LCD_voidSendChar+0x1a2>
    23ee:	9d 8f       	std	Y+29, r25	; 0x1d
    23f0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23f4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	9f 8f       	std	Y+31, r25	; 0x1f
    23fa:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23fe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	69 f7       	brne	.-38     	; 0x23de <LCD_voidSendChar+0x196>
    2404:	24 c0       	rjmp	.+72     	; 0x244e <LCD_voidSendChar+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2406:	68 a1       	ldd	r22, Y+32	; 0x20
    2408:	79 a1       	ldd	r23, Y+33	; 0x21
    240a:	8a a1       	ldd	r24, Y+34	; 0x22
    240c:	9b a1       	ldd	r25, Y+35	; 0x23
    240e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	9f 8f       	std	Y+31, r25	; 0x1f
    2418:	8e 8f       	std	Y+30, r24	; 0x1e
    241a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    241c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    241e:	9b 8f       	std	Y+27, r25	; 0x1b
    2420:	8a 8f       	std	Y+26, r24	; 0x1a
    2422:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2424:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <LCD_voidSendChar+0x1de>
    242a:	9b 8f       	std	Y+27, r25	; 0x1b
    242c:	8a 8f       	std	Y+26, r24	; 0x1a
    242e:	0f c0       	rjmp	.+30     	; 0x244e <LCD_voidSendChar+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2430:	69 a5       	ldd	r22, Y+41	; 0x29
    2432:	7a a5       	ldd	r23, Y+42	; 0x2a
    2434:	8b a5       	ldd	r24, Y+43	; 0x2b
    2436:	9c a5       	ldd	r25, Y+44	; 0x2c
    2438:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	88 a7       	std	Y+40, r24	; 0x28
    2442:	88 a5       	ldd	r24, Y+40	; 0x28
    2444:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2446:	89 8d       	ldd	r24, Y+25	; 0x19
    2448:	8a 95       	dec	r24
    244a:	f1 f7       	brne	.-4      	; 0x2448 <LCD_voidSendChar+0x200>
    244c:	89 8f       	std	Y+25, r24	; 0x19
		/*  E= 0         */
		_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_PORTEnable,LCD_u8_PinEnable,DIO_PIN_LOW);
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	62 e0       	ldi	r22, 0x02	; 2
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	        DIO_u8SetPinValue(LCD_u8_PORTRs,LCD_u8_PinRs,DIO_PIN_HIGH);
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	60 e0       	ldi	r22, 0x00	; 0
    245c:	41 e0       	ldi	r20, 0x01	; 1
    245e:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
	        DIO_u8SetPinValue(LCD_u8_PORTRW,LCD_u8_PinRW,DIO_PIN_LOW);
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	61 e0       	ldi	r22, 0x01	; 1
    2466:	40 e0       	ldi	r20, 0x00	; 0
    2468:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
		    DIO_u8SetPinValue(LCD_u8_PORTD4,LCD_u8_PIND4,GET_BIT(Copy_u8Char,0));
    246c:	89 a9       	ldd	r24, Y+49	; 0x31
    246e:	98 2f       	mov	r25, r24
    2470:	91 70       	andi	r25, 0x01	; 1
    2472:	82 e0       	ldi	r24, 0x02	; 2
    2474:	64 e0       	ldi	r22, 0x04	; 4
    2476:	49 2f       	mov	r20, r25
    2478:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(LCD_u8_PORTD5,LCD_u8_PIND5,GET_BIT(Copy_u8Char,1));
    247c:	89 a9       	ldd	r24, Y+49	; 0x31
    247e:	86 95       	lsr	r24
    2480:	98 2f       	mov	r25, r24
    2482:	91 70       	andi	r25, 0x01	; 1
    2484:	82 e0       	ldi	r24, 0x02	; 2
    2486:	65 e0       	ldi	r22, 0x05	; 5
    2488:	49 2f       	mov	r20, r25
    248a:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(LCD_u8_PORTD6,LCD_u8_PIND6,GET_BIT(Copy_u8Char,2));
    248e:	89 a9       	ldd	r24, Y+49	; 0x31
    2490:	86 95       	lsr	r24
    2492:	86 95       	lsr	r24
    2494:	98 2f       	mov	r25, r24
    2496:	91 70       	andi	r25, 0x01	; 1
    2498:	82 e0       	ldi	r24, 0x02	; 2
    249a:	66 e0       	ldi	r22, 0x06	; 6
    249c:	49 2f       	mov	r20, r25
    249e:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(LCD_u8_PORTD7,LCD_u8_PIND7,GET_BIT(Copy_u8Char,3));
    24a2:	89 a9       	ldd	r24, Y+49	; 0x31
    24a4:	86 95       	lsr	r24
    24a6:	86 95       	lsr	r24
    24a8:	86 95       	lsr	r24
    24aa:	98 2f       	mov	r25, r24
    24ac:	91 70       	andi	r25, 0x01	; 1
    24ae:	82 e0       	ldi	r24, 0x02	; 2
    24b0:	67 e0       	ldi	r22, 0x07	; 7
    24b2:	49 2f       	mov	r20, r25
    24b4:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_u8_PORTEnable,LCD_u8_PinEnable,DIO_PIN_HIGH);
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	62 e0       	ldi	r22, 0x02	; 2
    24bc:	41 e0       	ldi	r20, 0x01	; 1
    24be:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	a0 e8       	ldi	r26, 0x80	; 128
    24c8:	bf e3       	ldi	r27, 0x3F	; 63
    24ca:	8d 8b       	std	Y+21, r24	; 0x15
    24cc:	9e 8b       	std	Y+22, r25	; 0x16
    24ce:	af 8b       	std	Y+23, r26	; 0x17
    24d0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24d2:	6d 89       	ldd	r22, Y+21	; 0x15
    24d4:	7e 89       	ldd	r23, Y+22	; 0x16
    24d6:	8f 89       	ldd	r24, Y+23	; 0x17
    24d8:	98 8d       	ldd	r25, Y+24	; 0x18
    24da:	2b ea       	ldi	r18, 0xAB	; 171
    24dc:	3a ea       	ldi	r19, 0xAA	; 170
    24de:	4a e2       	ldi	r20, 0x2A	; 42
    24e0:	50 e4       	ldi	r21, 0x40	; 64
    24e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	89 8b       	std	Y+17, r24	; 0x11
    24ec:	9a 8b       	std	Y+18, r25	; 0x12
    24ee:	ab 8b       	std	Y+19, r26	; 0x13
    24f0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    24f2:	69 89       	ldd	r22, Y+17	; 0x11
    24f4:	7a 89       	ldd	r23, Y+18	; 0x12
    24f6:	8b 89       	ldd	r24, Y+19	; 0x13
    24f8:	9c 89       	ldd	r25, Y+20	; 0x14
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	40 e8       	ldi	r20, 0x80	; 128
    2500:	5f e3       	ldi	r21, 0x3F	; 63
    2502:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2506:	88 23       	and	r24, r24
    2508:	1c f4       	brge	.+6      	; 0x2510 <LCD_voidSendChar+0x2c8>
		__ticks = 1;
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	88 8b       	std	Y+16, r24	; 0x10
    250e:	91 c0       	rjmp	.+290    	; 0x2632 <LCD_voidSendChar+0x3ea>
	else if (__tmp > 255)
    2510:	69 89       	ldd	r22, Y+17	; 0x11
    2512:	7a 89       	ldd	r23, Y+18	; 0x12
    2514:	8b 89       	ldd	r24, Y+19	; 0x13
    2516:	9c 89       	ldd	r25, Y+20	; 0x14
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	4f e7       	ldi	r20, 0x7F	; 127
    251e:	53 e4       	ldi	r21, 0x43	; 67
    2520:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2524:	18 16       	cp	r1, r24
    2526:	0c f0       	brlt	.+2      	; 0x252a <LCD_voidSendChar+0x2e2>
    2528:	7b c0       	rjmp	.+246    	; 0x2620 <LCD_voidSendChar+0x3d8>
	{
		_delay_ms(__us / 1000.0);
    252a:	6d 89       	ldd	r22, Y+21	; 0x15
    252c:	7e 89       	ldd	r23, Y+22	; 0x16
    252e:	8f 89       	ldd	r24, Y+23	; 0x17
    2530:	98 8d       	ldd	r25, Y+24	; 0x18
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	4a e7       	ldi	r20, 0x7A	; 122
    2538:	54 e4       	ldi	r21, 0x44	; 68
    253a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	8c 87       	std	Y+12, r24	; 0x0c
    2544:	9d 87       	std	Y+13, r25	; 0x0d
    2546:	ae 87       	std	Y+14, r26	; 0x0e
    2548:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254a:	6c 85       	ldd	r22, Y+12	; 0x0c
    254c:	7d 85       	ldd	r23, Y+13	; 0x0d
    254e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2550:	9f 85       	ldd	r25, Y+15	; 0x0f
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	4a ef       	ldi	r20, 0xFA	; 250
    2558:	54 e4       	ldi	r21, 0x44	; 68
    255a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	88 87       	std	Y+8, r24	; 0x08
    2564:	99 87       	std	Y+9, r25	; 0x09
    2566:	aa 87       	std	Y+10, r26	; 0x0a
    2568:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    256a:	68 85       	ldd	r22, Y+8	; 0x08
    256c:	79 85       	ldd	r23, Y+9	; 0x09
    256e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2570:	9b 85       	ldd	r25, Y+11	; 0x0b
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e8       	ldi	r20, 0x80	; 128
    2578:	5f e3       	ldi	r21, 0x3F	; 63
    257a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    257e:	88 23       	and	r24, r24
    2580:	2c f4       	brge	.+10     	; 0x258c <LCD_voidSendChar+0x344>
		__ticks = 1;
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	9f 83       	std	Y+7, r25	; 0x07
    2588:	8e 83       	std	Y+6, r24	; 0x06
    258a:	3f c0       	rjmp	.+126    	; 0x260a <LCD_voidSendChar+0x3c2>
	else if (__tmp > 65535)
    258c:	68 85       	ldd	r22, Y+8	; 0x08
    258e:	79 85       	ldd	r23, Y+9	; 0x09
    2590:	8a 85       	ldd	r24, Y+10	; 0x0a
    2592:	9b 85       	ldd	r25, Y+11	; 0x0b
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	3f ef       	ldi	r19, 0xFF	; 255
    2598:	4f e7       	ldi	r20, 0x7F	; 127
    259a:	57 e4       	ldi	r21, 0x47	; 71
    259c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25a0:	18 16       	cp	r1, r24
    25a2:	4c f5       	brge	.+82     	; 0x25f6 <LCD_voidSendChar+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    25a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    25a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    25aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e2       	ldi	r20, 0x20	; 32
    25b2:	51 e4       	ldi	r21, 0x41	; 65
    25b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	bc 01       	movw	r22, r24
    25be:	cd 01       	movw	r24, r26
    25c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	9f 83       	std	Y+7, r25	; 0x07
    25ca:	8e 83       	std	Y+6, r24	; 0x06
    25cc:	0f c0       	rjmp	.+30     	; 0x25ec <LCD_voidSendChar+0x3a4>
    25ce:	88 ec       	ldi	r24, 0xC8	; 200
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	9d 83       	std	Y+5, r25	; 0x05
    25d4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25d6:	8c 81       	ldd	r24, Y+4	; 0x04
    25d8:	9d 81       	ldd	r25, Y+5	; 0x05
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	f1 f7       	brne	.-4      	; 0x25da <LCD_voidSendChar+0x392>
    25de:	9d 83       	std	Y+5, r25	; 0x05
    25e0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e2:	8e 81       	ldd	r24, Y+6	; 0x06
    25e4:	9f 81       	ldd	r25, Y+7	; 0x07
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	9f 83       	std	Y+7, r25	; 0x07
    25ea:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ec:	8e 81       	ldd	r24, Y+6	; 0x06
    25ee:	9f 81       	ldd	r25, Y+7	; 0x07
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	69 f7       	brne	.-38     	; 0x25ce <LCD_voidSendChar+0x386>
    25f4:	24 c0       	rjmp	.+72     	; 0x263e <LCD_voidSendChar+0x3f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f6:	68 85       	ldd	r22, Y+8	; 0x08
    25f8:	79 85       	ldd	r23, Y+9	; 0x09
    25fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    25fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    25fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	9f 83       	std	Y+7, r25	; 0x07
    2608:	8e 83       	std	Y+6, r24	; 0x06
    260a:	8e 81       	ldd	r24, Y+6	; 0x06
    260c:	9f 81       	ldd	r25, Y+7	; 0x07
    260e:	9b 83       	std	Y+3, r25	; 0x03
    2610:	8a 83       	std	Y+2, r24	; 0x02
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	9b 81       	ldd	r25, Y+3	; 0x03
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	f1 f7       	brne	.-4      	; 0x2616 <LCD_voidSendChar+0x3ce>
    261a:	9b 83       	std	Y+3, r25	; 0x03
    261c:	8a 83       	std	Y+2, r24	; 0x02
    261e:	0f c0       	rjmp	.+30     	; 0x263e <LCD_voidSendChar+0x3f6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2620:	69 89       	ldd	r22, Y+17	; 0x11
    2622:	7a 89       	ldd	r23, Y+18	; 0x12
    2624:	8b 89       	ldd	r24, Y+19	; 0x13
    2626:	9c 89       	ldd	r25, Y+20	; 0x14
    2628:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	88 8b       	std	Y+16, r24	; 0x10
    2632:	88 89       	ldd	r24, Y+16	; 0x10
    2634:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	8a 95       	dec	r24
    263a:	f1 f7       	brne	.-4      	; 0x2638 <LCD_voidSendChar+0x3f0>
    263c:	89 83       	std	Y+1, r24	; 0x01
					/*  E= 0         */
     	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_PORTEnable,LCD_u8_PinEnable,DIO_PIN_LOW);
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	62 e0       	ldi	r22, 0x02	; 2
    2642:	40 e0       	ldi	r20, 0x00	; 0
    2644:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>


#endif
}
    2648:	e1 96       	adiw	r28, 0x31	; 49
    264a:	0f b6       	in	r0, 0x3f	; 63
    264c:	f8 94       	cli
    264e:	de bf       	out	0x3e, r29	; 62
    2650:	0f be       	out	0x3f, r0	; 63
    2652:	cd bf       	out	0x3d, r28	; 61
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	08 95       	ret

0000265a <LCD_voidSendString>:
void LCD_voidSendString (u8* Copy_Pu8String){
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	60 97       	sbiw	r28, 0x10	; 16
    2664:	0f b6       	in	r0, 0x3f	; 63
    2666:	f8 94       	cli
    2668:	de bf       	out	0x3e, r29	; 62
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	cd bf       	out	0x3d, r28	; 61
    266e:	98 8b       	std	Y+16, r25	; 0x10
    2670:	8f 87       	std	Y+15, r24	; 0x0f
    2672:	7c c0       	rjmp	.+248    	; 0x276c <LCD_voidSendString+0x112>
	while(*Copy_Pu8String!='\0'){
		LCD_voidSendChar(*Copy_Pu8String);
    2674:	ef 85       	ldd	r30, Y+15	; 0x0f
    2676:	f8 89       	ldd	r31, Y+16	; 0x10
    2678:	80 81       	ld	r24, Z
    267a:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_voidSendChar>
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	a0 ea       	ldi	r26, 0xA0	; 160
    2684:	b1 e4       	ldi	r27, 0x41	; 65
    2686:	8b 87       	std	Y+11, r24	; 0x0b
    2688:	9c 87       	std	Y+12, r25	; 0x0c
    268a:	ad 87       	std	Y+13, r26	; 0x0d
    268c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2690:	7c 85       	ldd	r23, Y+12	; 0x0c
    2692:	8d 85       	ldd	r24, Y+13	; 0x0d
    2694:	9e 85       	ldd	r25, Y+14	; 0x0e
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	4a ef       	ldi	r20, 0xFA	; 250
    269c:	54 e4       	ldi	r21, 0x44	; 68
    269e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	8f 83       	std	Y+7, r24	; 0x07
    26a8:	98 87       	std	Y+8, r25	; 0x08
    26aa:	a9 87       	std	Y+9, r26	; 0x09
    26ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26ae:	6f 81       	ldd	r22, Y+7	; 0x07
    26b0:	78 85       	ldd	r23, Y+8	; 0x08
    26b2:	89 85       	ldd	r24, Y+9	; 0x09
    26b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e8       	ldi	r20, 0x80	; 128
    26bc:	5f e3       	ldi	r21, 0x3F	; 63
    26be:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26c2:	88 23       	and	r24, r24
    26c4:	2c f4       	brge	.+10     	; 0x26d0 <LCD_voidSendString+0x76>
		__ticks = 1;
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	9e 83       	std	Y+6, r25	; 0x06
    26cc:	8d 83       	std	Y+5, r24	; 0x05
    26ce:	3f c0       	rjmp	.+126    	; 0x274e <LCD_voidSendString+0xf4>
	else if (__tmp > 65535)
    26d0:	6f 81       	ldd	r22, Y+7	; 0x07
    26d2:	78 85       	ldd	r23, Y+8	; 0x08
    26d4:	89 85       	ldd	r24, Y+9	; 0x09
    26d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	3f ef       	ldi	r19, 0xFF	; 255
    26dc:	4f e7       	ldi	r20, 0x7F	; 127
    26de:	57 e4       	ldi	r21, 0x47	; 71
    26e0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26e4:	18 16       	cp	r1, r24
    26e6:	4c f5       	brge	.+82     	; 0x273a <LCD_voidSendString+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	40 e2       	ldi	r20, 0x20	; 32
    26f6:	51 e4       	ldi	r21, 0x41	; 65
    26f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	bc 01       	movw	r22, r24
    2702:	cd 01       	movw	r24, r26
    2704:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	9e 83       	std	Y+6, r25	; 0x06
    270e:	8d 83       	std	Y+5, r24	; 0x05
    2710:	0f c0       	rjmp	.+30     	; 0x2730 <LCD_voidSendString+0xd6>
    2712:	88 ec       	ldi	r24, 0xC8	; 200
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	9c 83       	std	Y+4, r25	; 0x04
    2718:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	9c 81       	ldd	r25, Y+4	; 0x04
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <LCD_voidSendString+0xc4>
    2722:	9c 83       	std	Y+4, r25	; 0x04
    2724:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2726:	8d 81       	ldd	r24, Y+5	; 0x05
    2728:	9e 81       	ldd	r25, Y+6	; 0x06
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	9e 83       	std	Y+6, r25	; 0x06
    272e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2730:	8d 81       	ldd	r24, Y+5	; 0x05
    2732:	9e 81       	ldd	r25, Y+6	; 0x06
    2734:	00 97       	sbiw	r24, 0x00	; 0
    2736:	69 f7       	brne	.-38     	; 0x2712 <LCD_voidSendString+0xb8>
    2738:	14 c0       	rjmp	.+40     	; 0x2762 <LCD_voidSendString+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273a:	6f 81       	ldd	r22, Y+7	; 0x07
    273c:	78 85       	ldd	r23, Y+8	; 0x08
    273e:	89 85       	ldd	r24, Y+9	; 0x09
    2740:	9a 85       	ldd	r25, Y+10	; 0x0a
    2742:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	9e 83       	std	Y+6, r25	; 0x06
    274c:	8d 83       	std	Y+5, r24	; 0x05
    274e:	8d 81       	ldd	r24, Y+5	; 0x05
    2750:	9e 81       	ldd	r25, Y+6	; 0x06
    2752:	9a 83       	std	Y+2, r25	; 0x02
    2754:	89 83       	std	Y+1, r24	; 0x01
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	9a 81       	ldd	r25, Y+2	; 0x02
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	f1 f7       	brne	.-4      	; 0x275a <LCD_voidSendString+0x100>
    275e:	9a 83       	std	Y+2, r25	; 0x02
    2760:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20);
		(Copy_Pu8String)++;
    2762:	8f 85       	ldd	r24, Y+15	; 0x0f
    2764:	98 89       	ldd	r25, Y+16	; 0x10
    2766:	01 96       	adiw	r24, 0x01	; 1
    2768:	98 8b       	std	Y+16, r25	; 0x10
    276a:	8f 87       	std	Y+15, r24	; 0x0f


#endif
}
void LCD_voidSendString (u8* Copy_Pu8String){
	while(*Copy_Pu8String!='\0'){
    276c:	ef 85       	ldd	r30, Y+15	; 0x0f
    276e:	f8 89       	ldd	r31, Y+16	; 0x10
    2770:	80 81       	ld	r24, Z
    2772:	88 23       	and	r24, r24
    2774:	09 f0       	breq	.+2      	; 0x2778 <LCD_voidSendString+0x11e>
    2776:	7e cf       	rjmp	.-260    	; 0x2674 <LCD_voidSendString+0x1a>
		LCD_voidSendChar(*Copy_Pu8String);
		_delay_ms(20);
		(Copy_Pu8String)++;
	}
}
    2778:	60 96       	adiw	r28, 0x10	; 16
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	de bf       	out	0x3e, r29	; 62
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	cf 91       	pop	r28
    2786:	df 91       	pop	r29
    2788:	08 95       	ret

0000278a <LCD_voidSendNumber>:
void LCD_voidSendNumber (u32 Copy_u32Number){
    278a:	df 93       	push	r29
    278c:	cf 93       	push	r28
    278e:	cd b7       	in	r28, 0x3d	; 61
    2790:	de b7       	in	r29, 0x3e	; 62
    2792:	a3 97       	sbiw	r28, 0x23	; 35
    2794:	0f b6       	in	r0, 0x3f	; 63
    2796:	f8 94       	cli
    2798:	de bf       	out	0x3e, r29	; 62
    279a:	0f be       	out	0x3f, r0	; 63
    279c:	cd bf       	out	0x3d, r28	; 61
    279e:	68 a3       	std	Y+32, r22	; 0x20
    27a0:	79 a3       	std	Y+33, r23	; 0x21
    27a2:	8a a3       	std	Y+34, r24	; 0x22
    27a4:	9b a3       	std	Y+35, r25	; 0x23
	u8 arr[10],i=0;
    27a6:	1d 8a       	std	Y+21, r1	; 0x15
    27a8:	39 c0       	rjmp	.+114    	; 0x281c <LCD_voidSendNumber+0x92>
	while(Copy_u32Number){
	       u32 value = Copy_u32Number ;
    27aa:	88 a1       	ldd	r24, Y+32	; 0x20
    27ac:	99 a1       	ldd	r25, Y+33	; 0x21
    27ae:	aa a1       	ldd	r26, Y+34	; 0x22
    27b0:	bb a1       	ldd	r27, Y+35	; 0x23
    27b2:	89 8b       	std	Y+17, r24	; 0x11
    27b4:	9a 8b       	std	Y+18, r25	; 0x12
    27b6:	ab 8b       	std	Y+19, r26	; 0x13
    27b8:	bc 8b       	std	Y+20, r27	; 0x14
	       value = Copy_u32Number %10;
    27ba:	88 a1       	ldd	r24, Y+32	; 0x20
    27bc:	99 a1       	ldd	r25, Y+33	; 0x21
    27be:	aa a1       	ldd	r26, Y+34	; 0x22
    27c0:	bb a1       	ldd	r27, Y+35	; 0x23
    27c2:	2a e0       	ldi	r18, 0x0A	; 10
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e0       	ldi	r20, 0x00	; 0
    27c8:	50 e0       	ldi	r21, 0x00	; 0
    27ca:	bc 01       	movw	r22, r24
    27cc:	cd 01       	movw	r24, r26
    27ce:	0e 94 65 22 	call	0x44ca	; 0x44ca <__udivmodsi4>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	89 8b       	std	Y+17, r24	; 0x11
    27d8:	9a 8b       	std	Y+18, r25	; 0x12
    27da:	ab 8b       	std	Y+19, r26	; 0x13
    27dc:	bc 8b       	std	Y+20, r27	; 0x14
	       arr[i]= value;
    27de:	8d 89       	ldd	r24, Y+21	; 0x15
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	49 89       	ldd	r20, Y+17	; 0x11
    27e6:	ce 01       	movw	r24, r28
    27e8:	46 96       	adiw	r24, 0x16	; 22
    27ea:	fc 01       	movw	r30, r24
    27ec:	e2 0f       	add	r30, r18
    27ee:	f3 1f       	adc	r31, r19
    27f0:	40 83       	st	Z, r20
	       Copy_u32Number/=10;
    27f2:	88 a1       	ldd	r24, Y+32	; 0x20
    27f4:	99 a1       	ldd	r25, Y+33	; 0x21
    27f6:	aa a1       	ldd	r26, Y+34	; 0x22
    27f8:	bb a1       	ldd	r27, Y+35	; 0x23
    27fa:	2a e0       	ldi	r18, 0x0A	; 10
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e0       	ldi	r20, 0x00	; 0
    2800:	50 e0       	ldi	r21, 0x00	; 0
    2802:	bc 01       	movw	r22, r24
    2804:	cd 01       	movw	r24, r26
    2806:	0e 94 65 22 	call	0x44ca	; 0x44ca <__udivmodsi4>
    280a:	da 01       	movw	r26, r20
    280c:	c9 01       	movw	r24, r18
    280e:	88 a3       	std	Y+32, r24	; 0x20
    2810:	99 a3       	std	Y+33, r25	; 0x21
    2812:	aa a3       	std	Y+34, r26	; 0x22
    2814:	bb a3       	std	Y+35, r27	; 0x23
	       i++;
    2816:	8d 89       	ldd	r24, Y+21	; 0x15
    2818:	8f 5f       	subi	r24, 0xFF	; 255
    281a:	8d 8b       	std	Y+21, r24	; 0x15
		(Copy_Pu8String)++;
	}
}
void LCD_voidSendNumber (u32 Copy_u32Number){
	u8 arr[10],i=0;
	while(Copy_u32Number){
    281c:	88 a1       	ldd	r24, Y+32	; 0x20
    281e:	99 a1       	ldd	r25, Y+33	; 0x21
    2820:	aa a1       	ldd	r26, Y+34	; 0x22
    2822:	bb a1       	ldd	r27, Y+35	; 0x23
    2824:	00 97       	sbiw	r24, 0x00	; 0
    2826:	a1 05       	cpc	r26, r1
    2828:	b1 05       	cpc	r27, r1
    282a:	09 f0       	breq	.+2      	; 0x282e <LCD_voidSendNumber+0xa4>
    282c:	be cf       	rjmp	.-132    	; 0x27aa <LCD_voidSendNumber+0x20>
	       arr[i]= value;
	       Copy_u32Number/=10;
	       i++;

	    }
	for(int j = i-1;j>=0;j--){
    282e:	8d 89       	ldd	r24, Y+21	; 0x15
    2830:	88 2f       	mov	r24, r24
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	98 8b       	std	Y+16, r25	; 0x10
    2838:	8f 87       	std	Y+15, r24	; 0x0f
    283a:	82 c0       	rjmp	.+260    	; 0x2940 <LCD_voidSendNumber+0x1b6>
		LCD_voidSendChar(arr[j]+48);
    283c:	2f 85       	ldd	r18, Y+15	; 0x0f
    283e:	38 89       	ldd	r19, Y+16	; 0x10
    2840:	ce 01       	movw	r24, r28
    2842:	46 96       	adiw	r24, 0x16	; 22
    2844:	fc 01       	movw	r30, r24
    2846:	e2 0f       	add	r30, r18
    2848:	f3 1f       	adc	r31, r19
    284a:	80 81       	ld	r24, Z
    284c:	80 5d       	subi	r24, 0xD0	; 208
    284e:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_voidSendChar>
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	a8 ec       	ldi	r26, 0xC8	; 200
    2858:	b2 e4       	ldi	r27, 0x42	; 66
    285a:	8b 87       	std	Y+11, r24	; 0x0b
    285c:	9c 87       	std	Y+12, r25	; 0x0c
    285e:	ad 87       	std	Y+13, r26	; 0x0d
    2860:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2862:	6b 85       	ldd	r22, Y+11	; 0x0b
    2864:	7c 85       	ldd	r23, Y+12	; 0x0c
    2866:	8d 85       	ldd	r24, Y+13	; 0x0d
    2868:	9e 85       	ldd	r25, Y+14	; 0x0e
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	4a ef       	ldi	r20, 0xFA	; 250
    2870:	54 e4       	ldi	r21, 0x44	; 68
    2872:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	8f 83       	std	Y+7, r24	; 0x07
    287c:	98 87       	std	Y+8, r25	; 0x08
    287e:	a9 87       	std	Y+9, r26	; 0x09
    2880:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2882:	6f 81       	ldd	r22, Y+7	; 0x07
    2884:	78 85       	ldd	r23, Y+8	; 0x08
    2886:	89 85       	ldd	r24, Y+9	; 0x09
    2888:	9a 85       	ldd	r25, Y+10	; 0x0a
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e8       	ldi	r20, 0x80	; 128
    2890:	5f e3       	ldi	r21, 0x3F	; 63
    2892:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2896:	88 23       	and	r24, r24
    2898:	2c f4       	brge	.+10     	; 0x28a4 <LCD_voidSendNumber+0x11a>
		__ticks = 1;
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	9e 83       	std	Y+6, r25	; 0x06
    28a0:	8d 83       	std	Y+5, r24	; 0x05
    28a2:	3f c0       	rjmp	.+126    	; 0x2922 <LCD_voidSendNumber+0x198>
	else if (__tmp > 65535)
    28a4:	6f 81       	ldd	r22, Y+7	; 0x07
    28a6:	78 85       	ldd	r23, Y+8	; 0x08
    28a8:	89 85       	ldd	r24, Y+9	; 0x09
    28aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	3f ef       	ldi	r19, 0xFF	; 255
    28b0:	4f e7       	ldi	r20, 0x7F	; 127
    28b2:	57 e4       	ldi	r21, 0x47	; 71
    28b4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28b8:	18 16       	cp	r1, r24
    28ba:	4c f5       	brge	.+82     	; 0x290e <LCD_voidSendNumber+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    28be:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e2       	ldi	r20, 0x20	; 32
    28ca:	51 e4       	ldi	r21, 0x41	; 65
    28cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9e 83       	std	Y+6, r25	; 0x06
    28e2:	8d 83       	std	Y+5, r24	; 0x05
    28e4:	0f c0       	rjmp	.+30     	; 0x2904 <LCD_voidSendNumber+0x17a>
    28e6:	88 ec       	ldi	r24, 0xC8	; 200
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	9c 83       	std	Y+4, r25	; 0x04
    28ec:	8b 83       	std	Y+3, r24	; 0x03
    28ee:	8b 81       	ldd	r24, Y+3	; 0x03
    28f0:	9c 81       	ldd	r25, Y+4	; 0x04
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <LCD_voidSendNumber+0x168>
    28f6:	9c 83       	std	Y+4, r25	; 0x04
    28f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fa:	8d 81       	ldd	r24, Y+5	; 0x05
    28fc:	9e 81       	ldd	r25, Y+6	; 0x06
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	9e 83       	std	Y+6, r25	; 0x06
    2902:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2904:	8d 81       	ldd	r24, Y+5	; 0x05
    2906:	9e 81       	ldd	r25, Y+6	; 0x06
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	69 f7       	brne	.-38     	; 0x28e6 <LCD_voidSendNumber+0x15c>
    290c:	14 c0       	rjmp	.+40     	; 0x2936 <LCD_voidSendNumber+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290e:	6f 81       	ldd	r22, Y+7	; 0x07
    2910:	78 85       	ldd	r23, Y+8	; 0x08
    2912:	89 85       	ldd	r24, Y+9	; 0x09
    2914:	9a 85       	ldd	r25, Y+10	; 0x0a
    2916:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	9e 83       	std	Y+6, r25	; 0x06
    2920:	8d 83       	std	Y+5, r24	; 0x05
    2922:	8d 81       	ldd	r24, Y+5	; 0x05
    2924:	9e 81       	ldd	r25, Y+6	; 0x06
    2926:	9a 83       	std	Y+2, r25	; 0x02
    2928:	89 83       	std	Y+1, r24	; 0x01
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	9a 81       	ldd	r25, Y+2	; 0x02
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <LCD_voidSendNumber+0x1a4>
    2932:	9a 83       	std	Y+2, r25	; 0x02
    2934:	89 83       	std	Y+1, r24	; 0x01
	       arr[i]= value;
	       Copy_u32Number/=10;
	       i++;

	    }
	for(int j = i-1;j>=0;j--){
    2936:	8f 85       	ldd	r24, Y+15	; 0x0f
    2938:	98 89       	ldd	r25, Y+16	; 0x10
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	98 8b       	std	Y+16, r25	; 0x10
    293e:	8f 87       	std	Y+15, r24	; 0x0f
    2940:	8f 85       	ldd	r24, Y+15	; 0x0f
    2942:	98 89       	ldd	r25, Y+16	; 0x10
    2944:	99 23       	and	r25, r25
    2946:	0c f0       	brlt	.+2      	; 0x294a <LCD_voidSendNumber+0x1c0>
    2948:	79 cf       	rjmp	.-270    	; 0x283c <LCD_voidSendNumber+0xb2>
		LCD_voidSendChar(arr[j]+48);
		_delay_ms(100);
	}

}
    294a:	a3 96       	adiw	r28, 0x23	; 35
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	f8 94       	cli
    2950:	de bf       	out	0x3e, r29	; 62
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	cd bf       	out	0x3d, r28	; 61
    2956:	cf 91       	pop	r28
    2958:	df 91       	pop	r29
    295a:	08 95       	ret

0000295c <LCD_voidGoToXY>:
void LCD_voidGoToXY (u8 Copy_u8LineNumber,u8 Copy_u8Location){
    295c:	df 93       	push	r29
    295e:	cf 93       	push	r28
    2960:	00 d0       	rcall	.+0      	; 0x2962 <LCD_voidGoToXY+0x6>
    2962:	00 d0       	rcall	.+0      	; 0x2964 <LCD_voidGoToXY+0x8>
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
    2968:	89 83       	std	Y+1, r24	; 0x01
    296a:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8LineNumber){
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	28 2f       	mov	r18, r24
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	3c 83       	std	Y+4, r19	; 0x04
    2974:	2b 83       	std	Y+3, r18	; 0x03
    2976:	8b 81       	ldd	r24, Y+3	; 0x03
    2978:	9c 81       	ldd	r25, Y+4	; 0x04
    297a:	00 97       	sbiw	r24, 0x00	; 0
    297c:	31 f0       	breq	.+12     	; 0x298a <LCD_voidGoToXY+0x2e>
    297e:	2b 81       	ldd	r18, Y+3	; 0x03
    2980:	3c 81       	ldd	r19, Y+4	; 0x04
    2982:	21 30       	cpi	r18, 0x01	; 1
    2984:	31 05       	cpc	r19, r1
    2986:	31 f0       	breq	.+12     	; 0x2994 <LCD_voidGoToXY+0x38>
    2988:	09 c0       	rjmp	.+18     	; 0x299c <LCD_voidGoToXY+0x40>

	case LCD_LINE1 : LCD_voidSendCmnd(LCD_ADDRESS_LINE1+Copy_u8Location);
    298a:	8a 81       	ldd	r24, Y+2	; 0x02
    298c:	80 58       	subi	r24, 0x80	; 128
    298e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidSendCmnd>
    2992:	04 c0       	rjmp	.+8      	; 0x299c <LCD_voidGoToXY+0x40>
	break;
	case LCD_LINE2 : LCD_voidSendCmnd(LCD_ADDRESS_LINE2+Copy_u8Location);
    2994:	8a 81       	ldd	r24, Y+2	; 0x02
    2996:	80 54       	subi	r24, 0x40	; 64
    2998:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidSendCmnd>
	break;


	}
}
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	cf 91       	pop	r28
    29a6:	df 91       	pop	r29
    29a8:	08 95       	ret

000029aa <LCD_voidGoToCGRAM>:
void LCD_voidGoToCGRAM (u8 Copy_u8CharNumber){
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	00 d0       	rcall	.+0      	; 0x29b0 <LCD_voidGoToCGRAM+0x6>
    29b0:	0f 92       	push	r0
    29b2:	cd b7       	in	r28, 0x3d	; 61
    29b4:	de b7       	in	r29, 0x3e	; 62
    29b6:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8CharNumber){
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
    29ba:	28 2f       	mov	r18, r24
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	3b 83       	std	Y+3, r19	; 0x03
    29c0:	2a 83       	std	Y+2, r18	; 0x02
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	9b 81       	ldd	r25, Y+3	; 0x03
    29c6:	83 30       	cpi	r24, 0x03	; 3
    29c8:	91 05       	cpc	r25, r1
    29ca:	a9 f1       	breq	.+106    	; 0x2a36 <LCD_voidGoToCGRAM+0x8c>
    29cc:	2a 81       	ldd	r18, Y+2	; 0x02
    29ce:	3b 81       	ldd	r19, Y+3	; 0x03
    29d0:	24 30       	cpi	r18, 0x04	; 4
    29d2:	31 05       	cpc	r19, r1
    29d4:	7c f4       	brge	.+30     	; 0x29f4 <LCD_voidGoToCGRAM+0x4a>
    29d6:	8a 81       	ldd	r24, Y+2	; 0x02
    29d8:	9b 81       	ldd	r25, Y+3	; 0x03
    29da:	81 30       	cpi	r24, 0x01	; 1
    29dc:	91 05       	cpc	r25, r1
    29de:	19 f1       	breq	.+70     	; 0x2a26 <LCD_voidGoToCGRAM+0x7c>
    29e0:	2a 81       	ldd	r18, Y+2	; 0x02
    29e2:	3b 81       	ldd	r19, Y+3	; 0x03
    29e4:	22 30       	cpi	r18, 0x02	; 2
    29e6:	31 05       	cpc	r19, r1
    29e8:	14 f5       	brge	.+68     	; 0x2a2e <LCD_voidGoToCGRAM+0x84>
    29ea:	8a 81       	ldd	r24, Y+2	; 0x02
    29ec:	9b 81       	ldd	r25, Y+3	; 0x03
    29ee:	00 97       	sbiw	r24, 0x00	; 0
    29f0:	b1 f0       	breq	.+44     	; 0x2a1e <LCD_voidGoToCGRAM+0x74>
    29f2:	34 c0       	rjmp	.+104    	; 0x2a5c <LCD_voidGoToCGRAM+0xb2>
    29f4:	2a 81       	ldd	r18, Y+2	; 0x02
    29f6:	3b 81       	ldd	r19, Y+3	; 0x03
    29f8:	25 30       	cpi	r18, 0x05	; 5
    29fa:	31 05       	cpc	r19, r1
    29fc:	21 f1       	breq	.+72     	; 0x2a46 <LCD_voidGoToCGRAM+0x9c>
    29fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2a00:	9b 81       	ldd	r25, Y+3	; 0x03
    2a02:	85 30       	cpi	r24, 0x05	; 5
    2a04:	91 05       	cpc	r25, r1
    2a06:	dc f0       	brlt	.+54     	; 0x2a3e <LCD_voidGoToCGRAM+0x94>
    2a08:	2a 81       	ldd	r18, Y+2	; 0x02
    2a0a:	3b 81       	ldd	r19, Y+3	; 0x03
    2a0c:	26 30       	cpi	r18, 0x06	; 6
    2a0e:	31 05       	cpc	r19, r1
    2a10:	f1 f0       	breq	.+60     	; 0x2a4e <LCD_voidGoToCGRAM+0xa4>
    2a12:	8a 81       	ldd	r24, Y+2	; 0x02
    2a14:	9b 81       	ldd	r25, Y+3	; 0x03
    2a16:	87 30       	cpi	r24, 0x07	; 7
    2a18:	91 05       	cpc	r25, r1
    2a1a:	e9 f0       	breq	.+58     	; 0x2a56 <LCD_voidGoToCGRAM+0xac>
    2a1c:	1f c0       	rjmp	.+62     	; 0x2a5c <LCD_voidGoToCGRAM+0xb2>
	case 0 : LCD_voidSendCmnd(0b01000000);
    2a1e:	80 e4       	ldi	r24, 0x40	; 64
    2a20:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidSendCmnd>
    2a24:	1b c0       	rjmp	.+54     	; 0x2a5c <LCD_voidGoToCGRAM+0xb2>
	break;
	case 1 : LCD_voidSendCmnd(0b01000000+8);
    2a26:	88 e4       	ldi	r24, 0x48	; 72
    2a28:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidSendCmnd>
    2a2c:	17 c0       	rjmp	.+46     	; 0x2a5c <LCD_voidGoToCGRAM+0xb2>
	break;
	case 2 : LCD_voidSendCmnd(0b01000000+16);
    2a2e:	80 e5       	ldi	r24, 0x50	; 80
    2a30:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidSendCmnd>
    2a34:	13 c0       	rjmp	.+38     	; 0x2a5c <LCD_voidGoToCGRAM+0xb2>
	break;
	case 3 : LCD_voidSendCmnd(0b01000000+24);
    2a36:	88 e5       	ldi	r24, 0x58	; 88
    2a38:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidSendCmnd>
    2a3c:	0f c0       	rjmp	.+30     	; 0x2a5c <LCD_voidGoToCGRAM+0xb2>
	break;
	case 4 : LCD_voidSendCmnd(0b01000000+32);
    2a3e:	80 e6       	ldi	r24, 0x60	; 96
    2a40:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidSendCmnd>
    2a44:	0b c0       	rjmp	.+22     	; 0x2a5c <LCD_voidGoToCGRAM+0xb2>
	break;
	case 5 : LCD_voidSendCmnd(0b01000000+40);
    2a46:	88 e6       	ldi	r24, 0x68	; 104
    2a48:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidSendCmnd>
    2a4c:	07 c0       	rjmp	.+14     	; 0x2a5c <LCD_voidGoToCGRAM+0xb2>
	break;
	case 6 : LCD_voidSendCmnd(0b01000000+48);
    2a4e:	80 e7       	ldi	r24, 0x70	; 112
    2a50:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidSendCmnd>
    2a54:	03 c0       	rjmp	.+6      	; 0x2a5c <LCD_voidGoToCGRAM+0xb2>
	break;
	case 7 : LCD_voidSendCmnd(0b01000000+56);
    2a56:	88 e7       	ldi	r24, 0x78	; 120
    2a58:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidSendCmnd>
	break;
	}

}
    2a5c:	0f 90       	pop	r0
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	cf 91       	pop	r28
    2a64:	df 91       	pop	r29
    2a66:	08 95       	ret

00002a68 <LCD_voidSendSpecialChar>:
void LCD_voidSendSpecialChar (u8 Copy_Au8DronChar[8] ){
    2a68:	df 93       	push	r29
    2a6a:	cf 93       	push	r28
    2a6c:	00 d0       	rcall	.+0      	; 0x2a6e <LCD_voidSendSpecialChar+0x6>
    2a6e:	00 d0       	rcall	.+0      	; 0x2a70 <LCD_voidSendSpecialChar+0x8>
    2a70:	cd b7       	in	r28, 0x3d	; 61
    2a72:	de b7       	in	r29, 0x3e	; 62
    2a74:	9c 83       	std	Y+4, r25	; 0x04
    2a76:	8b 83       	std	Y+3, r24	; 0x03
	for(int i = 0; i<8;i++){
    2a78:	1a 82       	std	Y+2, r1	; 0x02
    2a7a:	19 82       	std	Y+1, r1	; 0x01
    2a7c:	0f c0       	rjmp	.+30     	; 0x2a9c <LCD_voidSendSpecialChar+0x34>
		LCD_voidSendChar(Copy_Au8DronChar[i]);
    2a7e:	29 81       	ldd	r18, Y+1	; 0x01
    2a80:	3a 81       	ldd	r19, Y+2	; 0x02
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	9c 81       	ldd	r25, Y+4	; 0x04
    2a86:	fc 01       	movw	r30, r24
    2a88:	e2 0f       	add	r30, r18
    2a8a:	f3 1f       	adc	r31, r19
    2a8c:	80 81       	ld	r24, Z
    2a8e:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_voidSendChar>
	break;
	}

}
void LCD_voidSendSpecialChar (u8 Copy_Au8DronChar[8] ){
	for(int i = 0; i<8;i++){
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	9a 81       	ldd	r25, Y+2	; 0x02
    2a96:	01 96       	adiw	r24, 0x01	; 1
    2a98:	9a 83       	std	Y+2, r25	; 0x02
    2a9a:	89 83       	std	Y+1, r24	; 0x01
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa0:	88 30       	cpi	r24, 0x08	; 8
    2aa2:	91 05       	cpc	r25, r1
    2aa4:	64 f3       	brlt	.-40     	; 0x2a7e <LCD_voidSendSpecialChar+0x16>
		LCD_voidSendChar(Copy_Au8DronChar[i]);
	}
}
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
    2aaa:	0f 90       	pop	r0
    2aac:	0f 90       	pop	r0
    2aae:	cf 91       	pop	r28
    2ab0:	df 91       	pop	r29
    2ab2:	08 95       	ret

00002ab4 <LCD_Clear>:
void LCD_Clear(void){
    2ab4:	df 93       	push	r29
    2ab6:	cf 93       	push	r28
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(0b00000001);
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidSendCmnd>
}
    2ac2:	cf 91       	pop	r28
    2ac4:	df 91       	pop	r29
    2ac6:	08 95       	ret

00002ac8 <Keypad_u8GetKeyState>:
 const u8 KeyPad_Au8Columns[4]= {KEYPAD_u8_PinC0,
	                       KEYPAD_u8_PinC1,
	                       KEYPAD_u8_PinC2,
	                       KEYPAD_u8_PinC3};     
						   
u8 Keypad_u8GetKeyState(u8 *Copy_pu8ReturnedKey){
    2ac8:	df 93       	push	r29
    2aca:	cf 93       	push	r28
    2acc:	cd b7       	in	r28, 0x3d	; 61
    2ace:	de b7       	in	r29, 0x3e	; 62
    2ad0:	65 97       	sbiw	r28, 0x15	; 21
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
    2adc:	9d 8b       	std	Y+21, r25	; 0x15
    2ade:	8c 8b       	std	Y+20, r24	; 0x14
	*Copy_pu8ReturnedKey = KEYPAD_u8_KEY_NOT_PRESSED;
    2ae0:	ec 89       	ldd	r30, Y+20	; 0x14
    2ae2:	fd 89       	ldd	r31, Y+21	; 0x15
    2ae4:	8f ef       	ldi	r24, 0xFF	; 255
    2ae6:	80 83       	st	Z, r24
	u8 ret = R_OK;
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowsCounter = 0;
    2aec:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8ColumnsCounter = 0,flag= 0 ;
    2aee:	18 8a       	std	Y+16, r1	; 0x10
    2af0:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8ReturnedKey==NULL){
    2af2:	8c 89       	ldd	r24, Y+20	; 0x14
    2af4:	9d 89       	ldd	r25, Y+21	; 0x15
    2af6:	00 97       	sbiw	r24, 0x00	; 0
    2af8:	11 f4       	brne	.+4      	; 0x2afe <Keypad_u8GetKeyState+0x36>
		ret = R_NOT_OK;
    2afa:	1a 8a       	std	Y+18, r1	; 0x12
    2afc:	ed c0       	rjmp	.+474    	; 0x2cd8 <Keypad_u8GetKeyState+0x210>
	}
	else {
		
		/*Activation each row */ 
		for(Local_u8RowsCounter=0;Local_u8RowsCounter<=3;Local_u8RowsCounter++){
    2afe:	19 8a       	std	Y+17, r1	; 0x11
    2b00:	e5 c0       	rjmp	.+458    	; 0x2ccc <Keypad_u8GetKeyState+0x204>
			DIO_u8SetPinValue(KEYPAD_u8_PORT_ROWS,KeyPad_Au8Rows[Local_u8RowsCounter],DIO_PIN_LOW);
    2b02:	89 89       	ldd	r24, Y+17	; 0x11
    2b04:	88 2f       	mov	r24, r24
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	fc 01       	movw	r30, r24
    2b0a:	ed 51       	subi	r30, 0x1D	; 29
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	90 81       	ld	r25, Z
    2b10:	83 e0       	ldi	r24, 0x03	; 3
    2b12:	69 2f       	mov	r22, r25
    2b14:	40 e0       	ldi	r20, 0x00	; 0
    2b16:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
			/*check which input pin is zero  */
			for(Local_u8ColumnsCounter=0;Local_u8ColumnsCounter<=3;Local_u8ColumnsCounter++){
    2b1a:	18 8a       	std	Y+16, r1	; 0x10
    2b1c:	c1 c0       	rjmp	.+386    	; 0x2ca0 <Keypad_u8GetKeyState+0x1d8>
				u8 Local_u8PinValue ;
				DIO_u8GetPinValue(KEYPAD_u8_PORT_COLUMNS,KeyPad_Au8Columns[Local_u8ColumnsCounter],&Local_u8PinValue);
    2b1e:	88 89       	ldd	r24, Y+16	; 0x10
    2b20:	88 2f       	mov	r24, r24
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	fc 01       	movw	r30, r24
    2b26:	e9 51       	subi	r30, 0x19	; 25
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	90 81       	ld	r25, Z
    2b2c:	9e 01       	movw	r18, r28
    2b2e:	2d 5e       	subi	r18, 0xED	; 237
    2b30:	3f 4f       	sbci	r19, 0xFF	; 255
    2b32:	83 e0       	ldi	r24, 0x03	; 3
    2b34:	69 2f       	mov	r22, r25
    2b36:	a9 01       	movw	r20, r18
    2b38:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8GetPinValue>
				if(Local_u8PinValue== DIO_PIN_LOW){
    2b3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b3e:	88 23       	and	r24, r24
    2b40:	09 f0       	breq	.+2      	; 0x2b44 <Keypad_u8GetKeyState+0x7c>
    2b42:	ab c0       	rjmp	.+342    	; 0x2c9a <Keypad_u8GetKeyState+0x1d2>
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	a0 ea       	ldi	r26, 0xA0	; 160
    2b4a:	b1 e4       	ldi	r27, 0x41	; 65
    2b4c:	8b 87       	std	Y+11, r24	; 0x0b
    2b4e:	9c 87       	std	Y+12, r25	; 0x0c
    2b50:	ad 87       	std	Y+13, r26	; 0x0d
    2b52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	4a ef       	ldi	r20, 0xFA	; 250
    2b62:	54 e4       	ldi	r21, 0x44	; 68
    2b64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	8f 83       	std	Y+7, r24	; 0x07
    2b6e:	98 87       	std	Y+8, r25	; 0x08
    2b70:	a9 87       	std	Y+9, r26	; 0x09
    2b72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b74:	6f 81       	ldd	r22, Y+7	; 0x07
    2b76:	78 85       	ldd	r23, Y+8	; 0x08
    2b78:	89 85       	ldd	r24, Y+9	; 0x09
    2b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e8       	ldi	r20, 0x80	; 128
    2b82:	5f e3       	ldi	r21, 0x3F	; 63
    2b84:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b88:	88 23       	and	r24, r24
    2b8a:	2c f4       	brge	.+10     	; 0x2b96 <Keypad_u8GetKeyState+0xce>
		__ticks = 1;
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	9e 83       	std	Y+6, r25	; 0x06
    2b92:	8d 83       	std	Y+5, r24	; 0x05
    2b94:	3f c0       	rjmp	.+126    	; 0x2c14 <Keypad_u8GetKeyState+0x14c>
	else if (__tmp > 65535)
    2b96:	6f 81       	ldd	r22, Y+7	; 0x07
    2b98:	78 85       	ldd	r23, Y+8	; 0x08
    2b9a:	89 85       	ldd	r24, Y+9	; 0x09
    2b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	3f ef       	ldi	r19, 0xFF	; 255
    2ba2:	4f e7       	ldi	r20, 0x7F	; 127
    2ba4:	57 e4       	ldi	r21, 0x47	; 71
    2ba6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2baa:	18 16       	cp	r1, r24
    2bac:	4c f5       	brge	.+82     	; 0x2c00 <Keypad_u8GetKeyState+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	40 e2       	ldi	r20, 0x20	; 32
    2bbc:	51 e4       	ldi	r21, 0x41	; 65
    2bbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	cd 01       	movw	r24, r26
    2bca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	9e 83       	std	Y+6, r25	; 0x06
    2bd4:	8d 83       	std	Y+5, r24	; 0x05
    2bd6:	0f c0       	rjmp	.+30     	; 0x2bf6 <Keypad_u8GetKeyState+0x12e>
    2bd8:	88 ec       	ldi	r24, 0xC8	; 200
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	9c 83       	std	Y+4, r25	; 0x04
    2bde:	8b 83       	std	Y+3, r24	; 0x03
    2be0:	8b 81       	ldd	r24, Y+3	; 0x03
    2be2:	9c 81       	ldd	r25, Y+4	; 0x04
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	f1 f7       	brne	.-4      	; 0x2be4 <Keypad_u8GetKeyState+0x11c>
    2be8:	9c 83       	std	Y+4, r25	; 0x04
    2bea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bec:	8d 81       	ldd	r24, Y+5	; 0x05
    2bee:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	9e 83       	std	Y+6, r25	; 0x06
    2bf4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	69 f7       	brne	.-38     	; 0x2bd8 <Keypad_u8GetKeyState+0x110>
    2bfe:	14 c0       	rjmp	.+40     	; 0x2c28 <Keypad_u8GetKeyState+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c00:	6f 81       	ldd	r22, Y+7	; 0x07
    2c02:	78 85       	ldd	r23, Y+8	; 0x08
    2c04:	89 85       	ldd	r24, Y+9	; 0x09
    2c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	9e 83       	std	Y+6, r25	; 0x06
    2c12:	8d 83       	std	Y+5, r24	; 0x05
    2c14:	8d 81       	ldd	r24, Y+5	; 0x05
    2c16:	9e 81       	ldd	r25, Y+6	; 0x06
    2c18:	9a 83       	std	Y+2, r25	; 0x02
    2c1a:	89 83       	std	Y+1, r24	; 0x01
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <Keypad_u8GetKeyState+0x158>
    2c24:	9a 83       	std	Y+2, r25	; 0x02
    2c26:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(20);  //for debouncing 
					DIO_u8GetPinValue(KEYPAD_u8_PORT_COLUMNS,KeyPad_Au8Columns[Local_u8ColumnsCounter],&Local_u8PinValue);
    2c28:	88 89       	ldd	r24, Y+16	; 0x10
    2c2a:	88 2f       	mov	r24, r24
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	fc 01       	movw	r30, r24
    2c30:	e9 51       	subi	r30, 0x19	; 25
    2c32:	ff 4f       	sbci	r31, 0xFF	; 255
    2c34:	90 81       	ld	r25, Z
    2c36:	9e 01       	movw	r18, r28
    2c38:	2d 5e       	subi	r18, 0xED	; 237
    2c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c3c:	83 e0       	ldi	r24, 0x03	; 3
    2c3e:	69 2f       	mov	r22, r25
    2c40:	a9 01       	movw	r20, r18
    2c42:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8GetPinValue>
    2c46:	0f c0       	rjmp	.+30     	; 0x2c66 <Keypad_u8GetKeyState+0x19e>
					while(Local_u8PinValue == DIO_PIN_LOW){
						DIO_u8GetPinValue(KEYPAD_u8_PORT_COLUMNS,KeyPad_Au8Columns[Local_u8ColumnsCounter],&Local_u8PinValue);
    2c48:	88 89       	ldd	r24, Y+16	; 0x10
    2c4a:	88 2f       	mov	r24, r24
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	fc 01       	movw	r30, r24
    2c50:	e9 51       	subi	r30, 0x19	; 25
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	90 81       	ld	r25, Z
    2c56:	9e 01       	movw	r18, r28
    2c58:	2d 5e       	subi	r18, 0xED	; 237
    2c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5c:	83 e0       	ldi	r24, 0x03	; 3
    2c5e:	69 2f       	mov	r22, r25
    2c60:	a9 01       	movw	r20, r18
    2c62:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8GetPinValue>
				u8 Local_u8PinValue ;
				DIO_u8GetPinValue(KEYPAD_u8_PORT_COLUMNS,KeyPad_Au8Columns[Local_u8ColumnsCounter],&Local_u8PinValue);
				if(Local_u8PinValue== DIO_PIN_LOW){
					_delay_ms(20);  //for debouncing 
					DIO_u8GetPinValue(KEYPAD_u8_PORT_COLUMNS,KeyPad_Au8Columns[Local_u8ColumnsCounter],&Local_u8PinValue);
					while(Local_u8PinValue == DIO_PIN_LOW){
    2c66:	8b 89       	ldd	r24, Y+19	; 0x13
    2c68:	88 23       	and	r24, r24
    2c6a:	71 f3       	breq	.-36     	; 0x2c48 <Keypad_u8GetKeyState+0x180>
						DIO_u8GetPinValue(KEYPAD_u8_PORT_COLUMNS,KeyPad_Au8Columns[Local_u8ColumnsCounter],&Local_u8PinValue);
					}
					flag=1;
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	8f 87       	std	Y+15, r24	; 0x0f
					*Copy_pu8ReturnedKey = KeyPad_Au8Keys[Local_u8RowsCounter][Local_u8ColumnsCounter];
    2c70:	89 89       	ldd	r24, Y+17	; 0x11
    2c72:	48 2f       	mov	r20, r24
    2c74:	50 e0       	ldi	r21, 0x00	; 0
    2c76:	88 89       	ldd	r24, Y+16	; 0x10
    2c78:	28 2f       	mov	r18, r24
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	ca 01       	movw	r24, r20
    2c7e:	88 0f       	add	r24, r24
    2c80:	99 1f       	adc	r25, r25
    2c82:	88 0f       	add	r24, r24
    2c84:	99 1f       	adc	r25, r25
    2c86:	82 0f       	add	r24, r18
    2c88:	93 1f       	adc	r25, r19
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	ed 52       	subi	r30, 0x2D	; 45
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	80 81       	ld	r24, Z
    2c92:	ec 89       	ldd	r30, Y+20	; 0x14
    2c94:	fd 89       	ldd	r31, Y+21	; 0x15
    2c96:	80 83       	st	Z, r24
    2c98:	07 c0       	rjmp	.+14     	; 0x2ca8 <Keypad_u8GetKeyState+0x1e0>
		
		/*Activation each row */ 
		for(Local_u8RowsCounter=0;Local_u8RowsCounter<=3;Local_u8RowsCounter++){
			DIO_u8SetPinValue(KEYPAD_u8_PORT_ROWS,KeyPad_Au8Rows[Local_u8RowsCounter],DIO_PIN_LOW);
			/*check which input pin is zero  */
			for(Local_u8ColumnsCounter=0;Local_u8ColumnsCounter<=3;Local_u8ColumnsCounter++){
    2c9a:	88 89       	ldd	r24, Y+16	; 0x10
    2c9c:	8f 5f       	subi	r24, 0xFF	; 255
    2c9e:	88 8b       	std	Y+16, r24	; 0x10
    2ca0:	88 89       	ldd	r24, Y+16	; 0x10
    2ca2:	84 30       	cpi	r24, 0x04	; 4
    2ca4:	08 f4       	brcc	.+2      	; 0x2ca8 <Keypad_u8GetKeyState+0x1e0>
    2ca6:	3b cf       	rjmp	.-394    	; 0x2b1e <Keypad_u8GetKeyState+0x56>
					*Copy_pu8ReturnedKey = KeyPad_Au8Keys[Local_u8RowsCounter][Local_u8ColumnsCounter];
					break;
					
				}
			}
			DIO_u8SetPinValue(KEYPAD_u8_PORT_ROWS,KeyPad_Au8Rows[Local_u8RowsCounter],DIO_PIN_HIGH);
    2ca8:	89 89       	ldd	r24, Y+17	; 0x11
    2caa:	88 2f       	mov	r24, r24
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	fc 01       	movw	r30, r24
    2cb0:	ed 51       	subi	r30, 0x1D	; 29
    2cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb4:	90 81       	ld	r25, Z
    2cb6:	83 e0       	ldi	r24, 0x03	; 3
    2cb8:	69 2f       	mov	r22, r25
    2cba:	41 e0       	ldi	r20, 0x01	; 1
    2cbc:	0e 94 49 07 	call	0xe92	; 0xe92 <DIO_u8SetPinValue>
			if(flag== 1 ){
    2cc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cc2:	81 30       	cpi	r24, 0x01	; 1
    2cc4:	39 f0       	breq	.+14     	; 0x2cd4 <Keypad_u8GetKeyState+0x20c>
		ret = R_NOT_OK;
	}
	else {
		
		/*Activation each row */ 
		for(Local_u8RowsCounter=0;Local_u8RowsCounter<=3;Local_u8RowsCounter++){
    2cc6:	89 89       	ldd	r24, Y+17	; 0x11
    2cc8:	8f 5f       	subi	r24, 0xFF	; 255
    2cca:	89 8b       	std	Y+17, r24	; 0x11
    2ccc:	89 89       	ldd	r24, Y+17	; 0x11
    2cce:	84 30       	cpi	r24, 0x04	; 4
    2cd0:	08 f4       	brcc	.+2      	; 0x2cd4 <Keypad_u8GetKeyState+0x20c>
    2cd2:	17 cf       	rjmp	.-466    	; 0x2b02 <Keypad_u8GetKeyState+0x3a>
			if(flag== 1 ){
				break;
			}
		}
		
		ret = R_OK;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	8a 8b       	std	Y+18, r24	; 0x12
	}
	
	
	return ret ; 
    2cd8:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2cda:	65 96       	adiw	r28, 0x15	; 21
    2cdc:	0f b6       	in	r0, 0x3f	; 63
    2cde:	f8 94       	cli
    2ce0:	de bf       	out	0x3e, r29	; 62
    2ce2:	0f be       	out	0x3f, r0	; 63
    2ce4:	cd bf       	out	0x3d, r28	; 61
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	08 95       	ret

00002cec <main>:
/************** SWC       : Calculator        ********/
/************** Version   : 1.0               ********/
/*****************************************************/
#include "APP.h"

int main (void){
    2cec:	0f 93       	push	r16
    2cee:	1f 93       	push	r17
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	cd b7       	in	r28, 0x3d	; 61
    2cf6:	de b7       	in	r29, 0x3e	; 62
    2cf8:	cf 5c       	subi	r28, 0xCF	; 207
    2cfa:	d0 40       	sbci	r29, 0x00	; 0
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	f8 94       	cli
    2d00:	de bf       	out	0x3e, r29	; 62
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	cd bf       	out	0x3d, r28	; 61
	DIO_VoidInit();
    2d06:	0e 94 2d 0a 	call	0x145a	; 0x145a <DIO_VoidInit>
	LCD_voidInit();
    2d0a:	0e 94 0d 0b 	call	0x161a	; 0x161a <LCD_voidInit>
    u8 keypadNum,ret,NumberOfGigits=0 ;
    2d0e:	fe 01       	movw	r30, r28
    2d10:	eb 55       	subi	r30, 0x5B	; 91
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	10 82       	st	Z, r1
    u8 Password[16];
    u8 Check_Password[16];
    u8 FirstNum[4];
    u8 SecondNum[4];
    u8 counter =0;
    2d16:	fe 01       	movw	r30, r28
    2d18:	ec 55       	subi	r30, 0x5C	; 92
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	10 82       	st	Z, r1


LCD_voidGoToXY(LCD_LINE1,1);
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	61 e0       	ldi	r22, 0x01	; 1
    2d22:	0e 94 ae 14 	call	0x295c	; 0x295c <LCD_voidGoToXY>
LCD_voidSendString("Set Password");
    2d26:	80 e6       	ldi	r24, 0x60	; 96
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	0e 94 2d 13 	call	0x265a	; 0x265a <LCD_voidSendString>
while(1)
{
	           do
	           {
	                ret=Keypad_u8GetKeyState(&keypadNum);
    2d2e:	ce 01       	movw	r24, r28
    2d30:	89 55       	subi	r24, 0x59	; 89
    2d32:	9f 4f       	sbci	r25, 0xFF	; 255
    2d34:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <Keypad_u8GetKeyState>
    2d38:	fe 01       	movw	r30, r28
    2d3a:	ea 55       	subi	r30, 0x5A	; 90
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	80 83       	st	Z, r24

	           }while(keypadNum==KEYPAD_u8_KEY_NOT_PRESSED);
    2d40:	fe 01       	movw	r30, r28
    2d42:	e9 55       	subi	r30, 0x59	; 89
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	80 81       	ld	r24, Z
    2d48:	8f 3f       	cpi	r24, 0xFF	; 255
    2d4a:	89 f3       	breq	.-30     	; 0x2d2e <main+0x42>

	           if(keypadNum=='^')  break;   //buttom ON/C
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	e9 55       	subi	r30, 0x59	; 89
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	80 81       	ld	r24, Z
    2d54:	8e 35       	cpi	r24, 0x5E	; 94
    2d56:	09 f4       	brne	.+2      	; 0x2d5a <main+0x6e>
    2d58:	e7 c0       	rjmp	.+462    	; 0x2f28 <main+0x23c>
	           NumberOfGigits++;
    2d5a:	de 01       	movw	r26, r28
    2d5c:	ab 55       	subi	r26, 0x5B	; 91
    2d5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d60:	fe 01       	movw	r30, r28
    2d62:	eb 55       	subi	r30, 0x5B	; 91
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	80 81       	ld	r24, Z
    2d68:	8f 5f       	subi	r24, 0xFF	; 255
    2d6a:	8c 93       	st	X, r24
	           Password[NumberOfGigits]= (keypadNum-48);
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	eb 55       	subi	r30, 0x5B	; 91
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	80 81       	ld	r24, Z
    2d74:	28 2f       	mov	r18, r24
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	fe 01       	movw	r30, r28
    2d7a:	e9 55       	subi	r30, 0x59	; 89
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	80 81       	ld	r24, Z
    2d80:	48 2f       	mov	r20, r24
    2d82:	40 53       	subi	r20, 0x30	; 48
    2d84:	ce 01       	movw	r24, r28
    2d86:	88 55       	subi	r24, 0x58	; 88
    2d88:	9f 4f       	sbci	r25, 0xFF	; 255
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	e2 0f       	add	r30, r18
    2d8e:	f3 1f       	adc	r31, r19
    2d90:	40 83       	st	Z, r20


	           LCD_voidGoToXY(LCD_LINE2,NumberOfGigits);
    2d92:	fe 01       	movw	r30, r28
    2d94:	eb 55       	subi	r30, 0x5B	; 91
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	60 81       	ld	r22, Z
    2d9c:	0e 94 ae 14 	call	0x295c	; 0x295c <LCD_voidGoToXY>
	           LCD_voidSendChar(keypadNum);
    2da0:	fe 01       	movw	r30, r28
    2da2:	e9 55       	subi	r30, 0x59	; 89
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	80 81       	ld	r24, Z
    2da8:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_voidSendChar>
    2dac:	fe 01       	movw	r30, r28
    2dae:	e9 56       	subi	r30, 0x69	; 105
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	a8 e4       	ldi	r26, 0x48	; 72
    2db8:	b3 e4       	ldi	r27, 0x43	; 67
    2dba:	80 83       	st	Z, r24
    2dbc:	91 83       	std	Z+1, r25	; 0x01
    2dbe:	a2 83       	std	Z+2, r26	; 0x02
    2dc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc2:	8e 01       	movw	r16, r28
    2dc4:	0d 56       	subi	r16, 0x6D	; 109
    2dc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc8:	fe 01       	movw	r30, r28
    2dca:	e9 56       	subi	r30, 0x69	; 105
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	60 81       	ld	r22, Z
    2dd0:	71 81       	ldd	r23, Z+1	; 0x01
    2dd2:	82 81       	ldd	r24, Z+2	; 0x02
    2dd4:	93 81       	ldd	r25, Z+3	; 0x03
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	4a ef       	ldi	r20, 0xFA	; 250
    2ddc:	54 e4       	ldi	r21, 0x44	; 68
    2dde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	f8 01       	movw	r30, r16
    2de8:	80 83       	st	Z, r24
    2dea:	91 83       	std	Z+1, r25	; 0x01
    2dec:	a2 83       	std	Z+2, r26	; 0x02
    2dee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2df0:	fe 01       	movw	r30, r28
    2df2:	ed 56       	subi	r30, 0x6D	; 109
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	60 81       	ld	r22, Z
    2df8:	71 81       	ldd	r23, Z+1	; 0x01
    2dfa:	82 81       	ldd	r24, Z+2	; 0x02
    2dfc:	93 81       	ldd	r25, Z+3	; 0x03
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	40 e8       	ldi	r20, 0x80	; 128
    2e04:	5f e3       	ldi	r21, 0x3F	; 63
    2e06:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e0a:	88 23       	and	r24, r24
    2e0c:	44 f4       	brge	.+16     	; 0x2e1e <main+0x132>
		__ticks = 1;
    2e0e:	fe 01       	movw	r30, r28
    2e10:	ef 56       	subi	r30, 0x6F	; 111
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	91 83       	std	Z+1, r25	; 0x01
    2e1a:	80 83       	st	Z, r24
    2e1c:	64 c0       	rjmp	.+200    	; 0x2ee6 <main+0x1fa>
	else if (__tmp > 65535)
    2e1e:	fe 01       	movw	r30, r28
    2e20:	ed 56       	subi	r30, 0x6D	; 109
    2e22:	ff 4f       	sbci	r31, 0xFF	; 255
    2e24:	60 81       	ld	r22, Z
    2e26:	71 81       	ldd	r23, Z+1	; 0x01
    2e28:	82 81       	ldd	r24, Z+2	; 0x02
    2e2a:	93 81       	ldd	r25, Z+3	; 0x03
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	3f ef       	ldi	r19, 0xFF	; 255
    2e30:	4f e7       	ldi	r20, 0x7F	; 127
    2e32:	57 e4       	ldi	r21, 0x47	; 71
    2e34:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e38:	18 16       	cp	r1, r24
    2e3a:	0c f0       	brlt	.+2      	; 0x2e3e <main+0x152>
    2e3c:	43 c0       	rjmp	.+134    	; 0x2ec4 <main+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e3e:	fe 01       	movw	r30, r28
    2e40:	e9 56       	subi	r30, 0x69	; 105
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	60 81       	ld	r22, Z
    2e46:	71 81       	ldd	r23, Z+1	; 0x01
    2e48:	82 81       	ldd	r24, Z+2	; 0x02
    2e4a:	93 81       	ldd	r25, Z+3	; 0x03
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	40 e2       	ldi	r20, 0x20	; 32
    2e52:	51 e4       	ldi	r21, 0x41	; 65
    2e54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	8e 01       	movw	r16, r28
    2e5e:	0f 56       	subi	r16, 0x6F	; 111
    2e60:	1f 4f       	sbci	r17, 0xFF	; 255
    2e62:	bc 01       	movw	r22, r24
    2e64:	cd 01       	movw	r24, r26
    2e66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	f8 01       	movw	r30, r16
    2e70:	91 83       	std	Z+1, r25	; 0x01
    2e72:	80 83       	st	Z, r24
    2e74:	1f c0       	rjmp	.+62     	; 0x2eb4 <main+0x1c8>
    2e76:	fe 01       	movw	r30, r28
    2e78:	e1 57       	subi	r30, 0x71	; 113
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	88 ec       	ldi	r24, 0xC8	; 200
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	91 83       	std	Z+1, r25	; 0x01
    2e82:	80 83       	st	Z, r24
    2e84:	fe 01       	movw	r30, r28
    2e86:	e1 57       	subi	r30, 0x71	; 113
    2e88:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8a:	80 81       	ld	r24, Z
    2e8c:	91 81       	ldd	r25, Z+1	; 0x01
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	f1 f7       	brne	.-4      	; 0x2e8e <main+0x1a2>
    2e92:	fe 01       	movw	r30, r28
    2e94:	e1 57       	subi	r30, 0x71	; 113
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	91 83       	std	Z+1, r25	; 0x01
    2e9a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e9c:	de 01       	movw	r26, r28
    2e9e:	af 56       	subi	r26, 0x6F	; 111
    2ea0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	ef 56       	subi	r30, 0x6F	; 111
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	80 81       	ld	r24, Z
    2eaa:	91 81       	ldd	r25, Z+1	; 0x01
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	11 96       	adiw	r26, 0x01	; 1
    2eb0:	9c 93       	st	X, r25
    2eb2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	ef 56       	subi	r30, 0x6F	; 111
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	80 81       	ld	r24, Z
    2ebc:	91 81       	ldd	r25, Z+1	; 0x01
    2ebe:	00 97       	sbiw	r24, 0x00	; 0
    2ec0:	d1 f6       	brne	.-76     	; 0x2e76 <main+0x18a>
    2ec2:	27 c0       	rjmp	.+78     	; 0x2f12 <main+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec4:	8e 01       	movw	r16, r28
    2ec6:	0f 56       	subi	r16, 0x6F	; 111
    2ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eca:	fe 01       	movw	r30, r28
    2ecc:	ed 56       	subi	r30, 0x6D	; 109
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	60 81       	ld	r22, Z
    2ed2:	71 81       	ldd	r23, Z+1	; 0x01
    2ed4:	82 81       	ldd	r24, Z+2	; 0x02
    2ed6:	93 81       	ldd	r25, Z+3	; 0x03
    2ed8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	f8 01       	movw	r30, r16
    2ee2:	91 83       	std	Z+1, r25	; 0x01
    2ee4:	80 83       	st	Z, r24
    2ee6:	de 01       	movw	r26, r28
    2ee8:	a3 57       	subi	r26, 0x73	; 115
    2eea:	bf 4f       	sbci	r27, 0xFF	; 255
    2eec:	fe 01       	movw	r30, r28
    2eee:	ef 56       	subi	r30, 0x6F	; 111
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	80 81       	ld	r24, Z
    2ef4:	91 81       	ldd	r25, Z+1	; 0x01
    2ef6:	8d 93       	st	X+, r24
    2ef8:	9c 93       	st	X, r25
    2efa:	fe 01       	movw	r30, r28
    2efc:	e3 57       	subi	r30, 0x73	; 115
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	80 81       	ld	r24, Z
    2f02:	91 81       	ldd	r25, Z+1	; 0x01
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	f1 f7       	brne	.-4      	; 0x2f04 <main+0x218>
    2f08:	fe 01       	movw	r30, r28
    2f0a:	e3 57       	subi	r30, 0x73	; 115
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	91 83       	std	Z+1, r25	; 0x01
    2f10:	80 83       	st	Z, r24
	           _delay_ms(200);
	           LCD_voidGoToXY(LCD_LINE2,NumberOfGigits);
    2f12:	fe 01       	movw	r30, r28
    2f14:	eb 55       	subi	r30, 0x5B	; 91
    2f16:	ff 4f       	sbci	r31, 0xFF	; 255
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	60 81       	ld	r22, Z
    2f1c:	0e 94 ae 14 	call	0x295c	; 0x295c <LCD_voidGoToXY>
	           LCD_voidSendChar('*');
    2f20:	8a e2       	ldi	r24, 0x2A	; 42
    2f22:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_voidSendChar>
    2f26:	03 cf       	rjmp	.-506    	; 0x2d2e <main+0x42>

}

 while(1)
 {
	         LCD_Clear();
    2f28:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <LCD_Clear>
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	e7 57       	subi	r30, 0x77	; 119
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	a8 ec       	ldi	r26, 0xC8	; 200
    2f38:	b2 e4       	ldi	r27, 0x42	; 66
    2f3a:	80 83       	st	Z, r24
    2f3c:	91 83       	std	Z+1, r25	; 0x01
    2f3e:	a2 83       	std	Z+2, r26	; 0x02
    2f40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f42:	8e 01       	movw	r16, r28
    2f44:	0b 57       	subi	r16, 0x7B	; 123
    2f46:	1f 4f       	sbci	r17, 0xFF	; 255
    2f48:	fe 01       	movw	r30, r28
    2f4a:	e7 57       	subi	r30, 0x77	; 119
    2f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4e:	60 81       	ld	r22, Z
    2f50:	71 81       	ldd	r23, Z+1	; 0x01
    2f52:	82 81       	ldd	r24, Z+2	; 0x02
    2f54:	93 81       	ldd	r25, Z+3	; 0x03
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	4a ef       	ldi	r20, 0xFA	; 250
    2f5c:	54 e4       	ldi	r21, 0x44	; 68
    2f5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	f8 01       	movw	r30, r16
    2f68:	80 83       	st	Z, r24
    2f6a:	91 83       	std	Z+1, r25	; 0x01
    2f6c:	a2 83       	std	Z+2, r26	; 0x02
    2f6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f70:	fe 01       	movw	r30, r28
    2f72:	eb 57       	subi	r30, 0x7B	; 123
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	60 81       	ld	r22, Z
    2f78:	71 81       	ldd	r23, Z+1	; 0x01
    2f7a:	82 81       	ldd	r24, Z+2	; 0x02
    2f7c:	93 81       	ldd	r25, Z+3	; 0x03
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	40 e8       	ldi	r20, 0x80	; 128
    2f84:	5f e3       	ldi	r21, 0x3F	; 63
    2f86:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2f8a:	88 23       	and	r24, r24
    2f8c:	44 f4       	brge	.+16     	; 0x2f9e <main+0x2b2>
		__ticks = 1;
    2f8e:	fe 01       	movw	r30, r28
    2f90:	ed 57       	subi	r30, 0x7D	; 125
    2f92:	ff 4f       	sbci	r31, 0xFF	; 255
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	91 83       	std	Z+1, r25	; 0x01
    2f9a:	80 83       	st	Z, r24
    2f9c:	64 c0       	rjmp	.+200    	; 0x3066 <main+0x37a>
	else if (__tmp > 65535)
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	eb 57       	subi	r30, 0x7B	; 123
    2fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa4:	60 81       	ld	r22, Z
    2fa6:	71 81       	ldd	r23, Z+1	; 0x01
    2fa8:	82 81       	ldd	r24, Z+2	; 0x02
    2faa:	93 81       	ldd	r25, Z+3	; 0x03
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	3f ef       	ldi	r19, 0xFF	; 255
    2fb0:	4f e7       	ldi	r20, 0x7F	; 127
    2fb2:	57 e4       	ldi	r21, 0x47	; 71
    2fb4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2fb8:	18 16       	cp	r1, r24
    2fba:	0c f0       	brlt	.+2      	; 0x2fbe <main+0x2d2>
    2fbc:	43 c0       	rjmp	.+134    	; 0x3044 <main+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	e7 57       	subi	r30, 0x77	; 119
    2fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc4:	60 81       	ld	r22, Z
    2fc6:	71 81       	ldd	r23, Z+1	; 0x01
    2fc8:	82 81       	ldd	r24, Z+2	; 0x02
    2fca:	93 81       	ldd	r25, Z+3	; 0x03
    2fcc:	20 e0       	ldi	r18, 0x00	; 0
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	40 e2       	ldi	r20, 0x20	; 32
    2fd2:	51 e4       	ldi	r21, 0x41	; 65
    2fd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	8e 01       	movw	r16, r28
    2fde:	0d 57       	subi	r16, 0x7D	; 125
    2fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe2:	bc 01       	movw	r22, r24
    2fe4:	cd 01       	movw	r24, r26
    2fe6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	f8 01       	movw	r30, r16
    2ff0:	91 83       	std	Z+1, r25	; 0x01
    2ff2:	80 83       	st	Z, r24
    2ff4:	1f c0       	rjmp	.+62     	; 0x3034 <main+0x348>
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	ef 57       	subi	r30, 0x7F	; 127
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	88 ec       	ldi	r24, 0xC8	; 200
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	91 83       	std	Z+1, r25	; 0x01
    3002:	80 83       	st	Z, r24
    3004:	fe 01       	movw	r30, r28
    3006:	ef 57       	subi	r30, 0x7F	; 127
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	80 81       	ld	r24, Z
    300c:	91 81       	ldd	r25, Z+1	; 0x01
    300e:	01 97       	sbiw	r24, 0x01	; 1
    3010:	f1 f7       	brne	.-4      	; 0x300e <main+0x322>
    3012:	fe 01       	movw	r30, r28
    3014:	ef 57       	subi	r30, 0x7F	; 127
    3016:	ff 4f       	sbci	r31, 0xFF	; 255
    3018:	91 83       	std	Z+1, r25	; 0x01
    301a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    301c:	de 01       	movw	r26, r28
    301e:	ad 57       	subi	r26, 0x7D	; 125
    3020:	bf 4f       	sbci	r27, 0xFF	; 255
    3022:	fe 01       	movw	r30, r28
    3024:	ed 57       	subi	r30, 0x7D	; 125
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	80 81       	ld	r24, Z
    302a:	91 81       	ldd	r25, Z+1	; 0x01
    302c:	01 97       	sbiw	r24, 0x01	; 1
    302e:	11 96       	adiw	r26, 0x01	; 1
    3030:	9c 93       	st	X, r25
    3032:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3034:	fe 01       	movw	r30, r28
    3036:	ed 57       	subi	r30, 0x7D	; 125
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	80 81       	ld	r24, Z
    303c:	91 81       	ldd	r25, Z+1	; 0x01
    303e:	00 97       	sbiw	r24, 0x00	; 0
    3040:	d1 f6       	brne	.-76     	; 0x2ff6 <main+0x30a>
    3042:	27 c0       	rjmp	.+78     	; 0x3092 <main+0x3a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3044:	8e 01       	movw	r16, r28
    3046:	0d 57       	subi	r16, 0x7D	; 125
    3048:	1f 4f       	sbci	r17, 0xFF	; 255
    304a:	fe 01       	movw	r30, r28
    304c:	eb 57       	subi	r30, 0x7B	; 123
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	60 81       	ld	r22, Z
    3052:	71 81       	ldd	r23, Z+1	; 0x01
    3054:	82 81       	ldd	r24, Z+2	; 0x02
    3056:	93 81       	ldd	r25, Z+3	; 0x03
    3058:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	f8 01       	movw	r30, r16
    3062:	91 83       	std	Z+1, r25	; 0x01
    3064:	80 83       	st	Z, r24
    3066:	de 01       	movw	r26, r28
    3068:	a1 58       	subi	r26, 0x81	; 129
    306a:	bf 4f       	sbci	r27, 0xFF	; 255
    306c:	fe 01       	movw	r30, r28
    306e:	ed 57       	subi	r30, 0x7D	; 125
    3070:	ff 4f       	sbci	r31, 0xFF	; 255
    3072:	80 81       	ld	r24, Z
    3074:	91 81       	ldd	r25, Z+1	; 0x01
    3076:	8d 93       	st	X+, r24
    3078:	9c 93       	st	X, r25
    307a:	fe 01       	movw	r30, r28
    307c:	e1 58       	subi	r30, 0x81	; 129
    307e:	ff 4f       	sbci	r31, 0xFF	; 255
    3080:	80 81       	ld	r24, Z
    3082:	91 81       	ldd	r25, Z+1	; 0x01
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	f1 f7       	brne	.-4      	; 0x3084 <main+0x398>
    3088:	fe 01       	movw	r30, r28
    308a:	e1 58       	subi	r30, 0x81	; 129
    308c:	ff 4f       	sbci	r31, 0xFF	; 255
    308e:	91 83       	std	Z+1, r25	; 0x01
    3090:	80 83       	st	Z, r24
	         _delay_ms(100);
	        LCD_voidGoToXY(LCD_LINE1,1);
    3092:	80 e0       	ldi	r24, 0x00	; 0
    3094:	61 e0       	ldi	r22, 0x01	; 1
    3096:	0e 94 ae 14 	call	0x295c	; 0x295c <LCD_voidGoToXY>
	        LCD_voidSendString("Check Password");
    309a:	8d e6       	ldi	r24, 0x6D	; 109
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	0e 94 2d 13 	call	0x265a	; 0x265a <LCD_voidSendString>
	        counter = 0 ;
    30a2:	fe 01       	movw	r30, r28
    30a4:	ec 55       	subi	r30, 0x5C	; 92
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	10 82       	st	Z, r1
	        while(1){
	        do{
	        	ret=Keypad_u8GetKeyState(&keypadNum);
    30aa:	ce 01       	movw	r24, r28
    30ac:	89 55       	subi	r24, 0x59	; 89
    30ae:	9f 4f       	sbci	r25, 0xFF	; 255
    30b0:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <Keypad_u8GetKeyState>
    30b4:	fe 01       	movw	r30, r28
    30b6:	ea 55       	subi	r30, 0x5A	; 90
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	80 83       	st	Z, r24
	        }while(keypadNum==KEYPAD_u8_KEY_NOT_PRESSED);
    30bc:	fe 01       	movw	r30, r28
    30be:	e9 55       	subi	r30, 0x59	; 89
    30c0:	ff 4f       	sbci	r31, 0xFF	; 255
    30c2:	80 81       	ld	r24, Z
    30c4:	8f 3f       	cpi	r24, 0xFF	; 255
    30c6:	89 f3       	breq	.-30     	; 0x30aa <main+0x3be>
	        if(keypadNum=='^')  break;
    30c8:	fe 01       	movw	r30, r28
    30ca:	e9 55       	subi	r30, 0x59	; 89
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	80 81       	ld	r24, Z
    30d0:	8e 35       	cpi	r24, 0x5E	; 94
    30d2:	09 f4       	brne	.+2      	; 0x30d6 <main+0x3ea>
    30d4:	e7 c0       	rjmp	.+462    	; 0x32a4 <main+0x5b8>
	        counter++;
    30d6:	de 01       	movw	r26, r28
    30d8:	ac 55       	subi	r26, 0x5C	; 92
    30da:	bf 4f       	sbci	r27, 0xFF	; 255
    30dc:	fe 01       	movw	r30, r28
    30de:	ec 55       	subi	r30, 0x5C	; 92
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	80 81       	ld	r24, Z
    30e4:	8f 5f       	subi	r24, 0xFF	; 255
    30e6:	8c 93       	st	X, r24
	        Check_Password[counter]= (keypadNum-48);
    30e8:	fe 01       	movw	r30, r28
    30ea:	ec 55       	subi	r30, 0x5C	; 92
    30ec:	ff 4f       	sbci	r31, 0xFF	; 255
    30ee:	80 81       	ld	r24, Z
    30f0:	28 2f       	mov	r18, r24
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	fe 01       	movw	r30, r28
    30f6:	e9 55       	subi	r30, 0x59	; 89
    30f8:	ff 4f       	sbci	r31, 0xFF	; 255
    30fa:	80 81       	ld	r24, Z
    30fc:	48 2f       	mov	r20, r24
    30fe:	40 53       	subi	r20, 0x30	; 48
    3100:	ce 01       	movw	r24, r28
    3102:	88 54       	subi	r24, 0x48	; 72
    3104:	9f 4f       	sbci	r25, 0xFF	; 255
    3106:	fc 01       	movw	r30, r24
    3108:	e2 0f       	add	r30, r18
    310a:	f3 1f       	adc	r31, r19
    310c:	40 83       	st	Z, r20


	        LCD_voidGoToXY(LCD_LINE2,counter);
    310e:	fe 01       	movw	r30, r28
    3110:	ec 55       	subi	r30, 0x5C	; 92
    3112:	ff 4f       	sbci	r31, 0xFF	; 255
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	60 81       	ld	r22, Z
    3118:	0e 94 ae 14 	call	0x295c	; 0x295c <LCD_voidGoToXY>
	        LCD_voidSendChar(keypadNum);
    311c:	fe 01       	movw	r30, r28
    311e:	e9 55       	subi	r30, 0x59	; 89
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	80 81       	ld	r24, Z
    3124:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_voidSendChar>
    3128:	fe 01       	movw	r30, r28
    312a:	e5 58       	subi	r30, 0x85	; 133
    312c:	ff 4f       	sbci	r31, 0xFF	; 255
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	a8 e4       	ldi	r26, 0x48	; 72
    3134:	b3 e4       	ldi	r27, 0x43	; 67
    3136:	80 83       	st	Z, r24
    3138:	91 83       	std	Z+1, r25	; 0x01
    313a:	a2 83       	std	Z+2, r26	; 0x02
    313c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313e:	8e 01       	movw	r16, r28
    3140:	09 58       	subi	r16, 0x89	; 137
    3142:	1f 4f       	sbci	r17, 0xFF	; 255
    3144:	fe 01       	movw	r30, r28
    3146:	e5 58       	subi	r30, 0x85	; 133
    3148:	ff 4f       	sbci	r31, 0xFF	; 255
    314a:	60 81       	ld	r22, Z
    314c:	71 81       	ldd	r23, Z+1	; 0x01
    314e:	82 81       	ldd	r24, Z+2	; 0x02
    3150:	93 81       	ldd	r25, Z+3	; 0x03
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	4a ef       	ldi	r20, 0xFA	; 250
    3158:	54 e4       	ldi	r21, 0x44	; 68
    315a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	f8 01       	movw	r30, r16
    3164:	80 83       	st	Z, r24
    3166:	91 83       	std	Z+1, r25	; 0x01
    3168:	a2 83       	std	Z+2, r26	; 0x02
    316a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    316c:	fe 01       	movw	r30, r28
    316e:	e9 58       	subi	r30, 0x89	; 137
    3170:	ff 4f       	sbci	r31, 0xFF	; 255
    3172:	60 81       	ld	r22, Z
    3174:	71 81       	ldd	r23, Z+1	; 0x01
    3176:	82 81       	ldd	r24, Z+2	; 0x02
    3178:	93 81       	ldd	r25, Z+3	; 0x03
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	40 e8       	ldi	r20, 0x80	; 128
    3180:	5f e3       	ldi	r21, 0x3F	; 63
    3182:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3186:	88 23       	and	r24, r24
    3188:	44 f4       	brge	.+16     	; 0x319a <main+0x4ae>
		__ticks = 1;
    318a:	fe 01       	movw	r30, r28
    318c:	eb 58       	subi	r30, 0x8B	; 139
    318e:	ff 4f       	sbci	r31, 0xFF	; 255
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	91 83       	std	Z+1, r25	; 0x01
    3196:	80 83       	st	Z, r24
    3198:	64 c0       	rjmp	.+200    	; 0x3262 <main+0x576>
	else if (__tmp > 65535)
    319a:	fe 01       	movw	r30, r28
    319c:	e9 58       	subi	r30, 0x89	; 137
    319e:	ff 4f       	sbci	r31, 0xFF	; 255
    31a0:	60 81       	ld	r22, Z
    31a2:	71 81       	ldd	r23, Z+1	; 0x01
    31a4:	82 81       	ldd	r24, Z+2	; 0x02
    31a6:	93 81       	ldd	r25, Z+3	; 0x03
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	3f ef       	ldi	r19, 0xFF	; 255
    31ac:	4f e7       	ldi	r20, 0x7F	; 127
    31ae:	57 e4       	ldi	r21, 0x47	; 71
    31b0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    31b4:	18 16       	cp	r1, r24
    31b6:	0c f0       	brlt	.+2      	; 0x31ba <main+0x4ce>
    31b8:	43 c0       	rjmp	.+134    	; 0x3240 <main+0x554>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ba:	fe 01       	movw	r30, r28
    31bc:	e5 58       	subi	r30, 0x85	; 133
    31be:	ff 4f       	sbci	r31, 0xFF	; 255
    31c0:	60 81       	ld	r22, Z
    31c2:	71 81       	ldd	r23, Z+1	; 0x01
    31c4:	82 81       	ldd	r24, Z+2	; 0x02
    31c6:	93 81       	ldd	r25, Z+3	; 0x03
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	40 e2       	ldi	r20, 0x20	; 32
    31ce:	51 e4       	ldi	r21, 0x41	; 65
    31d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	8e 01       	movw	r16, r28
    31da:	0b 58       	subi	r16, 0x8B	; 139
    31dc:	1f 4f       	sbci	r17, 0xFF	; 255
    31de:	bc 01       	movw	r22, r24
    31e0:	cd 01       	movw	r24, r26
    31e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	f8 01       	movw	r30, r16
    31ec:	91 83       	std	Z+1, r25	; 0x01
    31ee:	80 83       	st	Z, r24
    31f0:	1f c0       	rjmp	.+62     	; 0x3230 <main+0x544>
    31f2:	fe 01       	movw	r30, r28
    31f4:	ed 58       	subi	r30, 0x8D	; 141
    31f6:	ff 4f       	sbci	r31, 0xFF	; 255
    31f8:	88 ec       	ldi	r24, 0xC8	; 200
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	91 83       	std	Z+1, r25	; 0x01
    31fe:	80 83       	st	Z, r24
    3200:	fe 01       	movw	r30, r28
    3202:	ed 58       	subi	r30, 0x8D	; 141
    3204:	ff 4f       	sbci	r31, 0xFF	; 255
    3206:	80 81       	ld	r24, Z
    3208:	91 81       	ldd	r25, Z+1	; 0x01
    320a:	01 97       	sbiw	r24, 0x01	; 1
    320c:	f1 f7       	brne	.-4      	; 0x320a <main+0x51e>
    320e:	fe 01       	movw	r30, r28
    3210:	ed 58       	subi	r30, 0x8D	; 141
    3212:	ff 4f       	sbci	r31, 0xFF	; 255
    3214:	91 83       	std	Z+1, r25	; 0x01
    3216:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3218:	de 01       	movw	r26, r28
    321a:	ab 58       	subi	r26, 0x8B	; 139
    321c:	bf 4f       	sbci	r27, 0xFF	; 255
    321e:	fe 01       	movw	r30, r28
    3220:	eb 58       	subi	r30, 0x8B	; 139
    3222:	ff 4f       	sbci	r31, 0xFF	; 255
    3224:	80 81       	ld	r24, Z
    3226:	91 81       	ldd	r25, Z+1	; 0x01
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	11 96       	adiw	r26, 0x01	; 1
    322c:	9c 93       	st	X, r25
    322e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3230:	fe 01       	movw	r30, r28
    3232:	eb 58       	subi	r30, 0x8B	; 139
    3234:	ff 4f       	sbci	r31, 0xFF	; 255
    3236:	80 81       	ld	r24, Z
    3238:	91 81       	ldd	r25, Z+1	; 0x01
    323a:	00 97       	sbiw	r24, 0x00	; 0
    323c:	d1 f6       	brne	.-76     	; 0x31f2 <main+0x506>
    323e:	27 c0       	rjmp	.+78     	; 0x328e <main+0x5a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3240:	8e 01       	movw	r16, r28
    3242:	0b 58       	subi	r16, 0x8B	; 139
    3244:	1f 4f       	sbci	r17, 0xFF	; 255
    3246:	fe 01       	movw	r30, r28
    3248:	e9 58       	subi	r30, 0x89	; 137
    324a:	ff 4f       	sbci	r31, 0xFF	; 255
    324c:	60 81       	ld	r22, Z
    324e:	71 81       	ldd	r23, Z+1	; 0x01
    3250:	82 81       	ldd	r24, Z+2	; 0x02
    3252:	93 81       	ldd	r25, Z+3	; 0x03
    3254:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	f8 01       	movw	r30, r16
    325e:	91 83       	std	Z+1, r25	; 0x01
    3260:	80 83       	st	Z, r24
    3262:	de 01       	movw	r26, r28
    3264:	af 58       	subi	r26, 0x8F	; 143
    3266:	bf 4f       	sbci	r27, 0xFF	; 255
    3268:	fe 01       	movw	r30, r28
    326a:	eb 58       	subi	r30, 0x8B	; 139
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	80 81       	ld	r24, Z
    3270:	91 81       	ldd	r25, Z+1	; 0x01
    3272:	8d 93       	st	X+, r24
    3274:	9c 93       	st	X, r25
    3276:	fe 01       	movw	r30, r28
    3278:	ef 58       	subi	r30, 0x8F	; 143
    327a:	ff 4f       	sbci	r31, 0xFF	; 255
    327c:	80 81       	ld	r24, Z
    327e:	91 81       	ldd	r25, Z+1	; 0x01
    3280:	01 97       	sbiw	r24, 0x01	; 1
    3282:	f1 f7       	brne	.-4      	; 0x3280 <main+0x594>
    3284:	fe 01       	movw	r30, r28
    3286:	ef 58       	subi	r30, 0x8F	; 143
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	91 83       	std	Z+1, r25	; 0x01
    328c:	80 83       	st	Z, r24
	        _delay_ms(200);
	        LCD_voidGoToXY(LCD_LINE2,counter);
    328e:	fe 01       	movw	r30, r28
    3290:	ec 55       	subi	r30, 0x5C	; 92
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	60 81       	ld	r22, Z
    3298:	0e 94 ae 14 	call	0x295c	; 0x295c <LCD_voidGoToXY>
	        LCD_voidSendChar('*');
    329c:	8a e2       	ldi	r24, 0x2A	; 42
    329e:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_voidSendChar>
    32a2:	03 cf       	rjmp	.-506    	; 0x30aa <main+0x3be>
	        }
	       if(checkPassword(Check_Password,Password,NumberOfGigits)){
    32a4:	ce 01       	movw	r24, r28
    32a6:	88 54       	subi	r24, 0x48	; 72
    32a8:	9f 4f       	sbci	r25, 0xFF	; 255
    32aa:	9e 01       	movw	r18, r28
    32ac:	28 55       	subi	r18, 0x58	; 88
    32ae:	3f 4f       	sbci	r19, 0xFF	; 255
    32b0:	fe 01       	movw	r30, r28
    32b2:	eb 55       	subi	r30, 0x5B	; 91
    32b4:	ff 4f       	sbci	r31, 0xFF	; 255
    32b6:	b9 01       	movw	r22, r18
    32b8:	40 81       	ld	r20, Z
    32ba:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <checkPassword>
    32be:	88 23       	and	r24, r24
    32c0:	09 f4       	brne	.+2      	; 0x32c4 <main+0x5d8>
    32c2:	48 c5       	rjmp	.+2704   	; 0x3d54 <main+0x1068>
	       		LCD_Clear();
    32c4:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <LCD_Clear>
	       		LCD_voidGoToXY(LCD_LINE1,1);
    32c8:	80 e0       	ldi	r24, 0x00	; 0
    32ca:	61 e0       	ldi	r22, 0x01	; 1
    32cc:	0e 94 ae 14 	call	0x295c	; 0x295c <LCD_voidGoToXY>
	       			LCD_voidSendString("Loading");
    32d0:	8c e7       	ldi	r24, 0x7C	; 124
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	0e 94 2d 13 	call	0x265a	; 0x265a <LCD_voidSendString>
	       			for(int i = 0 ;i<4;i++){
    32d8:	fe 01       	movw	r30, r28
    32da:	ee 55       	subi	r30, 0x5E	; 94
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	11 82       	std	Z+1, r1	; 0x01
    32e0:	10 82       	st	Z, r1
    32e2:	cc c0       	rjmp	.+408    	; 0x347c <main+0x790>
	       				LCD_voidGoToXY(LCD_LINE1,8+i);
    32e4:	fe 01       	movw	r30, r28
    32e6:	ee 55       	subi	r30, 0x5E	; 94
    32e8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ea:	80 81       	ld	r24, Z
    32ec:	98 2f       	mov	r25, r24
    32ee:	98 5f       	subi	r25, 0xF8	; 248
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	69 2f       	mov	r22, r25
    32f4:	0e 94 ae 14 	call	0x295c	; 0x295c <LCD_voidGoToXY>
	       				LCD_voidSendChar('.');
    32f8:	8e e2       	ldi	r24, 0x2E	; 46
    32fa:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_voidSendChar>
    32fe:	fe 01       	movw	r30, r28
    3300:	e3 59       	subi	r30, 0x93	; 147
    3302:	ff 4f       	sbci	r31, 0xFF	; 255
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	a8 e4       	ldi	r26, 0x48	; 72
    330a:	b3 e4       	ldi	r27, 0x43	; 67
    330c:	80 83       	st	Z, r24
    330e:	91 83       	std	Z+1, r25	; 0x01
    3310:	a2 83       	std	Z+2, r26	; 0x02
    3312:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3314:	8e 01       	movw	r16, r28
    3316:	07 59       	subi	r16, 0x97	; 151
    3318:	1f 4f       	sbci	r17, 0xFF	; 255
    331a:	fe 01       	movw	r30, r28
    331c:	e3 59       	subi	r30, 0x93	; 147
    331e:	ff 4f       	sbci	r31, 0xFF	; 255
    3320:	60 81       	ld	r22, Z
    3322:	71 81       	ldd	r23, Z+1	; 0x01
    3324:	82 81       	ldd	r24, Z+2	; 0x02
    3326:	93 81       	ldd	r25, Z+3	; 0x03
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	4a ef       	ldi	r20, 0xFA	; 250
    332e:	54 e4       	ldi	r21, 0x44	; 68
    3330:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	f8 01       	movw	r30, r16
    333a:	80 83       	st	Z, r24
    333c:	91 83       	std	Z+1, r25	; 0x01
    333e:	a2 83       	std	Z+2, r26	; 0x02
    3340:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3342:	fe 01       	movw	r30, r28
    3344:	e7 59       	subi	r30, 0x97	; 151
    3346:	ff 4f       	sbci	r31, 0xFF	; 255
    3348:	60 81       	ld	r22, Z
    334a:	71 81       	ldd	r23, Z+1	; 0x01
    334c:	82 81       	ldd	r24, Z+2	; 0x02
    334e:	93 81       	ldd	r25, Z+3	; 0x03
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	40 e8       	ldi	r20, 0x80	; 128
    3356:	5f e3       	ldi	r21, 0x3F	; 63
    3358:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    335c:	88 23       	and	r24, r24
    335e:	44 f4       	brge	.+16     	; 0x3370 <main+0x684>
		__ticks = 1;
    3360:	fe 01       	movw	r30, r28
    3362:	e9 59       	subi	r30, 0x99	; 153
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	81 e0       	ldi	r24, 0x01	; 1
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	91 83       	std	Z+1, r25	; 0x01
    336c:	80 83       	st	Z, r24
    336e:	64 c0       	rjmp	.+200    	; 0x3438 <main+0x74c>
	else if (__tmp > 65535)
    3370:	fe 01       	movw	r30, r28
    3372:	e7 59       	subi	r30, 0x97	; 151
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	60 81       	ld	r22, Z
    3378:	71 81       	ldd	r23, Z+1	; 0x01
    337a:	82 81       	ldd	r24, Z+2	; 0x02
    337c:	93 81       	ldd	r25, Z+3	; 0x03
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	3f ef       	ldi	r19, 0xFF	; 255
    3382:	4f e7       	ldi	r20, 0x7F	; 127
    3384:	57 e4       	ldi	r21, 0x47	; 71
    3386:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    338a:	18 16       	cp	r1, r24
    338c:	0c f0       	brlt	.+2      	; 0x3390 <main+0x6a4>
    338e:	43 c0       	rjmp	.+134    	; 0x3416 <main+0x72a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3390:	fe 01       	movw	r30, r28
    3392:	e3 59       	subi	r30, 0x93	; 147
    3394:	ff 4f       	sbci	r31, 0xFF	; 255
    3396:	60 81       	ld	r22, Z
    3398:	71 81       	ldd	r23, Z+1	; 0x01
    339a:	82 81       	ldd	r24, Z+2	; 0x02
    339c:	93 81       	ldd	r25, Z+3	; 0x03
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	40 e2       	ldi	r20, 0x20	; 32
    33a4:	51 e4       	ldi	r21, 0x41	; 65
    33a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	8e 01       	movw	r16, r28
    33b0:	09 59       	subi	r16, 0x99	; 153
    33b2:	1f 4f       	sbci	r17, 0xFF	; 255
    33b4:	bc 01       	movw	r22, r24
    33b6:	cd 01       	movw	r24, r26
    33b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	f8 01       	movw	r30, r16
    33c2:	91 83       	std	Z+1, r25	; 0x01
    33c4:	80 83       	st	Z, r24
    33c6:	1f c0       	rjmp	.+62     	; 0x3406 <main+0x71a>
    33c8:	fe 01       	movw	r30, r28
    33ca:	eb 59       	subi	r30, 0x9B	; 155
    33cc:	ff 4f       	sbci	r31, 0xFF	; 255
    33ce:	88 ec       	ldi	r24, 0xC8	; 200
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	91 83       	std	Z+1, r25	; 0x01
    33d4:	80 83       	st	Z, r24
    33d6:	fe 01       	movw	r30, r28
    33d8:	eb 59       	subi	r30, 0x9B	; 155
    33da:	ff 4f       	sbci	r31, 0xFF	; 255
    33dc:	80 81       	ld	r24, Z
    33de:	91 81       	ldd	r25, Z+1	; 0x01
    33e0:	01 97       	sbiw	r24, 0x01	; 1
    33e2:	f1 f7       	brne	.-4      	; 0x33e0 <main+0x6f4>
    33e4:	fe 01       	movw	r30, r28
    33e6:	eb 59       	subi	r30, 0x9B	; 155
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	91 83       	std	Z+1, r25	; 0x01
    33ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ee:	de 01       	movw	r26, r28
    33f0:	a9 59       	subi	r26, 0x99	; 153
    33f2:	bf 4f       	sbci	r27, 0xFF	; 255
    33f4:	fe 01       	movw	r30, r28
    33f6:	e9 59       	subi	r30, 0x99	; 153
    33f8:	ff 4f       	sbci	r31, 0xFF	; 255
    33fa:	80 81       	ld	r24, Z
    33fc:	91 81       	ldd	r25, Z+1	; 0x01
    33fe:	01 97       	sbiw	r24, 0x01	; 1
    3400:	11 96       	adiw	r26, 0x01	; 1
    3402:	9c 93       	st	X, r25
    3404:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3406:	fe 01       	movw	r30, r28
    3408:	e9 59       	subi	r30, 0x99	; 153
    340a:	ff 4f       	sbci	r31, 0xFF	; 255
    340c:	80 81       	ld	r24, Z
    340e:	91 81       	ldd	r25, Z+1	; 0x01
    3410:	00 97       	sbiw	r24, 0x00	; 0
    3412:	d1 f6       	brne	.-76     	; 0x33c8 <main+0x6dc>
    3414:	27 c0       	rjmp	.+78     	; 0x3464 <main+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3416:	8e 01       	movw	r16, r28
    3418:	09 59       	subi	r16, 0x99	; 153
    341a:	1f 4f       	sbci	r17, 0xFF	; 255
    341c:	fe 01       	movw	r30, r28
    341e:	e7 59       	subi	r30, 0x97	; 151
    3420:	ff 4f       	sbci	r31, 0xFF	; 255
    3422:	60 81       	ld	r22, Z
    3424:	71 81       	ldd	r23, Z+1	; 0x01
    3426:	82 81       	ldd	r24, Z+2	; 0x02
    3428:	93 81       	ldd	r25, Z+3	; 0x03
    342a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	f8 01       	movw	r30, r16
    3434:	91 83       	std	Z+1, r25	; 0x01
    3436:	80 83       	st	Z, r24
    3438:	de 01       	movw	r26, r28
    343a:	ad 59       	subi	r26, 0x9D	; 157
    343c:	bf 4f       	sbci	r27, 0xFF	; 255
    343e:	fe 01       	movw	r30, r28
    3440:	e9 59       	subi	r30, 0x99	; 153
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	80 81       	ld	r24, Z
    3446:	91 81       	ldd	r25, Z+1	; 0x01
    3448:	8d 93       	st	X+, r24
    344a:	9c 93       	st	X, r25
    344c:	fe 01       	movw	r30, r28
    344e:	ed 59       	subi	r30, 0x9D	; 157
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	80 81       	ld	r24, Z
    3454:	91 81       	ldd	r25, Z+1	; 0x01
    3456:	01 97       	sbiw	r24, 0x01	; 1
    3458:	f1 f7       	brne	.-4      	; 0x3456 <main+0x76a>
    345a:	fe 01       	movw	r30, r28
    345c:	ed 59       	subi	r30, 0x9D	; 157
    345e:	ff 4f       	sbci	r31, 0xFF	; 255
    3460:	91 83       	std	Z+1, r25	; 0x01
    3462:	80 83       	st	Z, r24
	        }
	       if(checkPassword(Check_Password,Password,NumberOfGigits)){
	       		LCD_Clear();
	       		LCD_voidGoToXY(LCD_LINE1,1);
	       			LCD_voidSendString("Loading");
	       			for(int i = 0 ;i<4;i++){
    3464:	de 01       	movw	r26, r28
    3466:	ae 55       	subi	r26, 0x5E	; 94
    3468:	bf 4f       	sbci	r27, 0xFF	; 255
    346a:	fe 01       	movw	r30, r28
    346c:	ee 55       	subi	r30, 0x5E	; 94
    346e:	ff 4f       	sbci	r31, 0xFF	; 255
    3470:	80 81       	ld	r24, Z
    3472:	91 81       	ldd	r25, Z+1	; 0x01
    3474:	01 96       	adiw	r24, 0x01	; 1
    3476:	11 96       	adiw	r26, 0x01	; 1
    3478:	9c 93       	st	X, r25
    347a:	8e 93       	st	-X, r24
    347c:	fe 01       	movw	r30, r28
    347e:	ee 55       	subi	r30, 0x5E	; 94
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	80 81       	ld	r24, Z
    3484:	91 81       	ldd	r25, Z+1	; 0x01
    3486:	84 30       	cpi	r24, 0x04	; 4
    3488:	91 05       	cpc	r25, r1
    348a:	0c f4       	brge	.+2      	; 0x348e <main+0x7a2>
    348c:	2b cf       	rjmp	.-426    	; 0x32e4 <main+0x5f8>
    348e:	fe 01       	movw	r30, r28
    3490:	e1 5a       	subi	r30, 0xA1	; 161
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	a8 e4       	ldi	r26, 0x48	; 72
    349a:	b3 e4       	ldi	r27, 0x43	; 67
    349c:	80 83       	st	Z, r24
    349e:	91 83       	std	Z+1, r25	; 0x01
    34a0:	a2 83       	std	Z+2, r26	; 0x02
    34a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34a4:	8e 01       	movw	r16, r28
    34a6:	05 5a       	subi	r16, 0xA5	; 165
    34a8:	1f 4f       	sbci	r17, 0xFF	; 255
    34aa:	fe 01       	movw	r30, r28
    34ac:	e1 5a       	subi	r30, 0xA1	; 161
    34ae:	ff 4f       	sbci	r31, 0xFF	; 255
    34b0:	60 81       	ld	r22, Z
    34b2:	71 81       	ldd	r23, Z+1	; 0x01
    34b4:	82 81       	ldd	r24, Z+2	; 0x02
    34b6:	93 81       	ldd	r25, Z+3	; 0x03
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	4a ef       	ldi	r20, 0xFA	; 250
    34be:	54 e4       	ldi	r21, 0x44	; 68
    34c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	f8 01       	movw	r30, r16
    34ca:	80 83       	st	Z, r24
    34cc:	91 83       	std	Z+1, r25	; 0x01
    34ce:	a2 83       	std	Z+2, r26	; 0x02
    34d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34d2:	fe 01       	movw	r30, r28
    34d4:	e5 5a       	subi	r30, 0xA5	; 165
    34d6:	ff 4f       	sbci	r31, 0xFF	; 255
    34d8:	60 81       	ld	r22, Z
    34da:	71 81       	ldd	r23, Z+1	; 0x01
    34dc:	82 81       	ldd	r24, Z+2	; 0x02
    34de:	93 81       	ldd	r25, Z+3	; 0x03
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	40 e8       	ldi	r20, 0x80	; 128
    34e6:	5f e3       	ldi	r21, 0x3F	; 63
    34e8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    34ec:	88 23       	and	r24, r24
    34ee:	44 f4       	brge	.+16     	; 0x3500 <main+0x814>
		__ticks = 1;
    34f0:	fe 01       	movw	r30, r28
    34f2:	e7 5a       	subi	r30, 0xA7	; 167
    34f4:	ff 4f       	sbci	r31, 0xFF	; 255
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	91 83       	std	Z+1, r25	; 0x01
    34fc:	80 83       	st	Z, r24
    34fe:	64 c0       	rjmp	.+200    	; 0x35c8 <main+0x8dc>
	else if (__tmp > 65535)
    3500:	fe 01       	movw	r30, r28
    3502:	e5 5a       	subi	r30, 0xA5	; 165
    3504:	ff 4f       	sbci	r31, 0xFF	; 255
    3506:	60 81       	ld	r22, Z
    3508:	71 81       	ldd	r23, Z+1	; 0x01
    350a:	82 81       	ldd	r24, Z+2	; 0x02
    350c:	93 81       	ldd	r25, Z+3	; 0x03
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	3f ef       	ldi	r19, 0xFF	; 255
    3512:	4f e7       	ldi	r20, 0x7F	; 127
    3514:	57 e4       	ldi	r21, 0x47	; 71
    3516:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    351a:	18 16       	cp	r1, r24
    351c:	0c f0       	brlt	.+2      	; 0x3520 <main+0x834>
    351e:	43 c0       	rjmp	.+134    	; 0x35a6 <main+0x8ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3520:	fe 01       	movw	r30, r28
    3522:	e1 5a       	subi	r30, 0xA1	; 161
    3524:	ff 4f       	sbci	r31, 0xFF	; 255
    3526:	60 81       	ld	r22, Z
    3528:	71 81       	ldd	r23, Z+1	; 0x01
    352a:	82 81       	ldd	r24, Z+2	; 0x02
    352c:	93 81       	ldd	r25, Z+3	; 0x03
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	40 e2       	ldi	r20, 0x20	; 32
    3534:	51 e4       	ldi	r21, 0x41	; 65
    3536:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	8e 01       	movw	r16, r28
    3540:	07 5a       	subi	r16, 0xA7	; 167
    3542:	1f 4f       	sbci	r17, 0xFF	; 255
    3544:	bc 01       	movw	r22, r24
    3546:	cd 01       	movw	r24, r26
    3548:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	f8 01       	movw	r30, r16
    3552:	91 83       	std	Z+1, r25	; 0x01
    3554:	80 83       	st	Z, r24
    3556:	1f c0       	rjmp	.+62     	; 0x3596 <main+0x8aa>
    3558:	fe 01       	movw	r30, r28
    355a:	e9 5a       	subi	r30, 0xA9	; 169
    355c:	ff 4f       	sbci	r31, 0xFF	; 255
    355e:	88 ec       	ldi	r24, 0xC8	; 200
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	91 83       	std	Z+1, r25	; 0x01
    3564:	80 83       	st	Z, r24
    3566:	fe 01       	movw	r30, r28
    3568:	e9 5a       	subi	r30, 0xA9	; 169
    356a:	ff 4f       	sbci	r31, 0xFF	; 255
    356c:	80 81       	ld	r24, Z
    356e:	91 81       	ldd	r25, Z+1	; 0x01
    3570:	01 97       	sbiw	r24, 0x01	; 1
    3572:	f1 f7       	brne	.-4      	; 0x3570 <main+0x884>
    3574:	fe 01       	movw	r30, r28
    3576:	e9 5a       	subi	r30, 0xA9	; 169
    3578:	ff 4f       	sbci	r31, 0xFF	; 255
    357a:	91 83       	std	Z+1, r25	; 0x01
    357c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    357e:	de 01       	movw	r26, r28
    3580:	a7 5a       	subi	r26, 0xA7	; 167
    3582:	bf 4f       	sbci	r27, 0xFF	; 255
    3584:	fe 01       	movw	r30, r28
    3586:	e7 5a       	subi	r30, 0xA7	; 167
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	80 81       	ld	r24, Z
    358c:	91 81       	ldd	r25, Z+1	; 0x01
    358e:	01 97       	sbiw	r24, 0x01	; 1
    3590:	11 96       	adiw	r26, 0x01	; 1
    3592:	9c 93       	st	X, r25
    3594:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3596:	fe 01       	movw	r30, r28
    3598:	e7 5a       	subi	r30, 0xA7	; 167
    359a:	ff 4f       	sbci	r31, 0xFF	; 255
    359c:	80 81       	ld	r24, Z
    359e:	91 81       	ldd	r25, Z+1	; 0x01
    35a0:	00 97       	sbiw	r24, 0x00	; 0
    35a2:	d1 f6       	brne	.-76     	; 0x3558 <main+0x86c>
    35a4:	27 c0       	rjmp	.+78     	; 0x35f4 <main+0x908>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a6:	8e 01       	movw	r16, r28
    35a8:	07 5a       	subi	r16, 0xA7	; 167
    35aa:	1f 4f       	sbci	r17, 0xFF	; 255
    35ac:	fe 01       	movw	r30, r28
    35ae:	e5 5a       	subi	r30, 0xA5	; 165
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	60 81       	ld	r22, Z
    35b4:	71 81       	ldd	r23, Z+1	; 0x01
    35b6:	82 81       	ldd	r24, Z+2	; 0x02
    35b8:	93 81       	ldd	r25, Z+3	; 0x03
    35ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	f8 01       	movw	r30, r16
    35c4:	91 83       	std	Z+1, r25	; 0x01
    35c6:	80 83       	st	Z, r24
    35c8:	de 01       	movw	r26, r28
    35ca:	ab 5a       	subi	r26, 0xAB	; 171
    35cc:	bf 4f       	sbci	r27, 0xFF	; 255
    35ce:	fe 01       	movw	r30, r28
    35d0:	e7 5a       	subi	r30, 0xA7	; 167
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	80 81       	ld	r24, Z
    35d6:	91 81       	ldd	r25, Z+1	; 0x01
    35d8:	8d 93       	st	X+, r24
    35da:	9c 93       	st	X, r25
    35dc:	fe 01       	movw	r30, r28
    35de:	eb 5a       	subi	r30, 0xAB	; 171
    35e0:	ff 4f       	sbci	r31, 0xFF	; 255
    35e2:	80 81       	ld	r24, Z
    35e4:	91 81       	ldd	r25, Z+1	; 0x01
    35e6:	01 97       	sbiw	r24, 0x01	; 1
    35e8:	f1 f7       	brne	.-4      	; 0x35e6 <main+0x8fa>
    35ea:	fe 01       	movw	r30, r28
    35ec:	eb 5a       	subi	r30, 0xAB	; 171
    35ee:	ff 4f       	sbci	r31, 0xFF	; 255
    35f0:	91 83       	std	Z+1, r25	; 0x01
    35f2:	80 83       	st	Z, r24
	       				LCD_voidGoToXY(LCD_LINE1,8+i);
	       				LCD_voidSendChar('.');
	       		_delay_ms(200);
	       	}
	       	_delay_ms(200);
	       	LCD_Clear();
    35f4:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <LCD_Clear>
	       		LCD_voidGoToXY(LCD_LINE1,0);
    35f8:	80 e0       	ldi	r24, 0x00	; 0
    35fa:	60 e0       	ldi	r22, 0x00	; 0
    35fc:	0e 94 ae 14 	call	0x295c	; 0x295c <LCD_voidGoToXY>
			LCD_voidSendString("Welcome to ");
    3600:	84 e8       	ldi	r24, 0x84	; 132
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	0e 94 2d 13 	call	0x265a	; 0x265a <LCD_voidSendString>
			LCD_voidGoToXY(LCD_LINE2,0);
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	60 e0       	ldi	r22, 0x00	; 0
    360c:	0e 94 ae 14 	call	0x295c	; 0x295c <LCD_voidGoToXY>
			LCD_voidSendString("Your Calaculator ");
    3610:	80 e9       	ldi	r24, 0x90	; 144
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	0e 94 2d 13 	call	0x265a	; 0x265a <LCD_voidSendString>
    3618:	fe 01       	movw	r30, r28
    361a:	ef 5a       	subi	r30, 0xAF	; 175
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	80 e0       	ldi	r24, 0x00	; 0
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	a6 e9       	ldi	r26, 0x96	; 150
    3624:	b3 e4       	ldi	r27, 0x43	; 67
    3626:	80 83       	st	Z, r24
    3628:	91 83       	std	Z+1, r25	; 0x01
    362a:	a2 83       	std	Z+2, r26	; 0x02
    362c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    362e:	8e 01       	movw	r16, r28
    3630:	03 5b       	subi	r16, 0xB3	; 179
    3632:	1f 4f       	sbci	r17, 0xFF	; 255
    3634:	fe 01       	movw	r30, r28
    3636:	ef 5a       	subi	r30, 0xAF	; 175
    3638:	ff 4f       	sbci	r31, 0xFF	; 255
    363a:	60 81       	ld	r22, Z
    363c:	71 81       	ldd	r23, Z+1	; 0x01
    363e:	82 81       	ldd	r24, Z+2	; 0x02
    3640:	93 81       	ldd	r25, Z+3	; 0x03
    3642:	20 e0       	ldi	r18, 0x00	; 0
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	4a ef       	ldi	r20, 0xFA	; 250
    3648:	54 e4       	ldi	r21, 0x44	; 68
    364a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	f8 01       	movw	r30, r16
    3654:	80 83       	st	Z, r24
    3656:	91 83       	std	Z+1, r25	; 0x01
    3658:	a2 83       	std	Z+2, r26	; 0x02
    365a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    365c:	fe 01       	movw	r30, r28
    365e:	e3 5b       	subi	r30, 0xB3	; 179
    3660:	ff 4f       	sbci	r31, 0xFF	; 255
    3662:	60 81       	ld	r22, Z
    3664:	71 81       	ldd	r23, Z+1	; 0x01
    3666:	82 81       	ldd	r24, Z+2	; 0x02
    3668:	93 81       	ldd	r25, Z+3	; 0x03
    366a:	20 e0       	ldi	r18, 0x00	; 0
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	40 e8       	ldi	r20, 0x80	; 128
    3670:	5f e3       	ldi	r21, 0x3F	; 63
    3672:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3676:	88 23       	and	r24, r24
    3678:	44 f4       	brge	.+16     	; 0x368a <main+0x99e>
		__ticks = 1;
    367a:	fe 01       	movw	r30, r28
    367c:	e5 5b       	subi	r30, 0xB5	; 181
    367e:	ff 4f       	sbci	r31, 0xFF	; 255
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	91 83       	std	Z+1, r25	; 0x01
    3686:	80 83       	st	Z, r24
    3688:	64 c0       	rjmp	.+200    	; 0x3752 <main+0xa66>
	else if (__tmp > 65535)
    368a:	fe 01       	movw	r30, r28
    368c:	e3 5b       	subi	r30, 0xB3	; 179
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	60 81       	ld	r22, Z
    3692:	71 81       	ldd	r23, Z+1	; 0x01
    3694:	82 81       	ldd	r24, Z+2	; 0x02
    3696:	93 81       	ldd	r25, Z+3	; 0x03
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	3f ef       	ldi	r19, 0xFF	; 255
    369c:	4f e7       	ldi	r20, 0x7F	; 127
    369e:	57 e4       	ldi	r21, 0x47	; 71
    36a0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    36a4:	18 16       	cp	r1, r24
    36a6:	0c f0       	brlt	.+2      	; 0x36aa <main+0x9be>
    36a8:	43 c0       	rjmp	.+134    	; 0x3730 <main+0xa44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36aa:	fe 01       	movw	r30, r28
    36ac:	ef 5a       	subi	r30, 0xAF	; 175
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	60 81       	ld	r22, Z
    36b2:	71 81       	ldd	r23, Z+1	; 0x01
    36b4:	82 81       	ldd	r24, Z+2	; 0x02
    36b6:	93 81       	ldd	r25, Z+3	; 0x03
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	40 e2       	ldi	r20, 0x20	; 32
    36be:	51 e4       	ldi	r21, 0x41	; 65
    36c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36c4:	dc 01       	movw	r26, r24
    36c6:	cb 01       	movw	r24, r22
    36c8:	8e 01       	movw	r16, r28
    36ca:	05 5b       	subi	r16, 0xB5	; 181
    36cc:	1f 4f       	sbci	r17, 0xFF	; 255
    36ce:	bc 01       	movw	r22, r24
    36d0:	cd 01       	movw	r24, r26
    36d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36d6:	dc 01       	movw	r26, r24
    36d8:	cb 01       	movw	r24, r22
    36da:	f8 01       	movw	r30, r16
    36dc:	91 83       	std	Z+1, r25	; 0x01
    36de:	80 83       	st	Z, r24
    36e0:	1f c0       	rjmp	.+62     	; 0x3720 <main+0xa34>
    36e2:	fe 01       	movw	r30, r28
    36e4:	e7 5b       	subi	r30, 0xB7	; 183
    36e6:	ff 4f       	sbci	r31, 0xFF	; 255
    36e8:	88 ec       	ldi	r24, 0xC8	; 200
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	91 83       	std	Z+1, r25	; 0x01
    36ee:	80 83       	st	Z, r24
    36f0:	fe 01       	movw	r30, r28
    36f2:	e7 5b       	subi	r30, 0xB7	; 183
    36f4:	ff 4f       	sbci	r31, 0xFF	; 255
    36f6:	80 81       	ld	r24, Z
    36f8:	91 81       	ldd	r25, Z+1	; 0x01
    36fa:	01 97       	sbiw	r24, 0x01	; 1
    36fc:	f1 f7       	brne	.-4      	; 0x36fa <main+0xa0e>
    36fe:	fe 01       	movw	r30, r28
    3700:	e7 5b       	subi	r30, 0xB7	; 183
    3702:	ff 4f       	sbci	r31, 0xFF	; 255
    3704:	91 83       	std	Z+1, r25	; 0x01
    3706:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3708:	de 01       	movw	r26, r28
    370a:	a5 5b       	subi	r26, 0xB5	; 181
    370c:	bf 4f       	sbci	r27, 0xFF	; 255
    370e:	fe 01       	movw	r30, r28
    3710:	e5 5b       	subi	r30, 0xB5	; 181
    3712:	ff 4f       	sbci	r31, 0xFF	; 255
    3714:	80 81       	ld	r24, Z
    3716:	91 81       	ldd	r25, Z+1	; 0x01
    3718:	01 97       	sbiw	r24, 0x01	; 1
    371a:	11 96       	adiw	r26, 0x01	; 1
    371c:	9c 93       	st	X, r25
    371e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3720:	fe 01       	movw	r30, r28
    3722:	e5 5b       	subi	r30, 0xB5	; 181
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	80 81       	ld	r24, Z
    3728:	91 81       	ldd	r25, Z+1	; 0x01
    372a:	00 97       	sbiw	r24, 0x00	; 0
    372c:	d1 f6       	brne	.-76     	; 0x36e2 <main+0x9f6>
    372e:	27 c0       	rjmp	.+78     	; 0x377e <main+0xa92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3730:	8e 01       	movw	r16, r28
    3732:	05 5b       	subi	r16, 0xB5	; 181
    3734:	1f 4f       	sbci	r17, 0xFF	; 255
    3736:	fe 01       	movw	r30, r28
    3738:	e3 5b       	subi	r30, 0xB3	; 179
    373a:	ff 4f       	sbci	r31, 0xFF	; 255
    373c:	60 81       	ld	r22, Z
    373e:	71 81       	ldd	r23, Z+1	; 0x01
    3740:	82 81       	ldd	r24, Z+2	; 0x02
    3742:	93 81       	ldd	r25, Z+3	; 0x03
    3744:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	f8 01       	movw	r30, r16
    374e:	91 83       	std	Z+1, r25	; 0x01
    3750:	80 83       	st	Z, r24
    3752:	de 01       	movw	r26, r28
    3754:	a9 5b       	subi	r26, 0xB9	; 185
    3756:	bf 4f       	sbci	r27, 0xFF	; 255
    3758:	fe 01       	movw	r30, r28
    375a:	e5 5b       	subi	r30, 0xB5	; 181
    375c:	ff 4f       	sbci	r31, 0xFF	; 255
    375e:	80 81       	ld	r24, Z
    3760:	91 81       	ldd	r25, Z+1	; 0x01
    3762:	8d 93       	st	X+, r24
    3764:	9c 93       	st	X, r25
    3766:	fe 01       	movw	r30, r28
    3768:	e9 5b       	subi	r30, 0xB9	; 185
    376a:	ff 4f       	sbci	r31, 0xFF	; 255
    376c:	80 81       	ld	r24, Z
    376e:	91 81       	ldd	r25, Z+1	; 0x01
    3770:	01 97       	sbiw	r24, 0x01	; 1
    3772:	f1 f7       	brne	.-4      	; 0x3770 <main+0xa84>
    3774:	fe 01       	movw	r30, r28
    3776:	e9 5b       	subi	r30, 0xB9	; 185
    3778:	ff 4f       	sbci	r31, 0xFF	; 255
    377a:	91 83       	std	Z+1, r25	; 0x01
    377c:	80 83       	st	Z, r24
			_delay_ms(300);
			LCD_Clear();
    377e:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <LCD_Clear>
			LCD_voidGoToXY(LCD_LINE1,0);
    3782:	80 e0       	ldi	r24, 0x00	; 0
    3784:	60 e0       	ldi	r22, 0x00	; 0
    3786:	0e 94 ae 14 	call	0x295c	; 0x295c <LCD_voidGoToXY>
			while(1){
				LCD_Clear();
    378a:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <LCD_Clear>

			counter = 0;
    378e:	fe 01       	movw	r30, r28
    3790:	ec 55       	subi	r30, 0x5C	; 92
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	10 82       	st	Z, r1
			u8 Operation=0;
    3796:	fe 01       	movw	r30, r28
    3798:	ef 55       	subi	r30, 0x5F	; 95
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	10 82       	st	Z, r1
while(1){

			do{
				ret=Keypad_u8GetKeyState(&keypadNum);
    379e:	ce 01       	movw	r24, r28
    37a0:	89 55       	subi	r24, 0x59	; 89
    37a2:	9f 4f       	sbci	r25, 0xFF	; 255
    37a4:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <Keypad_u8GetKeyState>
    37a8:	fe 01       	movw	r30, r28
    37aa:	ea 55       	subi	r30, 0x5A	; 90
    37ac:	ff 4f       	sbci	r31, 0xFF	; 255
    37ae:	80 83       	st	Z, r24
			}while(keypadNum==KEYPAD_u8_KEY_NOT_PRESSED);
    37b0:	fe 01       	movw	r30, r28
    37b2:	e9 55       	subi	r30, 0x59	; 89
    37b4:	ff 4f       	sbci	r31, 0xFF	; 255
    37b6:	80 81       	ld	r24, Z
    37b8:	8f 3f       	cpi	r24, 0xFF	; 255
    37ba:	89 f3       	breq	.-30     	; 0x379e <main+0xab2>
			if(keypadNum == '+'||keypadNum=='-'||keypadNum=='*'||keypadNum=='/'){
    37bc:	fe 01       	movw	r30, r28
    37be:	e9 55       	subi	r30, 0x59	; 89
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	80 81       	ld	r24, Z
    37c4:	8b 32       	cpi	r24, 0x2B	; 43
    37c6:	99 f0       	breq	.+38     	; 0x37ee <main+0xb02>
    37c8:	fe 01       	movw	r30, r28
    37ca:	e9 55       	subi	r30, 0x59	; 89
    37cc:	ff 4f       	sbci	r31, 0xFF	; 255
    37ce:	80 81       	ld	r24, Z
    37d0:	8d 32       	cpi	r24, 0x2D	; 45
    37d2:	69 f0       	breq	.+26     	; 0x37ee <main+0xb02>
    37d4:	fe 01       	movw	r30, r28
    37d6:	e9 55       	subi	r30, 0x59	; 89
    37d8:	ff 4f       	sbci	r31, 0xFF	; 255
    37da:	80 81       	ld	r24, Z
    37dc:	8a 32       	cpi	r24, 0x2A	; 42
    37de:	39 f0       	breq	.+14     	; 0x37ee <main+0xb02>
    37e0:	fe 01       	movw	r30, r28
    37e2:	e9 55       	subi	r30, 0x59	; 89
    37e4:	ff 4f       	sbci	r31, 0xFF	; 255
    37e6:	80 81       	ld	r24, Z
    37e8:	8f 32       	cpi	r24, 0x2F	; 47
    37ea:	09 f0       	breq	.+2      	; 0x37ee <main+0xb02>
    37ec:	a8 c0       	rjmp	.+336    	; 0x393e <main+0xc52>
				Operation = (char)keypadNum;
    37ee:	de 01       	movw	r26, r28
    37f0:	af 55       	subi	r26, 0x5F	; 95
    37f2:	bf 4f       	sbci	r27, 0xFF	; 255
    37f4:	fe 01       	movw	r30, r28
    37f6:	e9 55       	subi	r30, 0x59	; 89
    37f8:	ff 4f       	sbci	r31, 0xFF	; 255
    37fa:	80 81       	ld	r24, Z
    37fc:	8c 93       	st	X, r24
				LCD_voidGoToXY(LCD_LINE1,counter);
    37fe:	fe 01       	movw	r30, r28
    3800:	ec 55       	subi	r30, 0x5C	; 92
    3802:	ff 4f       	sbci	r31, 0xFF	; 255
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	60 81       	ld	r22, Z
    3808:	0e 94 ae 14 	call	0x295c	; 0x295c <LCD_voidGoToXY>
				LCD_voidSendChar(keypadNum);
    380c:	fe 01       	movw	r30, r28
    380e:	e9 55       	subi	r30, 0x59	; 89
    3810:	ff 4f       	sbci	r31, 0xFF	; 255
    3812:	80 81       	ld	r24, Z
    3814:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_voidSendChar>
    3818:	fe 01       	movw	r30, r28
    381a:	ed 5b       	subi	r30, 0xBD	; 189
    381c:	ff 4f       	sbci	r31, 0xFF	; 255
    381e:	80 e0       	ldi	r24, 0x00	; 0
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	a8 e4       	ldi	r26, 0x48	; 72
    3824:	b3 e4       	ldi	r27, 0x43	; 67
    3826:	80 83       	st	Z, r24
    3828:	91 83       	std	Z+1, r25	; 0x01
    382a:	a2 83       	std	Z+2, r26	; 0x02
    382c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    382e:	8e 01       	movw	r16, r28
    3830:	01 5c       	subi	r16, 0xC1	; 193
    3832:	1f 4f       	sbci	r17, 0xFF	; 255
    3834:	fe 01       	movw	r30, r28
    3836:	ed 5b       	subi	r30, 0xBD	; 189
    3838:	ff 4f       	sbci	r31, 0xFF	; 255
    383a:	60 81       	ld	r22, Z
    383c:	71 81       	ldd	r23, Z+1	; 0x01
    383e:	82 81       	ldd	r24, Z+2	; 0x02
    3840:	93 81       	ldd	r25, Z+3	; 0x03
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	4a ef       	ldi	r20, 0xFA	; 250
    3848:	54 e4       	ldi	r21, 0x44	; 68
    384a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    384e:	dc 01       	movw	r26, r24
    3850:	cb 01       	movw	r24, r22
    3852:	f8 01       	movw	r30, r16
    3854:	80 83       	st	Z, r24
    3856:	91 83       	std	Z+1, r25	; 0x01
    3858:	a2 83       	std	Z+2, r26	; 0x02
    385a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    385c:	fe 01       	movw	r30, r28
    385e:	ff 96       	adiw	r30, 0x3f	; 63
    3860:	60 81       	ld	r22, Z
    3862:	71 81       	ldd	r23, Z+1	; 0x01
    3864:	82 81       	ldd	r24, Z+2	; 0x02
    3866:	93 81       	ldd	r25, Z+3	; 0x03
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	40 e8       	ldi	r20, 0x80	; 128
    386e:	5f e3       	ldi	r21, 0x3F	; 63
    3870:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3874:	88 23       	and	r24, r24
    3876:	2c f4       	brge	.+10     	; 0x3882 <main+0xb96>
		__ticks = 1;
    3878:	81 e0       	ldi	r24, 0x01	; 1
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	9e af       	std	Y+62, r25	; 0x3e
    387e:	8d af       	std	Y+61, r24	; 0x3d
    3880:	46 c0       	rjmp	.+140    	; 0x390e <main+0xc22>
	else if (__tmp > 65535)
    3882:	fe 01       	movw	r30, r28
    3884:	ff 96       	adiw	r30, 0x3f	; 63
    3886:	60 81       	ld	r22, Z
    3888:	71 81       	ldd	r23, Z+1	; 0x01
    388a:	82 81       	ldd	r24, Z+2	; 0x02
    388c:	93 81       	ldd	r25, Z+3	; 0x03
    388e:	20 e0       	ldi	r18, 0x00	; 0
    3890:	3f ef       	ldi	r19, 0xFF	; 255
    3892:	4f e7       	ldi	r20, 0x7F	; 127
    3894:	57 e4       	ldi	r21, 0x47	; 71
    3896:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    389a:	18 16       	cp	r1, r24
    389c:	64 f5       	brge	.+88     	; 0x38f6 <main+0xc0a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    389e:	fe 01       	movw	r30, r28
    38a0:	ed 5b       	subi	r30, 0xBD	; 189
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	60 81       	ld	r22, Z
    38a6:	71 81       	ldd	r23, Z+1	; 0x01
    38a8:	82 81       	ldd	r24, Z+2	; 0x02
    38aa:	93 81       	ldd	r25, Z+3	; 0x03
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	40 e2       	ldi	r20, 0x20	; 32
    38b2:	51 e4       	ldi	r21, 0x41	; 65
    38b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38b8:	dc 01       	movw	r26, r24
    38ba:	cb 01       	movw	r24, r22
    38bc:	bc 01       	movw	r22, r24
    38be:	cd 01       	movw	r24, r26
    38c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38c4:	dc 01       	movw	r26, r24
    38c6:	cb 01       	movw	r24, r22
    38c8:	9e af       	std	Y+62, r25	; 0x3e
    38ca:	8d af       	std	Y+61, r24	; 0x3d
    38cc:	0f c0       	rjmp	.+30     	; 0x38ec <main+0xc00>
    38ce:	88 ec       	ldi	r24, 0xC8	; 200
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	9c af       	std	Y+60, r25	; 0x3c
    38d4:	8b af       	std	Y+59, r24	; 0x3b
    38d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    38d8:	9c ad       	ldd	r25, Y+60	; 0x3c
    38da:	01 97       	sbiw	r24, 0x01	; 1
    38dc:	f1 f7       	brne	.-4      	; 0x38da <main+0xbee>
    38de:	9c af       	std	Y+60, r25	; 0x3c
    38e0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    38e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    38e6:	01 97       	sbiw	r24, 0x01	; 1
    38e8:	9e af       	std	Y+62, r25	; 0x3e
    38ea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    38ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    38f0:	00 97       	sbiw	r24, 0x00	; 0
    38f2:	69 f7       	brne	.-38     	; 0x38ce <main+0xbe2>
    38f4:	16 c0       	rjmp	.+44     	; 0x3922 <main+0xc36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f6:	fe 01       	movw	r30, r28
    38f8:	ff 96       	adiw	r30, 0x3f	; 63
    38fa:	60 81       	ld	r22, Z
    38fc:	71 81       	ldd	r23, Z+1	; 0x01
    38fe:	82 81       	ldd	r24, Z+2	; 0x02
    3900:	93 81       	ldd	r25, Z+3	; 0x03
    3902:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3906:	dc 01       	movw	r26, r24
    3908:	cb 01       	movw	r24, r22
    390a:	9e af       	std	Y+62, r25	; 0x3e
    390c:	8d af       	std	Y+61, r24	; 0x3d
    390e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3910:	9e ad       	ldd	r25, Y+62	; 0x3e
    3912:	9a af       	std	Y+58, r25	; 0x3a
    3914:	89 af       	std	Y+57, r24	; 0x39
    3916:	89 ad       	ldd	r24, Y+57	; 0x39
    3918:	9a ad       	ldd	r25, Y+58	; 0x3a
    391a:	01 97       	sbiw	r24, 0x01	; 1
    391c:	f1 f7       	brne	.-4      	; 0x391a <main+0xc2e>
    391e:	9a af       	std	Y+58, r25	; 0x3a
    3920:	89 af       	std	Y+57, r24	; 0x39

				LCD_voidGoToXY(LCD_LINE1,counter);
				LCD_voidSendChar(keypadNum);
				counter++;
		}
    u8 counter2 = counter+1;
    3922:	de 01       	movw	r26, r28
    3924:	a0 56       	subi	r26, 0x60	; 96
    3926:	bf 4f       	sbci	r27, 0xFF	; 255
    3928:	fe 01       	movw	r30, r28
    392a:	ec 55       	subi	r30, 0x5C	; 92
    392c:	ff 4f       	sbci	r31, 0xFF	; 255
    392e:	80 81       	ld	r24, Z
    3930:	8f 5f       	subi	r24, 0xFF	; 255
    3932:	8c 93       	st	X, r24
    u8 counter3 = 0;
    3934:	fe 01       	movw	r30, r28
    3936:	e1 56       	subi	r30, 0x61	; 97
    3938:	ff 4f       	sbci	r31, 0xFF	; 255
    393a:	10 82       	st	Z, r1
    393c:	2a c0       	rjmp	.+84     	; 0x3992 <main+0xca6>
				LCD_voidGoToXY(LCD_LINE1,counter);
				LCD_voidSendChar(keypadNum);
				_delay_ms(200);
				break;
			}
			FirstNum[counter]=(int)(keypadNum-48);
    393e:	fe 01       	movw	r30, r28
    3940:	ec 55       	subi	r30, 0x5C	; 92
    3942:	ff 4f       	sbci	r31, 0xFF	; 255
    3944:	80 81       	ld	r24, Z
    3946:	28 2f       	mov	r18, r24
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	fe 01       	movw	r30, r28
    394c:	e9 55       	subi	r30, 0x59	; 89
    394e:	ff 4f       	sbci	r31, 0xFF	; 255
    3950:	80 81       	ld	r24, Z
    3952:	48 2f       	mov	r20, r24
    3954:	40 53       	subi	r20, 0x30	; 48
    3956:	ce 01       	movw	r24, r28
    3958:	88 53       	subi	r24, 0x38	; 56
    395a:	9f 4f       	sbci	r25, 0xFF	; 255
    395c:	fc 01       	movw	r30, r24
    395e:	e2 0f       	add	r30, r18
    3960:	f3 1f       	adc	r31, r19
    3962:	40 83       	st	Z, r20

				LCD_voidGoToXY(LCD_LINE1,counter);
    3964:	fe 01       	movw	r30, r28
    3966:	ec 55       	subi	r30, 0x5C	; 92
    3968:	ff 4f       	sbci	r31, 0xFF	; 255
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	60 81       	ld	r22, Z
    396e:	0e 94 ae 14 	call	0x295c	; 0x295c <LCD_voidGoToXY>
				LCD_voidSendChar(keypadNum);
    3972:	fe 01       	movw	r30, r28
    3974:	e9 55       	subi	r30, 0x59	; 89
    3976:	ff 4f       	sbci	r31, 0xFF	; 255
    3978:	80 81       	ld	r24, Z
    397a:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_voidSendChar>
				counter++;
    397e:	de 01       	movw	r26, r28
    3980:	ac 55       	subi	r26, 0x5C	; 92
    3982:	bf 4f       	sbci	r27, 0xFF	; 255
    3984:	fe 01       	movw	r30, r28
    3986:	ec 55       	subi	r30, 0x5C	; 92
    3988:	ff 4f       	sbci	r31, 0xFF	; 255
    398a:	80 81       	ld	r24, Z
    398c:	8f 5f       	subi	r24, 0xFF	; 255
    398e:	8c 93       	st	X, r24
    3990:	06 cf       	rjmp	.-500    	; 0x379e <main+0xab2>
    u8 counter2 = counter+1;
    u8 counter3 = 0;
	while(1){

					do{
						ret=Keypad_u8GetKeyState(&keypadNum);
    3992:	ce 01       	movw	r24, r28
    3994:	89 55       	subi	r24, 0x59	; 89
    3996:	9f 4f       	sbci	r25, 0xFF	; 255
    3998:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <Keypad_u8GetKeyState>
    399c:	fe 01       	movw	r30, r28
    399e:	ea 55       	subi	r30, 0x5A	; 90
    39a0:	ff 4f       	sbci	r31, 0xFF	; 255
    39a2:	80 83       	st	Z, r24
					}while(keypadNum==KEYPAD_u8_KEY_NOT_PRESSED);
    39a4:	fe 01       	movw	r30, r28
    39a6:	e9 55       	subi	r30, 0x59	; 89
    39a8:	ff 4f       	sbci	r31, 0xFF	; 255
    39aa:	80 81       	ld	r24, Z
    39ac:	8f 3f       	cpi	r24, 0xFF	; 255
    39ae:	89 f3       	breq	.-30     	; 0x3992 <main+0xca6>
					if(keypadNum == '='){
    39b0:	fe 01       	movw	r30, r28
    39b2:	e9 55       	subi	r30, 0x59	; 89
    39b4:	ff 4f       	sbci	r31, 0xFF	; 255
    39b6:	80 81       	ld	r24, Z
    39b8:	8d 33       	cpi	r24, 0x3D	; 61
    39ba:	09 f0       	breq	.+2      	; 0x39be <main+0xcd2>
    39bc:	93 c0       	rjmp	.+294    	; 0x3ae4 <main+0xdf8>

						LCD_voidGoToXY(LCD_LINE1,counter2+1);
    39be:	fe 01       	movw	r30, r28
    39c0:	e0 56       	subi	r30, 0x60	; 96
    39c2:	ff 4f       	sbci	r31, 0xFF	; 255
    39c4:	80 81       	ld	r24, Z
    39c6:	98 2f       	mov	r25, r24
    39c8:	9f 5f       	subi	r25, 0xFF	; 255
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	69 2f       	mov	r22, r25
    39ce:	0e 94 ae 14 	call	0x295c	; 0x295c <LCD_voidGoToXY>
						LCD_voidSendChar(keypadNum);
    39d2:	fe 01       	movw	r30, r28
    39d4:	e9 55       	subi	r30, 0x59	; 89
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	80 81       	ld	r24, Z
    39da:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_voidSendChar>
    39de:	80 e0       	ldi	r24, 0x00	; 0
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	a8 e4       	ldi	r26, 0x48	; 72
    39e4:	b3 e4       	ldi	r27, 0x43	; 67
    39e6:	8d ab       	std	Y+53, r24	; 0x35
    39e8:	9e ab       	std	Y+54, r25	; 0x36
    39ea:	af ab       	std	Y+55, r26	; 0x37
    39ec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ee:	6d a9       	ldd	r22, Y+53	; 0x35
    39f0:	7e a9       	ldd	r23, Y+54	; 0x36
    39f2:	8f a9       	ldd	r24, Y+55	; 0x37
    39f4:	98 ad       	ldd	r25, Y+56	; 0x38
    39f6:	20 e0       	ldi	r18, 0x00	; 0
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	4a ef       	ldi	r20, 0xFA	; 250
    39fc:	54 e4       	ldi	r21, 0x44	; 68
    39fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	89 ab       	std	Y+49, r24	; 0x31
    3a08:	9a ab       	std	Y+50, r25	; 0x32
    3a0a:	ab ab       	std	Y+51, r26	; 0x33
    3a0c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a0e:	69 a9       	ldd	r22, Y+49	; 0x31
    3a10:	7a a9       	ldd	r23, Y+50	; 0x32
    3a12:	8b a9       	ldd	r24, Y+51	; 0x33
    3a14:	9c a9       	ldd	r25, Y+52	; 0x34
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	30 e0       	ldi	r19, 0x00	; 0
    3a1a:	40 e8       	ldi	r20, 0x80	; 128
    3a1c:	5f e3       	ldi	r21, 0x3F	; 63
    3a1e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3a22:	88 23       	and	r24, r24
    3a24:	2c f4       	brge	.+10     	; 0x3a30 <main+0xd44>
		__ticks = 1;
    3a26:	81 e0       	ldi	r24, 0x01	; 1
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	98 ab       	std	Y+48, r25	; 0x30
    3a2c:	8f a7       	std	Y+47, r24	; 0x2f
    3a2e:	3f c0       	rjmp	.+126    	; 0x3aae <main+0xdc2>
	else if (__tmp > 65535)
    3a30:	69 a9       	ldd	r22, Y+49	; 0x31
    3a32:	7a a9       	ldd	r23, Y+50	; 0x32
    3a34:	8b a9       	ldd	r24, Y+51	; 0x33
    3a36:	9c a9       	ldd	r25, Y+52	; 0x34
    3a38:	20 e0       	ldi	r18, 0x00	; 0
    3a3a:	3f ef       	ldi	r19, 0xFF	; 255
    3a3c:	4f e7       	ldi	r20, 0x7F	; 127
    3a3e:	57 e4       	ldi	r21, 0x47	; 71
    3a40:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3a44:	18 16       	cp	r1, r24
    3a46:	4c f5       	brge	.+82     	; 0x3a9a <main+0xdae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a48:	6d a9       	ldd	r22, Y+53	; 0x35
    3a4a:	7e a9       	ldd	r23, Y+54	; 0x36
    3a4c:	8f a9       	ldd	r24, Y+55	; 0x37
    3a4e:	98 ad       	ldd	r25, Y+56	; 0x38
    3a50:	20 e0       	ldi	r18, 0x00	; 0
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	40 e2       	ldi	r20, 0x20	; 32
    3a56:	51 e4       	ldi	r21, 0x41	; 65
    3a58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a5c:	dc 01       	movw	r26, r24
    3a5e:	cb 01       	movw	r24, r22
    3a60:	bc 01       	movw	r22, r24
    3a62:	cd 01       	movw	r24, r26
    3a64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a68:	dc 01       	movw	r26, r24
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	98 ab       	std	Y+48, r25	; 0x30
    3a6e:	8f a7       	std	Y+47, r24	; 0x2f
    3a70:	0f c0       	rjmp	.+30     	; 0x3a90 <main+0xda4>
    3a72:	88 ec       	ldi	r24, 0xC8	; 200
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	9e a7       	std	Y+46, r25	; 0x2e
    3a78:	8d a7       	std	Y+45, r24	; 0x2d
    3a7a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a7c:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a7e:	01 97       	sbiw	r24, 0x01	; 1
    3a80:	f1 f7       	brne	.-4      	; 0x3a7e <main+0xd92>
    3a82:	9e a7       	std	Y+46, r25	; 0x2e
    3a84:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a86:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a88:	98 a9       	ldd	r25, Y+48	; 0x30
    3a8a:	01 97       	sbiw	r24, 0x01	; 1
    3a8c:	98 ab       	std	Y+48, r25	; 0x30
    3a8e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a90:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a92:	98 a9       	ldd	r25, Y+48	; 0x30
    3a94:	00 97       	sbiw	r24, 0x00	; 0
    3a96:	69 f7       	brne	.-38     	; 0x3a72 <main+0xd86>
    3a98:	14 c0       	rjmp	.+40     	; 0x3ac2 <main+0xdd6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a9a:	69 a9       	ldd	r22, Y+49	; 0x31
    3a9c:	7a a9       	ldd	r23, Y+50	; 0x32
    3a9e:	8b a9       	ldd	r24, Y+51	; 0x33
    3aa0:	9c a9       	ldd	r25, Y+52	; 0x34
    3aa2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3aa6:	dc 01       	movw	r26, r24
    3aa8:	cb 01       	movw	r24, r22
    3aaa:	98 ab       	std	Y+48, r25	; 0x30
    3aac:	8f a7       	std	Y+47, r24	; 0x2f
    3aae:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ab0:	98 a9       	ldd	r25, Y+48	; 0x30
    3ab2:	9c a7       	std	Y+44, r25	; 0x2c
    3ab4:	8b a7       	std	Y+43, r24	; 0x2b
    3ab6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ab8:	9c a5       	ldd	r25, Y+44	; 0x2c
    3aba:	01 97       	sbiw	r24, 0x01	; 1
    3abc:	f1 f7       	brne	.-4      	; 0x3aba <main+0xdce>
    3abe:	9c a7       	std	Y+44, r25	; 0x2c
    3ac0:	8b a7       	std	Y+43, r24	; 0x2b
	       					LCD_voidGoToXY(LCD_LINE1,counter2);
	       					LCD_voidSendChar(keypadNum);
	       					counter2++;
	       				    counter3++;
	       				}
	        LCD_voidGoToXY(LCD_LINE1,counter2+3);
    3ac2:	fe 01       	movw	r30, r28
    3ac4:	e0 56       	subi	r30, 0x60	; 96
    3ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac8:	80 81       	ld	r24, Z
    3aca:	98 2f       	mov	r25, r24
    3acc:	9d 5f       	subi	r25, 0xFD	; 253
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	69 2f       	mov	r22, r25
    3ad2:	0e 94 ae 14 	call	0x295c	; 0x295c <LCD_voidGoToXY>

	        if(Operation=='+'){
    3ad6:	fe 01       	movw	r30, r28
    3ad8:	ef 55       	subi	r30, 0x5F	; 95
    3ada:	ff 4f       	sbci	r31, 0xFF	; 255
    3adc:	80 81       	ld	r24, Z
    3ade:	8b 32       	cpi	r24, 0x2B	; 43
    3ae0:	a1 f1       	breq	.+104    	; 0x3b4a <main+0xe5e>
    3ae2:	4b c0       	rjmp	.+150    	; 0x3b7a <main+0xe8e>
						LCD_voidGoToXY(LCD_LINE1,counter2+1);
						LCD_voidSendChar(keypadNum);
						_delay_ms(200);
						break;
	       					}
	       					SecondNum[counter3]=(int)(keypadNum-48);
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	e1 56       	subi	r30, 0x61	; 97
    3ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aea:	80 81       	ld	r24, Z
    3aec:	28 2f       	mov	r18, r24
    3aee:	30 e0       	ldi	r19, 0x00	; 0
    3af0:	fe 01       	movw	r30, r28
    3af2:	e9 55       	subi	r30, 0x59	; 89
    3af4:	ff 4f       	sbci	r31, 0xFF	; 255
    3af6:	80 81       	ld	r24, Z
    3af8:	48 2f       	mov	r20, r24
    3afa:	40 53       	subi	r20, 0x30	; 48
    3afc:	ce 01       	movw	r24, r28
    3afe:	84 53       	subi	r24, 0x34	; 52
    3b00:	9f 4f       	sbci	r25, 0xFF	; 255
    3b02:	fc 01       	movw	r30, r24
    3b04:	e2 0f       	add	r30, r18
    3b06:	f3 1f       	adc	r31, r19
    3b08:	40 83       	st	Z, r20

	       					LCD_voidGoToXY(LCD_LINE1,counter2);
    3b0a:	fe 01       	movw	r30, r28
    3b0c:	e0 56       	subi	r30, 0x60	; 96
    3b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	60 81       	ld	r22, Z
    3b14:	0e 94 ae 14 	call	0x295c	; 0x295c <LCD_voidGoToXY>
	       					LCD_voidSendChar(keypadNum);
    3b18:	fe 01       	movw	r30, r28
    3b1a:	e9 55       	subi	r30, 0x59	; 89
    3b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1e:	80 81       	ld	r24, Z
    3b20:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_voidSendChar>
	       					counter2++;
    3b24:	de 01       	movw	r26, r28
    3b26:	a0 56       	subi	r26, 0x60	; 96
    3b28:	bf 4f       	sbci	r27, 0xFF	; 255
    3b2a:	fe 01       	movw	r30, r28
    3b2c:	e0 56       	subi	r30, 0x60	; 96
    3b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b30:	80 81       	ld	r24, Z
    3b32:	8f 5f       	subi	r24, 0xFF	; 255
    3b34:	8c 93       	st	X, r24
	       				    counter3++;
    3b36:	de 01       	movw	r26, r28
    3b38:	a1 56       	subi	r26, 0x61	; 97
    3b3a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b3c:	fe 01       	movw	r30, r28
    3b3e:	e1 56       	subi	r30, 0x61	; 97
    3b40:	ff 4f       	sbci	r31, 0xFF	; 255
    3b42:	80 81       	ld	r24, Z
    3b44:	8f 5f       	subi	r24, 0xFF	; 255
    3b46:	8c 93       	st	X, r24
    3b48:	24 cf       	rjmp	.-440    	; 0x3992 <main+0xca6>
	       				}
	        LCD_voidGoToXY(LCD_LINE1,counter2+3);

	        if(Operation=='+'){

	        	LCD_voidSendNumber((u32)calcSum(FirstNum,SecondNum,counter,counter3)) ;
    3b4a:	ce 01       	movw	r24, r28
    3b4c:	88 53       	subi	r24, 0x38	; 56
    3b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b50:	9e 01       	movw	r18, r28
    3b52:	24 53       	subi	r18, 0x34	; 52
    3b54:	3f 4f       	sbci	r19, 0xFF	; 255
    3b56:	fe 01       	movw	r30, r28
    3b58:	ec 55       	subi	r30, 0x5C	; 92
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	de 01       	movw	r26, r28
    3b5e:	a1 56       	subi	r26, 0x61	; 97
    3b60:	bf 4f       	sbci	r27, 0xFF	; 255
    3b62:	b9 01       	movw	r22, r18
    3b64:	40 81       	ld	r20, Z
    3b66:	2c 91       	ld	r18, X
    3b68:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <calcSum>
    3b6c:	dc 01       	movw	r26, r24
    3b6e:	cb 01       	movw	r24, r22
    3b70:	bc 01       	movw	r22, r24
    3b72:	cd 01       	movw	r24, r26
    3b74:	0e 94 c5 13 	call	0x278a	; 0x278a <LCD_voidSendNumber>
    3b78:	78 c0       	rjmp	.+240    	; 0x3c6a <main+0xf7e>
	        }
	        else if (Operation=='-'){
    3b7a:	fe 01       	movw	r30, r28
    3b7c:	ef 55       	subi	r30, 0x5F	; 95
    3b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b80:	80 81       	ld	r24, Z
    3b82:	8d 32       	cpi	r24, 0x2D	; 45
    3b84:	c1 f4       	brne	.+48     	; 0x3bb6 <main+0xeca>
	        	LCD_voidSendNumber((u32)calcSub(FirstNum,SecondNum,counter,counter3)) ;
    3b86:	ce 01       	movw	r24, r28
    3b88:	88 53       	subi	r24, 0x38	; 56
    3b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b8c:	9e 01       	movw	r18, r28
    3b8e:	24 53       	subi	r18, 0x34	; 52
    3b90:	3f 4f       	sbci	r19, 0xFF	; 255
    3b92:	fe 01       	movw	r30, r28
    3b94:	ec 55       	subi	r30, 0x5C	; 92
    3b96:	ff 4f       	sbci	r31, 0xFF	; 255
    3b98:	de 01       	movw	r26, r28
    3b9a:	a1 56       	subi	r26, 0x61	; 97
    3b9c:	bf 4f       	sbci	r27, 0xFF	; 255
    3b9e:	b9 01       	movw	r22, r18
    3ba0:	40 81       	ld	r20, Z
    3ba2:	2c 91       	ld	r18, X
    3ba4:	0e 94 82 20 	call	0x4104	; 0x4104 <calcSub>
    3ba8:	dc 01       	movw	r26, r24
    3baa:	cb 01       	movw	r24, r22
    3bac:	bc 01       	movw	r22, r24
    3bae:	cd 01       	movw	r24, r26
    3bb0:	0e 94 c5 13 	call	0x278a	; 0x278a <LCD_voidSendNumber>
    3bb4:	5a c0       	rjmp	.+180    	; 0x3c6a <main+0xf7e>
	        }
	        else if (Operation=='*'){
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	ef 55       	subi	r30, 0x5F	; 95
    3bba:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbc:	80 81       	ld	r24, Z
    3bbe:	8a 32       	cpi	r24, 0x2A	; 42
    3bc0:	c1 f4       	brne	.+48     	; 0x3bf2 <main+0xf06>
	        		LCD_voidSendNumber((u32)calcMult(FirstNum,SecondNum,counter,counter3)) ;
    3bc2:	ce 01       	movw	r24, r28
    3bc4:	88 53       	subi	r24, 0x38	; 56
    3bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc8:	9e 01       	movw	r18, r28
    3bca:	24 53       	subi	r18, 0x34	; 52
    3bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    3bce:	fe 01       	movw	r30, r28
    3bd0:	ec 55       	subi	r30, 0x5C	; 92
    3bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd4:	de 01       	movw	r26, r28
    3bd6:	a1 56       	subi	r26, 0x61	; 97
    3bd8:	bf 4f       	sbci	r27, 0xFF	; 255
    3bda:	b9 01       	movw	r22, r18
    3bdc:	40 81       	ld	r20, Z
    3bde:	2c 91       	ld	r18, X
    3be0:	0e 94 10 21 	call	0x4220	; 0x4220 <calcMult>
    3be4:	dc 01       	movw	r26, r24
    3be6:	cb 01       	movw	r24, r22
    3be8:	bc 01       	movw	r22, r24
    3bea:	cd 01       	movw	r24, r26
    3bec:	0e 94 c5 13 	call	0x278a	; 0x278a <LCD_voidSendNumber>
    3bf0:	3c c0       	rjmp	.+120    	; 0x3c6a <main+0xf7e>
	        	}
	        else if (Operation=='/'){
    3bf2:	fe 01       	movw	r30, r28
    3bf4:	ef 55       	subi	r30, 0x5F	; 95
    3bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf8:	80 81       	ld	r24, Z
    3bfa:	8f 32       	cpi	r24, 0x2F	; 47
    3bfc:	b1 f5       	brne	.+108    	; 0x3c6a <main+0xf7e>
	        	u32 ret = calcDivision(FirstNum,SecondNum,counter,counter3);
    3bfe:	ce 01       	movw	r24, r28
    3c00:	88 53       	subi	r24, 0x38	; 56
    3c02:	9f 4f       	sbci	r25, 0xFF	; 255
    3c04:	9e 01       	movw	r18, r28
    3c06:	24 53       	subi	r18, 0x34	; 52
    3c08:	3f 4f       	sbci	r19, 0xFF	; 255
    3c0a:	fe 01       	movw	r30, r28
    3c0c:	ec 55       	subi	r30, 0x5C	; 92
    3c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c10:	de 01       	movw	r26, r28
    3c12:	a1 56       	subi	r26, 0x61	; 97
    3c14:	bf 4f       	sbci	r27, 0xFF	; 255
    3c16:	b9 01       	movw	r22, r18
    3c18:	40 81       	ld	r20, Z
    3c1a:	2c 91       	ld	r18, X
    3c1c:	0e 94 a2 21 	call	0x4344	; 0x4344 <calcDivision>
    3c20:	dc 01       	movw	r26, r24
    3c22:	cb 01       	movw	r24, r22
    3c24:	fe 01       	movw	r30, r28
    3c26:	e5 56       	subi	r30, 0x65	; 101
    3c28:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2a:	80 83       	st	Z, r24
    3c2c:	91 83       	std	Z+1, r25	; 0x01
    3c2e:	a2 83       	std	Z+2, r26	; 0x02
    3c30:	b3 83       	std	Z+3, r27	; 0x03
	        	if(ret==2){
    3c32:	fe 01       	movw	r30, r28
    3c34:	e5 56       	subi	r30, 0x65	; 101
    3c36:	ff 4f       	sbci	r31, 0xFF	; 255
    3c38:	80 81       	ld	r24, Z
    3c3a:	91 81       	ldd	r25, Z+1	; 0x01
    3c3c:	a2 81       	ldd	r26, Z+2	; 0x02
    3c3e:	b3 81       	ldd	r27, Z+3	; 0x03
    3c40:	82 30       	cpi	r24, 0x02	; 2
    3c42:	91 05       	cpc	r25, r1
    3c44:	a1 05       	cpc	r26, r1
    3c46:	b1 05       	cpc	r27, r1
    3c48:	29 f4       	brne	.+10     	; 0x3c54 <main+0xf68>
	        		LCD_voidSendString("Infinity");
    3c4a:	82 ea       	ldi	r24, 0xA2	; 162
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	0e 94 2d 13 	call	0x265a	; 0x265a <LCD_voidSendString>
    3c52:	0b c0       	rjmp	.+22     	; 0x3c6a <main+0xf7e>
	        	}
	        	else{
	        		LCD_voidSendNumber((u32)ret) ;
    3c54:	fe 01       	movw	r30, r28
    3c56:	e5 56       	subi	r30, 0x65	; 101
    3c58:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5a:	80 81       	ld	r24, Z
    3c5c:	91 81       	ldd	r25, Z+1	; 0x01
    3c5e:	a2 81       	ldd	r26, Z+2	; 0x02
    3c60:	b3 81       	ldd	r27, Z+3	; 0x03
    3c62:	bc 01       	movw	r22, r24
    3c64:	cd 01       	movw	r24, r26
    3c66:	0e 94 c5 13 	call	0x278a	; 0x278a <LCD_voidSendNumber>
    3c6a:	80 e0       	ldi	r24, 0x00	; 0
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	aa ef       	ldi	r26, 0xFA	; 250
    3c70:	b4 e4       	ldi	r27, 0x44	; 68
    3c72:	8f a3       	std	Y+39, r24	; 0x27
    3c74:	98 a7       	std	Y+40, r25	; 0x28
    3c76:	a9 a7       	std	Y+41, r26	; 0x29
    3c78:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c7a:	6f a1       	ldd	r22, Y+39	; 0x27
    3c7c:	78 a5       	ldd	r23, Y+40	; 0x28
    3c7e:	89 a5       	ldd	r24, Y+41	; 0x29
    3c80:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c82:	20 e0       	ldi	r18, 0x00	; 0
    3c84:	30 e0       	ldi	r19, 0x00	; 0
    3c86:	4a ef       	ldi	r20, 0xFA	; 250
    3c88:	54 e4       	ldi	r21, 0x44	; 68
    3c8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c8e:	dc 01       	movw	r26, r24
    3c90:	cb 01       	movw	r24, r22
    3c92:	8b a3       	std	Y+35, r24	; 0x23
    3c94:	9c a3       	std	Y+36, r25	; 0x24
    3c96:	ad a3       	std	Y+37, r26	; 0x25
    3c98:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3c9a:	6b a1       	ldd	r22, Y+35	; 0x23
    3c9c:	7c a1       	ldd	r23, Y+36	; 0x24
    3c9e:	8d a1       	ldd	r24, Y+37	; 0x25
    3ca0:	9e a1       	ldd	r25, Y+38	; 0x26
    3ca2:	20 e0       	ldi	r18, 0x00	; 0
    3ca4:	30 e0       	ldi	r19, 0x00	; 0
    3ca6:	40 e8       	ldi	r20, 0x80	; 128
    3ca8:	5f e3       	ldi	r21, 0x3F	; 63
    3caa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3cae:	88 23       	and	r24, r24
    3cb0:	2c f4       	brge	.+10     	; 0x3cbc <main+0xfd0>
		__ticks = 1;
    3cb2:	81 e0       	ldi	r24, 0x01	; 1
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	9a a3       	std	Y+34, r25	; 0x22
    3cb8:	89 a3       	std	Y+33, r24	; 0x21
    3cba:	3f c0       	rjmp	.+126    	; 0x3d3a <main+0x104e>
	else if (__tmp > 65535)
    3cbc:	6b a1       	ldd	r22, Y+35	; 0x23
    3cbe:	7c a1       	ldd	r23, Y+36	; 0x24
    3cc0:	8d a1       	ldd	r24, Y+37	; 0x25
    3cc2:	9e a1       	ldd	r25, Y+38	; 0x26
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	3f ef       	ldi	r19, 0xFF	; 255
    3cc8:	4f e7       	ldi	r20, 0x7F	; 127
    3cca:	57 e4       	ldi	r21, 0x47	; 71
    3ccc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3cd0:	18 16       	cp	r1, r24
    3cd2:	4c f5       	brge	.+82     	; 0x3d26 <main+0x103a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cd4:	6f a1       	ldd	r22, Y+39	; 0x27
    3cd6:	78 a5       	ldd	r23, Y+40	; 0x28
    3cd8:	89 a5       	ldd	r24, Y+41	; 0x29
    3cda:	9a a5       	ldd	r25, Y+42	; 0x2a
    3cdc:	20 e0       	ldi	r18, 0x00	; 0
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	40 e2       	ldi	r20, 0x20	; 32
    3ce2:	51 e4       	ldi	r21, 0x41	; 65
    3ce4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ce8:	dc 01       	movw	r26, r24
    3cea:	cb 01       	movw	r24, r22
    3cec:	bc 01       	movw	r22, r24
    3cee:	cd 01       	movw	r24, r26
    3cf0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	9a a3       	std	Y+34, r25	; 0x22
    3cfa:	89 a3       	std	Y+33, r24	; 0x21
    3cfc:	0f c0       	rjmp	.+30     	; 0x3d1c <main+0x1030>
    3cfe:	88 ec       	ldi	r24, 0xC8	; 200
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	98 a3       	std	Y+32, r25	; 0x20
    3d04:	8f 8f       	std	Y+31, r24	; 0x1f
    3d06:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d08:	98 a1       	ldd	r25, Y+32	; 0x20
    3d0a:	01 97       	sbiw	r24, 0x01	; 1
    3d0c:	f1 f7       	brne	.-4      	; 0x3d0a <main+0x101e>
    3d0e:	98 a3       	std	Y+32, r25	; 0x20
    3d10:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d12:	89 a1       	ldd	r24, Y+33	; 0x21
    3d14:	9a a1       	ldd	r25, Y+34	; 0x22
    3d16:	01 97       	sbiw	r24, 0x01	; 1
    3d18:	9a a3       	std	Y+34, r25	; 0x22
    3d1a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d1c:	89 a1       	ldd	r24, Y+33	; 0x21
    3d1e:	9a a1       	ldd	r25, Y+34	; 0x22
    3d20:	00 97       	sbiw	r24, 0x00	; 0
    3d22:	69 f7       	brne	.-38     	; 0x3cfe <main+0x1012>
    3d24:	14 c0       	rjmp	.+40     	; 0x3d4e <main+0x1062>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d26:	6b a1       	ldd	r22, Y+35	; 0x23
    3d28:	7c a1       	ldd	r23, Y+36	; 0x24
    3d2a:	8d a1       	ldd	r24, Y+37	; 0x25
    3d2c:	9e a1       	ldd	r25, Y+38	; 0x26
    3d2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d32:	dc 01       	movw	r26, r24
    3d34:	cb 01       	movw	r24, r22
    3d36:	9a a3       	std	Y+34, r25	; 0x22
    3d38:	89 a3       	std	Y+33, r24	; 0x21
    3d3a:	89 a1       	ldd	r24, Y+33	; 0x21
    3d3c:	9a a1       	ldd	r25, Y+34	; 0x22
    3d3e:	9e 8f       	std	Y+30, r25	; 0x1e
    3d40:	8d 8f       	std	Y+29, r24	; 0x1d
    3d42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d46:	01 97       	sbiw	r24, 0x01	; 1
    3d48:	f1 f7       	brne	.-4      	; 0x3d46 <main+0x105a>
    3d4a:	9e 8f       	std	Y+30, r25	; 0x1e
    3d4c:	8d 8f       	std	Y+29, r24	; 0x1d
	        	}
	        	}

	       	_delay_ms(2000);
	       	LCD_Clear();
    3d4e:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <LCD_Clear>
    3d52:	1b cd       	rjmp	.-1482   	; 0x378a <main+0xa9e>
}

 }
	        else{
	        	LCD_Clear();
    3d54:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <LCD_Clear>
	        	LCD_voidGoToXY(LCD_LINE1,1);
    3d58:	80 e0       	ldi	r24, 0x00	; 0
    3d5a:	61 e0       	ldi	r22, 0x01	; 1
    3d5c:	0e 94 ae 14 	call	0x295c	; 0x295c <LCD_voidGoToXY>
	        	LCD_voidSendString("Wrong Password");
    3d60:	8b ea       	ldi	r24, 0xAB	; 171
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	0e 94 2d 13 	call	0x265a	; 0x265a <LCD_voidSendString>
    3d68:	80 e0       	ldi	r24, 0x00	; 0
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	a8 e4       	ldi	r26, 0x48	; 72
    3d6e:	b3 e4       	ldi	r27, 0x43	; 67
    3d70:	89 8f       	std	Y+25, r24	; 0x19
    3d72:	9a 8f       	std	Y+26, r25	; 0x1a
    3d74:	ab 8f       	std	Y+27, r26	; 0x1b
    3d76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d78:	69 8d       	ldd	r22, Y+25	; 0x19
    3d7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d80:	20 e0       	ldi	r18, 0x00	; 0
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	4a ef       	ldi	r20, 0xFA	; 250
    3d86:	54 e4       	ldi	r21, 0x44	; 68
    3d88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d8c:	dc 01       	movw	r26, r24
    3d8e:	cb 01       	movw	r24, r22
    3d90:	8d 8b       	std	Y+21, r24	; 0x15
    3d92:	9e 8b       	std	Y+22, r25	; 0x16
    3d94:	af 8b       	std	Y+23, r26	; 0x17
    3d96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d98:	6d 89       	ldd	r22, Y+21	; 0x15
    3d9a:	7e 89       	ldd	r23, Y+22	; 0x16
    3d9c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d9e:	98 8d       	ldd	r25, Y+24	; 0x18
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	40 e8       	ldi	r20, 0x80	; 128
    3da6:	5f e3       	ldi	r21, 0x3F	; 63
    3da8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3dac:	88 23       	and	r24, r24
    3dae:	2c f4       	brge	.+10     	; 0x3dba <main+0x10ce>
		__ticks = 1;
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	9c 8b       	std	Y+20, r25	; 0x14
    3db6:	8b 8b       	std	Y+19, r24	; 0x13
    3db8:	3f c0       	rjmp	.+126    	; 0x3e38 <main+0x114c>
	else if (__tmp > 65535)
    3dba:	6d 89       	ldd	r22, Y+21	; 0x15
    3dbc:	7e 89       	ldd	r23, Y+22	; 0x16
    3dbe:	8f 89       	ldd	r24, Y+23	; 0x17
    3dc0:	98 8d       	ldd	r25, Y+24	; 0x18
    3dc2:	20 e0       	ldi	r18, 0x00	; 0
    3dc4:	3f ef       	ldi	r19, 0xFF	; 255
    3dc6:	4f e7       	ldi	r20, 0x7F	; 127
    3dc8:	57 e4       	ldi	r21, 0x47	; 71
    3dca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3dce:	18 16       	cp	r1, r24
    3dd0:	4c f5       	brge	.+82     	; 0x3e24 <main+0x1138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dd2:	69 8d       	ldd	r22, Y+25	; 0x19
    3dd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dda:	20 e0       	ldi	r18, 0x00	; 0
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	40 e2       	ldi	r20, 0x20	; 32
    3de0:	51 e4       	ldi	r21, 0x41	; 65
    3de2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3de6:	dc 01       	movw	r26, r24
    3de8:	cb 01       	movw	r24, r22
    3dea:	bc 01       	movw	r22, r24
    3dec:	cd 01       	movw	r24, r26
    3dee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3df2:	dc 01       	movw	r26, r24
    3df4:	cb 01       	movw	r24, r22
    3df6:	9c 8b       	std	Y+20, r25	; 0x14
    3df8:	8b 8b       	std	Y+19, r24	; 0x13
    3dfa:	0f c0       	rjmp	.+30     	; 0x3e1a <main+0x112e>
    3dfc:	88 ec       	ldi	r24, 0xC8	; 200
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	9a 8b       	std	Y+18, r25	; 0x12
    3e02:	89 8b       	std	Y+17, r24	; 0x11
    3e04:	89 89       	ldd	r24, Y+17	; 0x11
    3e06:	9a 89       	ldd	r25, Y+18	; 0x12
    3e08:	01 97       	sbiw	r24, 0x01	; 1
    3e0a:	f1 f7       	brne	.-4      	; 0x3e08 <main+0x111c>
    3e0c:	9a 8b       	std	Y+18, r25	; 0x12
    3e0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e10:	8b 89       	ldd	r24, Y+19	; 0x13
    3e12:	9c 89       	ldd	r25, Y+20	; 0x14
    3e14:	01 97       	sbiw	r24, 0x01	; 1
    3e16:	9c 8b       	std	Y+20, r25	; 0x14
    3e18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e1a:	8b 89       	ldd	r24, Y+19	; 0x13
    3e1c:	9c 89       	ldd	r25, Y+20	; 0x14
    3e1e:	00 97       	sbiw	r24, 0x00	; 0
    3e20:	69 f7       	brne	.-38     	; 0x3dfc <main+0x1110>
    3e22:	14 c0       	rjmp	.+40     	; 0x3e4c <main+0x1160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e24:	6d 89       	ldd	r22, Y+21	; 0x15
    3e26:	7e 89       	ldd	r23, Y+22	; 0x16
    3e28:	8f 89       	ldd	r24, Y+23	; 0x17
    3e2a:	98 8d       	ldd	r25, Y+24	; 0x18
    3e2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e30:	dc 01       	movw	r26, r24
    3e32:	cb 01       	movw	r24, r22
    3e34:	9c 8b       	std	Y+20, r25	; 0x14
    3e36:	8b 8b       	std	Y+19, r24	; 0x13
    3e38:	8b 89       	ldd	r24, Y+19	; 0x13
    3e3a:	9c 89       	ldd	r25, Y+20	; 0x14
    3e3c:	98 8b       	std	Y+16, r25	; 0x10
    3e3e:	8f 87       	std	Y+15, r24	; 0x0f
    3e40:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e42:	98 89       	ldd	r25, Y+16	; 0x10
    3e44:	01 97       	sbiw	r24, 0x01	; 1
    3e46:	f1 f7       	brne	.-4      	; 0x3e44 <main+0x1158>
    3e48:	98 8b       	std	Y+16, r25	; 0x10
    3e4a:	8f 87       	std	Y+15, r24	; 0x0f
	        	_delay_ms(200);
	        	LCD_voidGoToXY(LCD_LINE2,0);
    3e4c:	81 e0       	ldi	r24, 0x01	; 1
    3e4e:	60 e0       	ldi	r22, 0x00	; 0
    3e50:	0e 94 ae 14 	call	0x295c	; 0x295c <LCD_voidGoToXY>
	        	LCD_voidSendString("Please Try Again");
    3e54:	8a eb       	ldi	r24, 0xBA	; 186
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	0e 94 2d 13 	call	0x265a	; 0x265a <LCD_voidSendString>
    3e5c:	80 e0       	ldi	r24, 0x00	; 0
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	a8 e4       	ldi	r26, 0x48	; 72
    3e62:	b3 e4       	ldi	r27, 0x43	; 67
    3e64:	8b 87       	std	Y+11, r24	; 0x0b
    3e66:	9c 87       	std	Y+12, r25	; 0x0c
    3e68:	ad 87       	std	Y+13, r26	; 0x0d
    3e6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e70:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e72:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e74:	20 e0       	ldi	r18, 0x00	; 0
    3e76:	30 e0       	ldi	r19, 0x00	; 0
    3e78:	4a ef       	ldi	r20, 0xFA	; 250
    3e7a:	54 e4       	ldi	r21, 0x44	; 68
    3e7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e80:	dc 01       	movw	r26, r24
    3e82:	cb 01       	movw	r24, r22
    3e84:	8f 83       	std	Y+7, r24	; 0x07
    3e86:	98 87       	std	Y+8, r25	; 0x08
    3e88:	a9 87       	std	Y+9, r26	; 0x09
    3e8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e8c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e8e:	78 85       	ldd	r23, Y+8	; 0x08
    3e90:	89 85       	ldd	r24, Y+9	; 0x09
    3e92:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e94:	20 e0       	ldi	r18, 0x00	; 0
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	40 e8       	ldi	r20, 0x80	; 128
    3e9a:	5f e3       	ldi	r21, 0x3F	; 63
    3e9c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3ea0:	88 23       	and	r24, r24
    3ea2:	2c f4       	brge	.+10     	; 0x3eae <main+0x11c2>
		__ticks = 1;
    3ea4:	81 e0       	ldi	r24, 0x01	; 1
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	9e 83       	std	Y+6, r25	; 0x06
    3eaa:	8d 83       	std	Y+5, r24	; 0x05
    3eac:	40 c0       	rjmp	.+128    	; 0x3f2e <main+0x1242>
	else if (__tmp > 65535)
    3eae:	6f 81       	ldd	r22, Y+7	; 0x07
    3eb0:	78 85       	ldd	r23, Y+8	; 0x08
    3eb2:	89 85       	ldd	r24, Y+9	; 0x09
    3eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eb6:	20 e0       	ldi	r18, 0x00	; 0
    3eb8:	3f ef       	ldi	r19, 0xFF	; 255
    3eba:	4f e7       	ldi	r20, 0x7F	; 127
    3ebc:	57 e4       	ldi	r21, 0x47	; 71
    3ebe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3ec2:	18 16       	cp	r1, r24
    3ec4:	54 f5       	brge	.+84     	; 0x3f1a <main+0x122e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ec6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ec8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3eca:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ecc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ece:	20 e0       	ldi	r18, 0x00	; 0
    3ed0:	30 e0       	ldi	r19, 0x00	; 0
    3ed2:	40 e2       	ldi	r20, 0x20	; 32
    3ed4:	51 e4       	ldi	r21, 0x41	; 65
    3ed6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3eda:	dc 01       	movw	r26, r24
    3edc:	cb 01       	movw	r24, r22
    3ede:	bc 01       	movw	r22, r24
    3ee0:	cd 01       	movw	r24, r26
    3ee2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ee6:	dc 01       	movw	r26, r24
    3ee8:	cb 01       	movw	r24, r22
    3eea:	9e 83       	std	Y+6, r25	; 0x06
    3eec:	8d 83       	std	Y+5, r24	; 0x05
    3eee:	0f c0       	rjmp	.+30     	; 0x3f0e <main+0x1222>
    3ef0:	88 ec       	ldi	r24, 0xC8	; 200
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	9c 83       	std	Y+4, r25	; 0x04
    3ef6:	8b 83       	std	Y+3, r24	; 0x03
    3ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    3efa:	9c 81       	ldd	r25, Y+4	; 0x04
    3efc:	01 97       	sbiw	r24, 0x01	; 1
    3efe:	f1 f7       	brne	.-4      	; 0x3efc <main+0x1210>
    3f00:	9c 83       	std	Y+4, r25	; 0x04
    3f02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f04:	8d 81       	ldd	r24, Y+5	; 0x05
    3f06:	9e 81       	ldd	r25, Y+6	; 0x06
    3f08:	01 97       	sbiw	r24, 0x01	; 1
    3f0a:	9e 83       	std	Y+6, r25	; 0x06
    3f0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f10:	9e 81       	ldd	r25, Y+6	; 0x06
    3f12:	00 97       	sbiw	r24, 0x00	; 0
    3f14:	69 f7       	brne	.-38     	; 0x3ef0 <main+0x1204>
    3f16:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <main+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f1a:	6f 81       	ldd	r22, Y+7	; 0x07
    3f1c:	78 85       	ldd	r23, Y+8	; 0x08
    3f1e:	89 85       	ldd	r24, Y+9	; 0x09
    3f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f26:	dc 01       	movw	r26, r24
    3f28:	cb 01       	movw	r24, r22
    3f2a:	9e 83       	std	Y+6, r25	; 0x06
    3f2c:	8d 83       	std	Y+5, r24	; 0x05
    3f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f30:	9e 81       	ldd	r25, Y+6	; 0x06
    3f32:	9a 83       	std	Y+2, r25	; 0x02
    3f34:	89 83       	std	Y+1, r24	; 0x01
    3f36:	89 81       	ldd	r24, Y+1	; 0x01
    3f38:	9a 81       	ldd	r25, Y+2	; 0x02
    3f3a:	01 97       	sbiw	r24, 0x01	; 1
    3f3c:	f1 f7       	brne	.-4      	; 0x3f3a <main+0x124e>
    3f3e:	9a 83       	std	Y+2, r25	; 0x02
    3f40:	89 83       	std	Y+1, r24	; 0x01
    3f42:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <main+0x23c>

00003f46 <checkPassword>:
	}

}

}
u8 checkPassword(u8 arr1[],u8 arr2[],u8 size){
    3f46:	df 93       	push	r29
    3f48:	cf 93       	push	r28
    3f4a:	cd b7       	in	r28, 0x3d	; 61
    3f4c:	de b7       	in	r29, 0x3e	; 62
    3f4e:	28 97       	sbiw	r28, 0x08	; 8
    3f50:	0f b6       	in	r0, 0x3f	; 63
    3f52:	f8 94       	cli
    3f54:	de bf       	out	0x3e, r29	; 62
    3f56:	0f be       	out	0x3f, r0	; 63
    3f58:	cd bf       	out	0x3d, r28	; 61
    3f5a:	9d 83       	std	Y+5, r25	; 0x05
    3f5c:	8c 83       	std	Y+4, r24	; 0x04
    3f5e:	7f 83       	std	Y+7, r23	; 0x07
    3f60:	6e 83       	std	Y+6, r22	; 0x06
    3f62:	48 87       	std	Y+8, r20	; 0x08
	u8 ret = 1 ;
    3f64:	81 e0       	ldi	r24, 0x01	; 1
    3f66:	8b 83       	std	Y+3, r24	; 0x03
	for(int i = 1;i<size+1;i++){
    3f68:	81 e0       	ldi	r24, 0x01	; 1
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	9a 83       	std	Y+2, r25	; 0x02
    3f6e:	89 83       	std	Y+1, r24	; 0x01
    3f70:	1a c0       	rjmp	.+52     	; 0x3fa6 <checkPassword+0x60>
		if(arr1[i]==arr2[i]){
    3f72:	29 81       	ldd	r18, Y+1	; 0x01
    3f74:	3a 81       	ldd	r19, Y+2	; 0x02
    3f76:	8c 81       	ldd	r24, Y+4	; 0x04
    3f78:	9d 81       	ldd	r25, Y+5	; 0x05
    3f7a:	fc 01       	movw	r30, r24
    3f7c:	e2 0f       	add	r30, r18
    3f7e:	f3 1f       	adc	r31, r19
    3f80:	40 81       	ld	r20, Z
    3f82:	29 81       	ldd	r18, Y+1	; 0x01
    3f84:	3a 81       	ldd	r19, Y+2	; 0x02
    3f86:	8e 81       	ldd	r24, Y+6	; 0x06
    3f88:	9f 81       	ldd	r25, Y+7	; 0x07
    3f8a:	fc 01       	movw	r30, r24
    3f8c:	e2 0f       	add	r30, r18
    3f8e:	f3 1f       	adc	r31, r19
    3f90:	80 81       	ld	r24, Z
    3f92:	48 17       	cp	r20, r24
    3f94:	19 f4       	brne	.+6      	; 0x3f9c <checkPassword+0x56>
			ret++;
    3f96:	8b 81       	ldd	r24, Y+3	; 0x03
    3f98:	8f 5f       	subi	r24, 0xFF	; 255
    3f9a:	8b 83       	std	Y+3, r24	; 0x03
}

}
u8 checkPassword(u8 arr1[],u8 arr2[],u8 size){
	u8 ret = 1 ;
	for(int i = 1;i<size+1;i++){
    3f9c:	89 81       	ldd	r24, Y+1	; 0x01
    3f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3fa0:	01 96       	adiw	r24, 0x01	; 1
    3fa2:	9a 83       	std	Y+2, r25	; 0x02
    3fa4:	89 83       	std	Y+1, r24	; 0x01
    3fa6:	88 85       	ldd	r24, Y+8	; 0x08
    3fa8:	88 2f       	mov	r24, r24
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	9c 01       	movw	r18, r24
    3fae:	2f 5f       	subi	r18, 0xFF	; 255
    3fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    3fb2:	89 81       	ldd	r24, Y+1	; 0x01
    3fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb6:	82 17       	cp	r24, r18
    3fb8:	93 07       	cpc	r25, r19
    3fba:	dc f2       	brlt	.-74     	; 0x3f72 <checkPassword+0x2c>
		if(arr1[i]==arr2[i]){
			ret++;
		}
	}
	if(ret==size+1){
    3fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fbe:	28 2f       	mov	r18, r24
    3fc0:	30 e0       	ldi	r19, 0x00	; 0
    3fc2:	88 85       	ldd	r24, Y+8	; 0x08
    3fc4:	88 2f       	mov	r24, r24
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	01 96       	adiw	r24, 0x01	; 1
    3fca:	28 17       	cp	r18, r24
    3fcc:	39 07       	cpc	r19, r25
    3fce:	19 f4       	brne	.+6      	; 0x3fd6 <checkPassword+0x90>
		ret=1;
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    3fd2:	8b 83       	std	Y+3, r24	; 0x03
    3fd4:	01 c0       	rjmp	.+2      	; 0x3fd8 <checkPassword+0x92>
	}
	else{
		ret = 0;
    3fd6:	1b 82       	std	Y+3, r1	; 0x03
	}
	return ret ;
    3fd8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3fda:	28 96       	adiw	r28, 0x08	; 8
    3fdc:	0f b6       	in	r0, 0x3f	; 63
    3fde:	f8 94       	cli
    3fe0:	de bf       	out	0x3e, r29	; 62
    3fe2:	0f be       	out	0x3f, r0	; 63
    3fe4:	cd bf       	out	0x3d, r28	; 61
    3fe6:	cf 91       	pop	r28
    3fe8:	df 91       	pop	r29
    3fea:	08 95       	ret

00003fec <calcSum>:
 u32  calcSum(u8 arr1[],u8 arr2[],u8 size1,u8 size2){
    3fec:	df 93       	push	r29
    3fee:	cf 93       	push	r28
    3ff0:	cd b7       	in	r28, 0x3d	; 61
    3ff2:	de b7       	in	r29, 0x3e	; 62
    3ff4:	2e 97       	sbiw	r28, 0x0e	; 14
    3ff6:	0f b6       	in	r0, 0x3f	; 63
    3ff8:	f8 94       	cli
    3ffa:	de bf       	out	0x3e, r29	; 62
    3ffc:	0f be       	out	0x3f, r0	; 63
    3ffe:	cd bf       	out	0x3d, r28	; 61
    4000:	9a 87       	std	Y+10, r25	; 0x0a
    4002:	89 87       	std	Y+9, r24	; 0x09
    4004:	7c 87       	std	Y+12, r23	; 0x0c
    4006:	6b 87       	std	Y+11, r22	; 0x0b
    4008:	4d 87       	std	Y+13, r20	; 0x0d
    400a:	2e 87       	std	Y+14, r18	; 0x0e
	   u16 Number1 = arr1[0],Number2=arr2[0];
    400c:	e9 85       	ldd	r30, Y+9	; 0x09
    400e:	fa 85       	ldd	r31, Y+10	; 0x0a
    4010:	80 81       	ld	r24, Z
    4012:	88 2f       	mov	r24, r24
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	98 87       	std	Y+8, r25	; 0x08
    4018:	8f 83       	std	Y+7, r24	; 0x07
    401a:	eb 85       	ldd	r30, Y+11	; 0x0b
    401c:	fc 85       	ldd	r31, Y+12	; 0x0c
    401e:	80 81       	ld	r24, Z
    4020:	88 2f       	mov	r24, r24
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	9e 83       	std	Y+6, r25	; 0x06
    4026:	8d 83       	std	Y+5, r24	; 0x05
	 	for(int i =1;i<size1;i++){
    4028:	81 e0       	ldi	r24, 0x01	; 1
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	9c 83       	std	Y+4, r25	; 0x04
    402e:	8b 83       	std	Y+3, r24	; 0x03
    4030:	20 c0       	rjmp	.+64     	; 0x4072 <calcSum+0x86>
	 		Number1 = Number1*10 + arr1[i];
    4032:	8f 81       	ldd	r24, Y+7	; 0x07
    4034:	98 85       	ldd	r25, Y+8	; 0x08
    4036:	9c 01       	movw	r18, r24
    4038:	22 0f       	add	r18, r18
    403a:	33 1f       	adc	r19, r19
    403c:	c9 01       	movw	r24, r18
    403e:	88 0f       	add	r24, r24
    4040:	99 1f       	adc	r25, r25
    4042:	88 0f       	add	r24, r24
    4044:	99 1f       	adc	r25, r25
    4046:	a9 01       	movw	r20, r18
    4048:	48 0f       	add	r20, r24
    404a:	59 1f       	adc	r21, r25
    404c:	2b 81       	ldd	r18, Y+3	; 0x03
    404e:	3c 81       	ldd	r19, Y+4	; 0x04
    4050:	89 85       	ldd	r24, Y+9	; 0x09
    4052:	9a 85       	ldd	r25, Y+10	; 0x0a
    4054:	fc 01       	movw	r30, r24
    4056:	e2 0f       	add	r30, r18
    4058:	f3 1f       	adc	r31, r19
    405a:	80 81       	ld	r24, Z
    405c:	88 2f       	mov	r24, r24
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	84 0f       	add	r24, r20
    4062:	95 1f       	adc	r25, r21
    4064:	98 87       	std	Y+8, r25	; 0x08
    4066:	8f 83       	std	Y+7, r24	; 0x07
	}
	return ret ;
}
 u32  calcSum(u8 arr1[],u8 arr2[],u8 size1,u8 size2){
	   u16 Number1 = arr1[0],Number2=arr2[0];
	 	for(int i =1;i<size1;i++){
    4068:	8b 81       	ldd	r24, Y+3	; 0x03
    406a:	9c 81       	ldd	r25, Y+4	; 0x04
    406c:	01 96       	adiw	r24, 0x01	; 1
    406e:	9c 83       	std	Y+4, r25	; 0x04
    4070:	8b 83       	std	Y+3, r24	; 0x03
    4072:	8d 85       	ldd	r24, Y+13	; 0x0d
    4074:	28 2f       	mov	r18, r24
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	8b 81       	ldd	r24, Y+3	; 0x03
    407a:	9c 81       	ldd	r25, Y+4	; 0x04
    407c:	82 17       	cp	r24, r18
    407e:	93 07       	cpc	r25, r19
    4080:	c4 f2       	brlt	.-80     	; 0x4032 <calcSum+0x46>
	 		Number1 = Number1*10 + arr1[i];
	 	}
	 	for(int i =1;i<size2;i++){
    4082:	81 e0       	ldi	r24, 0x01	; 1
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	9a 83       	std	Y+2, r25	; 0x02
    4088:	89 83       	std	Y+1, r24	; 0x01
    408a:	20 c0       	rjmp	.+64     	; 0x40cc <calcSum+0xe0>
	 	 		Number2 = Number2*10 + arr2[i];
    408c:	8d 81       	ldd	r24, Y+5	; 0x05
    408e:	9e 81       	ldd	r25, Y+6	; 0x06
    4090:	9c 01       	movw	r18, r24
    4092:	22 0f       	add	r18, r18
    4094:	33 1f       	adc	r19, r19
    4096:	c9 01       	movw	r24, r18
    4098:	88 0f       	add	r24, r24
    409a:	99 1f       	adc	r25, r25
    409c:	88 0f       	add	r24, r24
    409e:	99 1f       	adc	r25, r25
    40a0:	a9 01       	movw	r20, r18
    40a2:	48 0f       	add	r20, r24
    40a4:	59 1f       	adc	r21, r25
    40a6:	29 81       	ldd	r18, Y+1	; 0x01
    40a8:	3a 81       	ldd	r19, Y+2	; 0x02
    40aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    40ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    40ae:	fc 01       	movw	r30, r24
    40b0:	e2 0f       	add	r30, r18
    40b2:	f3 1f       	adc	r31, r19
    40b4:	80 81       	ld	r24, Z
    40b6:	88 2f       	mov	r24, r24
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	84 0f       	add	r24, r20
    40bc:	95 1f       	adc	r25, r21
    40be:	9e 83       	std	Y+6, r25	; 0x06
    40c0:	8d 83       	std	Y+5, r24	; 0x05
 u32  calcSum(u8 arr1[],u8 arr2[],u8 size1,u8 size2){
	   u16 Number1 = arr1[0],Number2=arr2[0];
	 	for(int i =1;i<size1;i++){
	 		Number1 = Number1*10 + arr1[i];
	 	}
	 	for(int i =1;i<size2;i++){
    40c2:	89 81       	ldd	r24, Y+1	; 0x01
    40c4:	9a 81       	ldd	r25, Y+2	; 0x02
    40c6:	01 96       	adiw	r24, 0x01	; 1
    40c8:	9a 83       	std	Y+2, r25	; 0x02
    40ca:	89 83       	std	Y+1, r24	; 0x01
    40cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    40ce:	28 2f       	mov	r18, r24
    40d0:	30 e0       	ldi	r19, 0x00	; 0
    40d2:	89 81       	ldd	r24, Y+1	; 0x01
    40d4:	9a 81       	ldd	r25, Y+2	; 0x02
    40d6:	82 17       	cp	r24, r18
    40d8:	93 07       	cpc	r25, r19
    40da:	c4 f2       	brlt	.-80     	; 0x408c <calcSum+0xa0>
	 	 		Number2 = Number2*10 + arr2[i];
	 	 	}
	 	return (Number1+ Number2);
    40dc:	2f 81       	ldd	r18, Y+7	; 0x07
    40de:	38 85       	ldd	r19, Y+8	; 0x08
    40e0:	8d 81       	ldd	r24, Y+5	; 0x05
    40e2:	9e 81       	ldd	r25, Y+6	; 0x06
    40e4:	82 0f       	add	r24, r18
    40e6:	93 1f       	adc	r25, r19
    40e8:	cc 01       	movw	r24, r24
    40ea:	a0 e0       	ldi	r26, 0x00	; 0
    40ec:	b0 e0       	ldi	r27, 0x00	; 0
}
    40ee:	bc 01       	movw	r22, r24
    40f0:	cd 01       	movw	r24, r26
    40f2:	2e 96       	adiw	r28, 0x0e	; 14
    40f4:	0f b6       	in	r0, 0x3f	; 63
    40f6:	f8 94       	cli
    40f8:	de bf       	out	0x3e, r29	; 62
    40fa:	0f be       	out	0x3f, r0	; 63
    40fc:	cd bf       	out	0x3d, r28	; 61
    40fe:	cf 91       	pop	r28
    4100:	df 91       	pop	r29
    4102:	08 95       	ret

00004104 <calcSub>:
 u32 calcSub(u8 arr1[],u8 arr2[],u8 size1,u8 size2){
    4104:	df 93       	push	r29
    4106:	cf 93       	push	r28
    4108:	cd b7       	in	r28, 0x3d	; 61
    410a:	de b7       	in	r29, 0x3e	; 62
    410c:	2e 97       	sbiw	r28, 0x0e	; 14
    410e:	0f b6       	in	r0, 0x3f	; 63
    4110:	f8 94       	cli
    4112:	de bf       	out	0x3e, r29	; 62
    4114:	0f be       	out	0x3f, r0	; 63
    4116:	cd bf       	out	0x3d, r28	; 61
    4118:	9a 87       	std	Y+10, r25	; 0x0a
    411a:	89 87       	std	Y+9, r24	; 0x09
    411c:	7c 87       	std	Y+12, r23	; 0x0c
    411e:	6b 87       	std	Y+11, r22	; 0x0b
    4120:	4d 87       	std	Y+13, r20	; 0x0d
    4122:	2e 87       	std	Y+14, r18	; 0x0e
 	   u16 Number1 = arr1[0];
    4124:	e9 85       	ldd	r30, Y+9	; 0x09
    4126:	fa 85       	ldd	r31, Y+10	; 0x0a
    4128:	80 81       	ld	r24, Z
    412a:	88 2f       	mov	r24, r24
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	98 87       	std	Y+8, r25	; 0x08
    4130:	8f 83       	std	Y+7, r24	; 0x07
 	   u16 Number2= arr2[0];
    4132:	eb 85       	ldd	r30, Y+11	; 0x0b
    4134:	fc 85       	ldd	r31, Y+12	; 0x0c
    4136:	80 81       	ld	r24, Z
    4138:	88 2f       	mov	r24, r24
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	9e 83       	std	Y+6, r25	; 0x06
    413e:	8d 83       	std	Y+5, r24	; 0x05
 	for(int i =1;i<size1;i++){
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	9c 83       	std	Y+4, r25	; 0x04
    4146:	8b 83       	std	Y+3, r24	; 0x03
    4148:	20 c0       	rjmp	.+64     	; 0x418a <calcSub+0x86>
 		Number1 = Number1*10 + arr1[i];
    414a:	8f 81       	ldd	r24, Y+7	; 0x07
    414c:	98 85       	ldd	r25, Y+8	; 0x08
    414e:	9c 01       	movw	r18, r24
    4150:	22 0f       	add	r18, r18
    4152:	33 1f       	adc	r19, r19
    4154:	c9 01       	movw	r24, r18
    4156:	88 0f       	add	r24, r24
    4158:	99 1f       	adc	r25, r25
    415a:	88 0f       	add	r24, r24
    415c:	99 1f       	adc	r25, r25
    415e:	a9 01       	movw	r20, r18
    4160:	48 0f       	add	r20, r24
    4162:	59 1f       	adc	r21, r25
    4164:	2b 81       	ldd	r18, Y+3	; 0x03
    4166:	3c 81       	ldd	r19, Y+4	; 0x04
    4168:	89 85       	ldd	r24, Y+9	; 0x09
    416a:	9a 85       	ldd	r25, Y+10	; 0x0a
    416c:	fc 01       	movw	r30, r24
    416e:	e2 0f       	add	r30, r18
    4170:	f3 1f       	adc	r31, r19
    4172:	80 81       	ld	r24, Z
    4174:	88 2f       	mov	r24, r24
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	84 0f       	add	r24, r20
    417a:	95 1f       	adc	r25, r21
    417c:	98 87       	std	Y+8, r25	; 0x08
    417e:	8f 83       	std	Y+7, r24	; 0x07
	 	return (Number1+ Number2);
}
 u32 calcSub(u8 arr1[],u8 arr2[],u8 size1,u8 size2){
 	   u16 Number1 = arr1[0];
 	   u16 Number2= arr2[0];
 	for(int i =1;i<size1;i++){
    4180:	8b 81       	ldd	r24, Y+3	; 0x03
    4182:	9c 81       	ldd	r25, Y+4	; 0x04
    4184:	01 96       	adiw	r24, 0x01	; 1
    4186:	9c 83       	std	Y+4, r25	; 0x04
    4188:	8b 83       	std	Y+3, r24	; 0x03
    418a:	8d 85       	ldd	r24, Y+13	; 0x0d
    418c:	28 2f       	mov	r18, r24
    418e:	30 e0       	ldi	r19, 0x00	; 0
    4190:	8b 81       	ldd	r24, Y+3	; 0x03
    4192:	9c 81       	ldd	r25, Y+4	; 0x04
    4194:	82 17       	cp	r24, r18
    4196:	93 07       	cpc	r25, r19
    4198:	c4 f2       	brlt	.-80     	; 0x414a <calcSub+0x46>
 		Number1 = Number1*10 + arr1[i];
 	}
 	for(int i =1;i<size2;i++){
    419a:	81 e0       	ldi	r24, 0x01	; 1
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	9a 83       	std	Y+2, r25	; 0x02
    41a0:	89 83       	std	Y+1, r24	; 0x01
    41a2:	20 c0       	rjmp	.+64     	; 0x41e4 <calcSub+0xe0>
 	 		Number2 = Number2*10 + arr2[i];
    41a4:	8d 81       	ldd	r24, Y+5	; 0x05
    41a6:	9e 81       	ldd	r25, Y+6	; 0x06
    41a8:	9c 01       	movw	r18, r24
    41aa:	22 0f       	add	r18, r18
    41ac:	33 1f       	adc	r19, r19
    41ae:	c9 01       	movw	r24, r18
    41b0:	88 0f       	add	r24, r24
    41b2:	99 1f       	adc	r25, r25
    41b4:	88 0f       	add	r24, r24
    41b6:	99 1f       	adc	r25, r25
    41b8:	a9 01       	movw	r20, r18
    41ba:	48 0f       	add	r20, r24
    41bc:	59 1f       	adc	r21, r25
    41be:	29 81       	ldd	r18, Y+1	; 0x01
    41c0:	3a 81       	ldd	r19, Y+2	; 0x02
    41c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    41c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    41c6:	fc 01       	movw	r30, r24
    41c8:	e2 0f       	add	r30, r18
    41ca:	f3 1f       	adc	r31, r19
    41cc:	80 81       	ld	r24, Z
    41ce:	88 2f       	mov	r24, r24
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	84 0f       	add	r24, r20
    41d4:	95 1f       	adc	r25, r21
    41d6:	9e 83       	std	Y+6, r25	; 0x06
    41d8:	8d 83       	std	Y+5, r24	; 0x05
 	   u16 Number1 = arr1[0];
 	   u16 Number2= arr2[0];
 	for(int i =1;i<size1;i++){
 		Number1 = Number1*10 + arr1[i];
 	}
 	for(int i =1;i<size2;i++){
    41da:	89 81       	ldd	r24, Y+1	; 0x01
    41dc:	9a 81       	ldd	r25, Y+2	; 0x02
    41de:	01 96       	adiw	r24, 0x01	; 1
    41e0:	9a 83       	std	Y+2, r25	; 0x02
    41e2:	89 83       	std	Y+1, r24	; 0x01
    41e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    41e6:	28 2f       	mov	r18, r24
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	89 81       	ldd	r24, Y+1	; 0x01
    41ec:	9a 81       	ldd	r25, Y+2	; 0x02
    41ee:	82 17       	cp	r24, r18
    41f0:	93 07       	cpc	r25, r19
    41f2:	c4 f2       	brlt	.-80     	; 0x41a4 <calcSub+0xa0>
 	 		Number2 = Number2*10 + arr2[i];
 	 	}
 	return (Number1- Number2);
    41f4:	2f 81       	ldd	r18, Y+7	; 0x07
    41f6:	38 85       	ldd	r19, Y+8	; 0x08
    41f8:	8d 81       	ldd	r24, Y+5	; 0x05
    41fa:	9e 81       	ldd	r25, Y+6	; 0x06
    41fc:	a9 01       	movw	r20, r18
    41fe:	48 1b       	sub	r20, r24
    4200:	59 0b       	sbc	r21, r25
    4202:	ca 01       	movw	r24, r20
    4204:	cc 01       	movw	r24, r24
    4206:	a0 e0       	ldi	r26, 0x00	; 0
    4208:	b0 e0       	ldi	r27, 0x00	; 0
 }
    420a:	bc 01       	movw	r22, r24
    420c:	cd 01       	movw	r24, r26
    420e:	2e 96       	adiw	r28, 0x0e	; 14
    4210:	0f b6       	in	r0, 0x3f	; 63
    4212:	f8 94       	cli
    4214:	de bf       	out	0x3e, r29	; 62
    4216:	0f be       	out	0x3f, r0	; 63
    4218:	cd bf       	out	0x3d, r28	; 61
    421a:	cf 91       	pop	r28
    421c:	df 91       	pop	r29
    421e:	08 95       	ret

00004220 <calcMult>:
 u32  calcMult(u8 arr1[],u8 arr2[],u8 size1,u8 size2){
    4220:	df 93       	push	r29
    4222:	cf 93       	push	r28
    4224:	cd b7       	in	r28, 0x3d	; 61
    4226:	de b7       	in	r29, 0x3e	; 62
    4228:	2e 97       	sbiw	r28, 0x0e	; 14
    422a:	0f b6       	in	r0, 0x3f	; 63
    422c:	f8 94       	cli
    422e:	de bf       	out	0x3e, r29	; 62
    4230:	0f be       	out	0x3f, r0	; 63
    4232:	cd bf       	out	0x3d, r28	; 61
    4234:	9a 87       	std	Y+10, r25	; 0x0a
    4236:	89 87       	std	Y+9, r24	; 0x09
    4238:	7c 87       	std	Y+12, r23	; 0x0c
    423a:	6b 87       	std	Y+11, r22	; 0x0b
    423c:	4d 87       	std	Y+13, r20	; 0x0d
    423e:	2e 87       	std	Y+14, r18	; 0x0e
	   u16 Number1 = arr1[0],Number2=arr2[0];
    4240:	e9 85       	ldd	r30, Y+9	; 0x09
    4242:	fa 85       	ldd	r31, Y+10	; 0x0a
    4244:	80 81       	ld	r24, Z
    4246:	88 2f       	mov	r24, r24
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	98 87       	std	Y+8, r25	; 0x08
    424c:	8f 83       	std	Y+7, r24	; 0x07
    424e:	eb 85       	ldd	r30, Y+11	; 0x0b
    4250:	fc 85       	ldd	r31, Y+12	; 0x0c
    4252:	80 81       	ld	r24, Z
    4254:	88 2f       	mov	r24, r24
    4256:	90 e0       	ldi	r25, 0x00	; 0
    4258:	9e 83       	std	Y+6, r25	; 0x06
    425a:	8d 83       	std	Y+5, r24	; 0x05
	 	for(int i =1;i<size1;i++){
    425c:	81 e0       	ldi	r24, 0x01	; 1
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	9c 83       	std	Y+4, r25	; 0x04
    4262:	8b 83       	std	Y+3, r24	; 0x03
    4264:	20 c0       	rjmp	.+64     	; 0x42a6 <calcMult+0x86>
	 		Number1 = Number1*10 + arr1[i];
    4266:	8f 81       	ldd	r24, Y+7	; 0x07
    4268:	98 85       	ldd	r25, Y+8	; 0x08
    426a:	9c 01       	movw	r18, r24
    426c:	22 0f       	add	r18, r18
    426e:	33 1f       	adc	r19, r19
    4270:	c9 01       	movw	r24, r18
    4272:	88 0f       	add	r24, r24
    4274:	99 1f       	adc	r25, r25
    4276:	88 0f       	add	r24, r24
    4278:	99 1f       	adc	r25, r25
    427a:	a9 01       	movw	r20, r18
    427c:	48 0f       	add	r20, r24
    427e:	59 1f       	adc	r21, r25
    4280:	2b 81       	ldd	r18, Y+3	; 0x03
    4282:	3c 81       	ldd	r19, Y+4	; 0x04
    4284:	89 85       	ldd	r24, Y+9	; 0x09
    4286:	9a 85       	ldd	r25, Y+10	; 0x0a
    4288:	fc 01       	movw	r30, r24
    428a:	e2 0f       	add	r30, r18
    428c:	f3 1f       	adc	r31, r19
    428e:	80 81       	ld	r24, Z
    4290:	88 2f       	mov	r24, r24
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	84 0f       	add	r24, r20
    4296:	95 1f       	adc	r25, r21
    4298:	98 87       	std	Y+8, r25	; 0x08
    429a:	8f 83       	std	Y+7, r24	; 0x07
 	 	}
 	return (Number1- Number2);
 }
 u32  calcMult(u8 arr1[],u8 arr2[],u8 size1,u8 size2){
	   u16 Number1 = arr1[0],Number2=arr2[0];
	 	for(int i =1;i<size1;i++){
    429c:	8b 81       	ldd	r24, Y+3	; 0x03
    429e:	9c 81       	ldd	r25, Y+4	; 0x04
    42a0:	01 96       	adiw	r24, 0x01	; 1
    42a2:	9c 83       	std	Y+4, r25	; 0x04
    42a4:	8b 83       	std	Y+3, r24	; 0x03
    42a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    42a8:	28 2f       	mov	r18, r24
    42aa:	30 e0       	ldi	r19, 0x00	; 0
    42ac:	8b 81       	ldd	r24, Y+3	; 0x03
    42ae:	9c 81       	ldd	r25, Y+4	; 0x04
    42b0:	82 17       	cp	r24, r18
    42b2:	93 07       	cpc	r25, r19
    42b4:	c4 f2       	brlt	.-80     	; 0x4266 <calcMult+0x46>
	 		Number1 = Number1*10 + arr1[i];
	 	}
	 	for(int i =1;i<size2;i++){
    42b6:	81 e0       	ldi	r24, 0x01	; 1
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	9a 83       	std	Y+2, r25	; 0x02
    42bc:	89 83       	std	Y+1, r24	; 0x01
    42be:	20 c0       	rjmp	.+64     	; 0x4300 <calcMult+0xe0>
	 	 		Number2= Number2*10 + arr2[i];
    42c0:	8d 81       	ldd	r24, Y+5	; 0x05
    42c2:	9e 81       	ldd	r25, Y+6	; 0x06
    42c4:	9c 01       	movw	r18, r24
    42c6:	22 0f       	add	r18, r18
    42c8:	33 1f       	adc	r19, r19
    42ca:	c9 01       	movw	r24, r18
    42cc:	88 0f       	add	r24, r24
    42ce:	99 1f       	adc	r25, r25
    42d0:	88 0f       	add	r24, r24
    42d2:	99 1f       	adc	r25, r25
    42d4:	a9 01       	movw	r20, r18
    42d6:	48 0f       	add	r20, r24
    42d8:	59 1f       	adc	r21, r25
    42da:	29 81       	ldd	r18, Y+1	; 0x01
    42dc:	3a 81       	ldd	r19, Y+2	; 0x02
    42de:	8b 85       	ldd	r24, Y+11	; 0x0b
    42e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    42e2:	fc 01       	movw	r30, r24
    42e4:	e2 0f       	add	r30, r18
    42e6:	f3 1f       	adc	r31, r19
    42e8:	80 81       	ld	r24, Z
    42ea:	88 2f       	mov	r24, r24
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	84 0f       	add	r24, r20
    42f0:	95 1f       	adc	r25, r21
    42f2:	9e 83       	std	Y+6, r25	; 0x06
    42f4:	8d 83       	std	Y+5, r24	; 0x05
 u32  calcMult(u8 arr1[],u8 arr2[],u8 size1,u8 size2){
	   u16 Number1 = arr1[0],Number2=arr2[0];
	 	for(int i =1;i<size1;i++){
	 		Number1 = Number1*10 + arr1[i];
	 	}
	 	for(int i =1;i<size2;i++){
    42f6:	89 81       	ldd	r24, Y+1	; 0x01
    42f8:	9a 81       	ldd	r25, Y+2	; 0x02
    42fa:	01 96       	adiw	r24, 0x01	; 1
    42fc:	9a 83       	std	Y+2, r25	; 0x02
    42fe:	89 83       	std	Y+1, r24	; 0x01
    4300:	8e 85       	ldd	r24, Y+14	; 0x0e
    4302:	28 2f       	mov	r18, r24
    4304:	30 e0       	ldi	r19, 0x00	; 0
    4306:	89 81       	ldd	r24, Y+1	; 0x01
    4308:	9a 81       	ldd	r25, Y+2	; 0x02
    430a:	82 17       	cp	r24, r18
    430c:	93 07       	cpc	r25, r19
    430e:	c4 f2       	brlt	.-80     	; 0x42c0 <calcMult+0xa0>
	 	 		Number2= Number2*10 + arr2[i];
	 	 	}
	 	return (Number1*Number2);
    4310:	2f 81       	ldd	r18, Y+7	; 0x07
    4312:	38 85       	ldd	r19, Y+8	; 0x08
    4314:	8d 81       	ldd	r24, Y+5	; 0x05
    4316:	9e 81       	ldd	r25, Y+6	; 0x06
    4318:	ac 01       	movw	r20, r24
    431a:	24 9f       	mul	r18, r20
    431c:	c0 01       	movw	r24, r0
    431e:	25 9f       	mul	r18, r21
    4320:	90 0d       	add	r25, r0
    4322:	34 9f       	mul	r19, r20
    4324:	90 0d       	add	r25, r0
    4326:	11 24       	eor	r1, r1
    4328:	cc 01       	movw	r24, r24
    432a:	a0 e0       	ldi	r26, 0x00	; 0
    432c:	b0 e0       	ldi	r27, 0x00	; 0
 }
    432e:	bc 01       	movw	r22, r24
    4330:	cd 01       	movw	r24, r26
    4332:	2e 96       	adiw	r28, 0x0e	; 14
    4334:	0f b6       	in	r0, 0x3f	; 63
    4336:	f8 94       	cli
    4338:	de bf       	out	0x3e, r29	; 62
    433a:	0f be       	out	0x3f, r0	; 63
    433c:	cd bf       	out	0x3d, r28	; 61
    433e:	cf 91       	pop	r28
    4340:	df 91       	pop	r29
    4342:	08 95       	ret

00004344 <calcDivision>:
 u32  calcDivision(u8 arr1[],u8 arr2[],u8 size1,u8 size2){
    4344:	df 93       	push	r29
    4346:	cf 93       	push	r28
    4348:	cd b7       	in	r28, 0x3d	; 61
    434a:	de b7       	in	r29, 0x3e	; 62
    434c:	66 97       	sbiw	r28, 0x16	; 22
    434e:	0f b6       	in	r0, 0x3f	; 63
    4350:	f8 94       	cli
    4352:	de bf       	out	0x3e, r29	; 62
    4354:	0f be       	out	0x3f, r0	; 63
    4356:	cd bf       	out	0x3d, r28	; 61
    4358:	9e 87       	std	Y+14, r25	; 0x0e
    435a:	8d 87       	std	Y+13, r24	; 0x0d
    435c:	78 8b       	std	Y+16, r23	; 0x10
    435e:	6f 87       	std	Y+15, r22	; 0x0f
    4360:	49 8b       	std	Y+17, r20	; 0x11
    4362:	2a 8b       	std	Y+18, r18	; 0x12
	   u16 Number1 = arr1[0],Number2=arr2[0];
    4364:	ed 85       	ldd	r30, Y+13	; 0x0d
    4366:	fe 85       	ldd	r31, Y+14	; 0x0e
    4368:	80 81       	ld	r24, Z
    436a:	88 2f       	mov	r24, r24
    436c:	90 e0       	ldi	r25, 0x00	; 0
    436e:	9c 87       	std	Y+12, r25	; 0x0c
    4370:	8b 87       	std	Y+11, r24	; 0x0b
    4372:	ef 85       	ldd	r30, Y+15	; 0x0f
    4374:	f8 89       	ldd	r31, Y+16	; 0x10
    4376:	80 81       	ld	r24, Z
    4378:	88 2f       	mov	r24, r24
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	9a 87       	std	Y+10, r25	; 0x0a
    437e:	89 87       	std	Y+9, r24	; 0x09
	   u32 flag= 0;
    4380:	1d 82       	std	Y+5, r1	; 0x05
    4382:	1e 82       	std	Y+6, r1	; 0x06
    4384:	1f 82       	std	Y+7, r1	; 0x07
    4386:	18 86       	std	Y+8, r1	; 0x08
	 	for(int i =1;i<size1;i++){
    4388:	81 e0       	ldi	r24, 0x01	; 1
    438a:	90 e0       	ldi	r25, 0x00	; 0
    438c:	9c 83       	std	Y+4, r25	; 0x04
    438e:	8b 83       	std	Y+3, r24	; 0x03
    4390:	20 c0       	rjmp	.+64     	; 0x43d2 <calcDivision+0x8e>
	 		Number1 = Number1*10 + arr1[i];
    4392:	8b 85       	ldd	r24, Y+11	; 0x0b
    4394:	9c 85       	ldd	r25, Y+12	; 0x0c
    4396:	9c 01       	movw	r18, r24
    4398:	22 0f       	add	r18, r18
    439a:	33 1f       	adc	r19, r19
    439c:	c9 01       	movw	r24, r18
    439e:	88 0f       	add	r24, r24
    43a0:	99 1f       	adc	r25, r25
    43a2:	88 0f       	add	r24, r24
    43a4:	99 1f       	adc	r25, r25
    43a6:	a9 01       	movw	r20, r18
    43a8:	48 0f       	add	r20, r24
    43aa:	59 1f       	adc	r21, r25
    43ac:	2b 81       	ldd	r18, Y+3	; 0x03
    43ae:	3c 81       	ldd	r19, Y+4	; 0x04
    43b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    43b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    43b4:	fc 01       	movw	r30, r24
    43b6:	e2 0f       	add	r30, r18
    43b8:	f3 1f       	adc	r31, r19
    43ba:	80 81       	ld	r24, Z
    43bc:	88 2f       	mov	r24, r24
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	84 0f       	add	r24, r20
    43c2:	95 1f       	adc	r25, r21
    43c4:	9c 87       	std	Y+12, r25	; 0x0c
    43c6:	8b 87       	std	Y+11, r24	; 0x0b
	 	return (Number1*Number2);
 }
 u32  calcDivision(u8 arr1[],u8 arr2[],u8 size1,u8 size2){
	   u16 Number1 = arr1[0],Number2=arr2[0];
	   u32 flag= 0;
	 	for(int i =1;i<size1;i++){
    43c8:	8b 81       	ldd	r24, Y+3	; 0x03
    43ca:	9c 81       	ldd	r25, Y+4	; 0x04
    43cc:	01 96       	adiw	r24, 0x01	; 1
    43ce:	9c 83       	std	Y+4, r25	; 0x04
    43d0:	8b 83       	std	Y+3, r24	; 0x03
    43d2:	89 89       	ldd	r24, Y+17	; 0x11
    43d4:	28 2f       	mov	r18, r24
    43d6:	30 e0       	ldi	r19, 0x00	; 0
    43d8:	8b 81       	ldd	r24, Y+3	; 0x03
    43da:	9c 81       	ldd	r25, Y+4	; 0x04
    43dc:	82 17       	cp	r24, r18
    43de:	93 07       	cpc	r25, r19
    43e0:	c4 f2       	brlt	.-80     	; 0x4392 <calcDivision+0x4e>
	 		Number1 = Number1*10 + arr1[i];
	 	}
	 	for(int i =1;i<size2;i++){
    43e2:	81 e0       	ldi	r24, 0x01	; 1
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	9a 83       	std	Y+2, r25	; 0x02
    43e8:	89 83       	std	Y+1, r24	; 0x01
    43ea:	20 c0       	rjmp	.+64     	; 0x442c <calcDivision+0xe8>
	 	 		Number2 = Number2*10 + arr2[i];
    43ec:	89 85       	ldd	r24, Y+9	; 0x09
    43ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    43f0:	9c 01       	movw	r18, r24
    43f2:	22 0f       	add	r18, r18
    43f4:	33 1f       	adc	r19, r19
    43f6:	c9 01       	movw	r24, r18
    43f8:	88 0f       	add	r24, r24
    43fa:	99 1f       	adc	r25, r25
    43fc:	88 0f       	add	r24, r24
    43fe:	99 1f       	adc	r25, r25
    4400:	a9 01       	movw	r20, r18
    4402:	48 0f       	add	r20, r24
    4404:	59 1f       	adc	r21, r25
    4406:	29 81       	ldd	r18, Y+1	; 0x01
    4408:	3a 81       	ldd	r19, Y+2	; 0x02
    440a:	8f 85       	ldd	r24, Y+15	; 0x0f
    440c:	98 89       	ldd	r25, Y+16	; 0x10
    440e:	fc 01       	movw	r30, r24
    4410:	e2 0f       	add	r30, r18
    4412:	f3 1f       	adc	r31, r19
    4414:	80 81       	ld	r24, Z
    4416:	88 2f       	mov	r24, r24
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	84 0f       	add	r24, r20
    441c:	95 1f       	adc	r25, r21
    441e:	9a 87       	std	Y+10, r25	; 0x0a
    4420:	89 87       	std	Y+9, r24	; 0x09
	   u16 Number1 = arr1[0],Number2=arr2[0];
	   u32 flag= 0;
	 	for(int i =1;i<size1;i++){
	 		Number1 = Number1*10 + arr1[i];
	 	}
	 	for(int i =1;i<size2;i++){
    4422:	89 81       	ldd	r24, Y+1	; 0x01
    4424:	9a 81       	ldd	r25, Y+2	; 0x02
    4426:	01 96       	adiw	r24, 0x01	; 1
    4428:	9a 83       	std	Y+2, r25	; 0x02
    442a:	89 83       	std	Y+1, r24	; 0x01
    442c:	8a 89       	ldd	r24, Y+18	; 0x12
    442e:	28 2f       	mov	r18, r24
    4430:	30 e0       	ldi	r19, 0x00	; 0
    4432:	89 81       	ldd	r24, Y+1	; 0x01
    4434:	9a 81       	ldd	r25, Y+2	; 0x02
    4436:	82 17       	cp	r24, r18
    4438:	93 07       	cpc	r25, r19
    443a:	c4 f2       	brlt	.-80     	; 0x43ec <calcDivision+0xa8>
	 	 		Number2 = Number2*10 + arr2[i];
	 	 	}
	 	if(Number2!=0){
    443c:	89 85       	ldd	r24, Y+9	; 0x09
    443e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4440:	00 97       	sbiw	r24, 0x00	; 0
    4442:	81 f0       	breq	.+32     	; 0x4464 <calcDivision+0x120>
	 	return (Number1/Number2);
    4444:	8b 85       	ldd	r24, Y+11	; 0x0b
    4446:	9c 85       	ldd	r25, Y+12	; 0x0c
    4448:	29 85       	ldd	r18, Y+9	; 0x09
    444a:	3a 85       	ldd	r19, Y+10	; 0x0a
    444c:	b9 01       	movw	r22, r18
    444e:	0e 94 51 22 	call	0x44a2	; 0x44a2 <__udivmodhi4>
    4452:	cb 01       	movw	r24, r22
    4454:	9c 01       	movw	r18, r24
    4456:	40 e0       	ldi	r20, 0x00	; 0
    4458:	50 e0       	ldi	r21, 0x00	; 0
    445a:	2b 8b       	std	Y+19, r18	; 0x13
    445c:	3c 8b       	std	Y+20, r19	; 0x14
    445e:	4d 8b       	std	Y+21, r20	; 0x15
    4460:	5e 8b       	std	Y+22, r21	; 0x16
    4462:	10 c0       	rjmp	.+32     	; 0x4484 <calcDivision+0x140>
	 	}
	 	else{
	 		flag = 2 ;
    4464:	82 e0       	ldi	r24, 0x02	; 2
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	a0 e0       	ldi	r26, 0x00	; 0
    446a:	b0 e0       	ldi	r27, 0x00	; 0
    446c:	8d 83       	std	Y+5, r24	; 0x05
    446e:	9e 83       	std	Y+6, r25	; 0x06
    4470:	af 83       	std	Y+7, r26	; 0x07
    4472:	b8 87       	std	Y+8, r27	; 0x08
	 		return flag;
    4474:	8d 81       	ldd	r24, Y+5	; 0x05
    4476:	9e 81       	ldd	r25, Y+6	; 0x06
    4478:	af 81       	ldd	r26, Y+7	; 0x07
    447a:	b8 85       	ldd	r27, Y+8	; 0x08
    447c:	8b 8b       	std	Y+19, r24	; 0x13
    447e:	9c 8b       	std	Y+20, r25	; 0x14
    4480:	ad 8b       	std	Y+21, r26	; 0x15
    4482:	be 8b       	std	Y+22, r27	; 0x16
    4484:	8b 89       	ldd	r24, Y+19	; 0x13
    4486:	9c 89       	ldd	r25, Y+20	; 0x14
    4488:	ad 89       	ldd	r26, Y+21	; 0x15
    448a:	be 89       	ldd	r27, Y+22	; 0x16
	 	}
 }
    448c:	bc 01       	movw	r22, r24
    448e:	cd 01       	movw	r24, r26
    4490:	66 96       	adiw	r28, 0x16	; 22
    4492:	0f b6       	in	r0, 0x3f	; 63
    4494:	f8 94       	cli
    4496:	de bf       	out	0x3e, r29	; 62
    4498:	0f be       	out	0x3f, r0	; 63
    449a:	cd bf       	out	0x3d, r28	; 61
    449c:	cf 91       	pop	r28
    449e:	df 91       	pop	r29
    44a0:	08 95       	ret

000044a2 <__udivmodhi4>:
    44a2:	aa 1b       	sub	r26, r26
    44a4:	bb 1b       	sub	r27, r27
    44a6:	51 e1       	ldi	r21, 0x11	; 17
    44a8:	07 c0       	rjmp	.+14     	; 0x44b8 <__udivmodhi4_ep>

000044aa <__udivmodhi4_loop>:
    44aa:	aa 1f       	adc	r26, r26
    44ac:	bb 1f       	adc	r27, r27
    44ae:	a6 17       	cp	r26, r22
    44b0:	b7 07       	cpc	r27, r23
    44b2:	10 f0       	brcs	.+4      	; 0x44b8 <__udivmodhi4_ep>
    44b4:	a6 1b       	sub	r26, r22
    44b6:	b7 0b       	sbc	r27, r23

000044b8 <__udivmodhi4_ep>:
    44b8:	88 1f       	adc	r24, r24
    44ba:	99 1f       	adc	r25, r25
    44bc:	5a 95       	dec	r21
    44be:	a9 f7       	brne	.-22     	; 0x44aa <__udivmodhi4_loop>
    44c0:	80 95       	com	r24
    44c2:	90 95       	com	r25
    44c4:	bc 01       	movw	r22, r24
    44c6:	cd 01       	movw	r24, r26
    44c8:	08 95       	ret

000044ca <__udivmodsi4>:
    44ca:	a1 e2       	ldi	r26, 0x21	; 33
    44cc:	1a 2e       	mov	r1, r26
    44ce:	aa 1b       	sub	r26, r26
    44d0:	bb 1b       	sub	r27, r27
    44d2:	fd 01       	movw	r30, r26
    44d4:	0d c0       	rjmp	.+26     	; 0x44f0 <__udivmodsi4_ep>

000044d6 <__udivmodsi4_loop>:
    44d6:	aa 1f       	adc	r26, r26
    44d8:	bb 1f       	adc	r27, r27
    44da:	ee 1f       	adc	r30, r30
    44dc:	ff 1f       	adc	r31, r31
    44de:	a2 17       	cp	r26, r18
    44e0:	b3 07       	cpc	r27, r19
    44e2:	e4 07       	cpc	r30, r20
    44e4:	f5 07       	cpc	r31, r21
    44e6:	20 f0       	brcs	.+8      	; 0x44f0 <__udivmodsi4_ep>
    44e8:	a2 1b       	sub	r26, r18
    44ea:	b3 0b       	sbc	r27, r19
    44ec:	e4 0b       	sbc	r30, r20
    44ee:	f5 0b       	sbc	r31, r21

000044f0 <__udivmodsi4_ep>:
    44f0:	66 1f       	adc	r22, r22
    44f2:	77 1f       	adc	r23, r23
    44f4:	88 1f       	adc	r24, r24
    44f6:	99 1f       	adc	r25, r25
    44f8:	1a 94       	dec	r1
    44fa:	69 f7       	brne	.-38     	; 0x44d6 <__udivmodsi4_loop>
    44fc:	60 95       	com	r22
    44fe:	70 95       	com	r23
    4500:	80 95       	com	r24
    4502:	90 95       	com	r25
    4504:	9b 01       	movw	r18, r22
    4506:	ac 01       	movw	r20, r24
    4508:	bd 01       	movw	r22, r26
    450a:	cf 01       	movw	r24, r30
    450c:	08 95       	ret

0000450e <__prologue_saves__>:
    450e:	2f 92       	push	r2
    4510:	3f 92       	push	r3
    4512:	4f 92       	push	r4
    4514:	5f 92       	push	r5
    4516:	6f 92       	push	r6
    4518:	7f 92       	push	r7
    451a:	8f 92       	push	r8
    451c:	9f 92       	push	r9
    451e:	af 92       	push	r10
    4520:	bf 92       	push	r11
    4522:	cf 92       	push	r12
    4524:	df 92       	push	r13
    4526:	ef 92       	push	r14
    4528:	ff 92       	push	r15
    452a:	0f 93       	push	r16
    452c:	1f 93       	push	r17
    452e:	cf 93       	push	r28
    4530:	df 93       	push	r29
    4532:	cd b7       	in	r28, 0x3d	; 61
    4534:	de b7       	in	r29, 0x3e	; 62
    4536:	ca 1b       	sub	r28, r26
    4538:	db 0b       	sbc	r29, r27
    453a:	0f b6       	in	r0, 0x3f	; 63
    453c:	f8 94       	cli
    453e:	de bf       	out	0x3e, r29	; 62
    4540:	0f be       	out	0x3f, r0	; 63
    4542:	cd bf       	out	0x3d, r28	; 61
    4544:	09 94       	ijmp

00004546 <__epilogue_restores__>:
    4546:	2a 88       	ldd	r2, Y+18	; 0x12
    4548:	39 88       	ldd	r3, Y+17	; 0x11
    454a:	48 88       	ldd	r4, Y+16	; 0x10
    454c:	5f 84       	ldd	r5, Y+15	; 0x0f
    454e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4550:	7d 84       	ldd	r7, Y+13	; 0x0d
    4552:	8c 84       	ldd	r8, Y+12	; 0x0c
    4554:	9b 84       	ldd	r9, Y+11	; 0x0b
    4556:	aa 84       	ldd	r10, Y+10	; 0x0a
    4558:	b9 84       	ldd	r11, Y+9	; 0x09
    455a:	c8 84       	ldd	r12, Y+8	; 0x08
    455c:	df 80       	ldd	r13, Y+7	; 0x07
    455e:	ee 80       	ldd	r14, Y+6	; 0x06
    4560:	fd 80       	ldd	r15, Y+5	; 0x05
    4562:	0c 81       	ldd	r16, Y+4	; 0x04
    4564:	1b 81       	ldd	r17, Y+3	; 0x03
    4566:	aa 81       	ldd	r26, Y+2	; 0x02
    4568:	b9 81       	ldd	r27, Y+1	; 0x01
    456a:	ce 0f       	add	r28, r30
    456c:	d1 1d       	adc	r29, r1
    456e:	0f b6       	in	r0, 0x3f	; 63
    4570:	f8 94       	cli
    4572:	de bf       	out	0x3e, r29	; 62
    4574:	0f be       	out	0x3f, r0	; 63
    4576:	cd bf       	out	0x3d, r28	; 61
    4578:	ed 01       	movw	r28, r26
    457a:	08 95       	ret

0000457c <_exit>:
    457c:	f8 94       	cli

0000457e <__stop_program>:
    457e:	ff cf       	rjmp	.-2      	; 0x457e <__stop_program>
